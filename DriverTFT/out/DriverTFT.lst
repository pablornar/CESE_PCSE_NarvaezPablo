
DriverTFT/out/DriverTFT.elf:     file format elf32-littlearm
DriverTFT/out/DriverTFT.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001ec9

Program Header:
0x70000001 off    0x00016248 vaddr 0x1a006248 paddr 0x1a006248 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000d80 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00006250 memsz 0x00006250 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a006250 align 2**16
         filesz 0x00000ca4 memsz 0x00000ca4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006244  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000ca4  10000000  1a006250  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020ca4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020ca4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020ca4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020ca4  2**2
                  CONTENTS
  6 .bss          000000d8  10000ca8  10000ca8  00000ca8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020ca4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020ca4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020ca4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020ca4  2**2
                  CONTENTS
 11 .init_array   00000004  1a006244  1a006244  00016244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a006248  1a006248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020ca4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020ca4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020ca4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020ca4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020ca4  2**2
                  CONTENTS
 18 .noinit       00000000  10000d80  10000d80  00020ca4  2**2
                  CONTENTS
 19 .debug_info   00022a16  00000000  00000000  00020ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000048e1  00000000  00000000  000436ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009910  00000000  00000000  00047f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000aa0  00000000  00000000  000518ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000c60  00000000  00000000  0005234b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000d1af  00000000  00000000  00052fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00012494  00000000  00000000  0006015a  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00028263  00000000  00000000  000725ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  0009a851  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  0009a8b9  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000024bc  00000000  00000000  0009a8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000ca8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a006244 l    d  .init_array	00000000 .init_array
1a006248 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000d80 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 DriverTFT.c
00000000 l    df *ABS*	00000000 inicio.c
00000000 l    df *ABS*	00000000 system.c
10000cac l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board.c
1a001f74 l     F .text	00000044 Board_LED_Init
1a001fb8 l     F .text	00000040 Board_TEC_Init
1a001ff8 l     F .text	00000040 Board_GPIO_Init
1a002038 l     F .text	00000030 Board_ADC_Init
1a002068 l     F .text	00000038 Board_SPI_Init
1a0020a0 l     F .text	00000024 Board_I2C_Init
1a005d28 l     O .text	00000008 GpioButtons
1a005d30 l     O .text	0000000c GpioLeds
1a005d3c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005d54 l     O .text	00000004 InitClkStates
1a005d58 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0021d0 l     F .text	0000002c Chip_UART_GetIndex
1a005dcc l     O .text	00000008 UART_BClock
1a005dd4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00236c l     F .text	00000014 Chip_ADC_GetClockIndex
1a002380 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0024d8 l     F .text	000000a0 pll_calc_divs
1a002578 l     F .text	0000010c pll_get_frac
1a002684 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0028f8 l     F .text	00000022 Chip_Clock_GetDivRate
10000cb0 l     O .bss	00000008 audio_usb_pll_freq
1a005de8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005e54 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000bfc l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002c70 l     F .text	00000014 Chip_SSP_GetClockIndex
1a002c84 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000c34 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a005e9c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000cb8 l     O .bss	00000004 callBackFuncParams
10000cc0 l     O .bss	00000008 tickCounter
10000cc8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002f78 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000ccc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
1a005fd4 l     O .text	00000080 npio2_hw
1a006054 l     O .text	00000108 two_over_pi
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
1a006160 l     O .text	00000040 PIo2
1a0061a0 l     O .text	00000010 init_jk
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 impure.c
10000c44 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a006248 l       .init_array	00000000 __init_array_end
1a006244 l       .bss_RAM5	00000000 __preinit_array_end
1a006244 l       .init_array	00000000 __init_array_start
1a006244 l       .bss_RAM5	00000000 __preinit_array_start
1a005c00 g     F .text	00000010 _malloc_usable_size_r
1a00271c g     F .text	0000001c Chip_Clock_GetDividerSource
1a000b58 g     F .text	000000b0 clrScr
1a004f3c g     F .text	00000012 .hidden __aeabi_dcmple
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a004e78 g     F .text	0000007a .hidden __cmpdf2
1a00448c g     F .text	00000012 fabs
1a000184  w    F .text	00000002 DebugMon_Handler
10000cd8 g     O .bss	00000001 D3
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a002400 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a004e78 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0017b4 g     F .text	000000d8 print
10000cd9 g     O .bss	00000001 fch
10000cdc g     O .bss	00000004 B_WR
10000ce0 g     O .bss	00000001 fcl
1a0049e8 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a002118 g     F .text	00000008 __stdio_init
10000d74 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00017a  w    F .text	00000002 HardFault_Handler
1a001cf0 g     F .text	000001d4 inicio
1a000000 g       *ABS*	00000000 __vectors_start__
1a00246a g     F .text	0000000c Chip_ADC_SetResolution
1a005900 g     F .text	0000000c __malloc_unlock
10000ce1 g     O .bss	00000001 WR
10000ce4 g     O .bss	00000004 disp_y_size
1a002e94 g     F .text	0000002c SysTick_Handler
1a002250 g     F .text	00000040 Chip_UART_SetBaud
10000d75 g     O .bss	00000001 __lock___arc4random_mutex
10000ce8 g     O .bss	00000001 D9
1a001ec4  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0058c0 g     F .text	00000034 memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
10000cec g     O .bss	00000004 B_REST
1a006250 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
10000cf0 g     O .bss	00000004 B_CS
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a000df0 g     F .text	00000034 setBackColorb
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a004e68 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff59c6 g       *ABS*	00000000 __valid_user_code_checksum
1a0044a0 g     F .text	00000108 floor
1a006250 g       .ARM.exidx	00000000 _etext
10000cf4 g     O .bss	00000001 VH
1a004f04 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
10000cf5 g     O .bss	00000001 D0
10000cf8 g     O .bss	00000004 P_SDA
10000cfc g     O .bss	00000004 display_model
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a00299a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a003410 g     F .text	0000042c __ieee754_rem_pio2
1a005318 g     F .text	0000001c memcpy
1a004ef4 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
10000d00 g     O .bss	00000001 D11
1a005a10 g     F .text	000001f0 _svfprintf_r
1a004970 g     F .text	00000022 .hidden __floatsidf
1a004e70 g     F .text	00000082 .hidden __ltdf2
1a0019a0 g     F .text	000000a8 _convert_float
1a004fc8 g     F .text	00000000 .hidden __aeabi_uldivmod
10000d80 g       .noinit	00000000 _noinit
10000d6c g     O .bss	00000004 SystemCoreClock
1a0021fc g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000e24 g     F .text	0000008c inicioLCD
10000d04 g     O .bss	00000004 display_transfer_mode
1a000180  w    F .text	00000002 UsageFault_Handler
1a003840 g     F .text	00000284 __kernel_cos
1a002a4c g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10000d08 g     O .bss	00000004 display_serial_mode
1a002158 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a004950 g     F .text	0000001e .hidden __aeabi_ui2d
10000d0c g     O .bss	00000001 __p2
1a004ff8 g     F .text	000002d0 .hidden __udivmoddi4
1a0046cc g     F .text	00000000 .hidden __aeabi_drsub
1a001f54 g     F .text	00000020 _sbrk_r
1a005d24 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
10000d10 g     O .bss	00000004 valor
10000d14 g     O .bss	00000004 P_REST
1a000300 g       .text	00000000 __CRP_WORD_END__
10000d18 g     O .bss	00000004 P_SCL
1a004f28 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000618 g     F .text	00000028 LCD_Write_DATA
1a0042f8 g     F .text	00000194 __kernel_sin
1a004994 g     F .text	00000042 .hidden __extendsfdf2
1a004c98 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0046d8 g     F .text	00000276 .hidden __adddf3
1a000300 g     F .text	000000b8 Conflcd
1a006248 g       .ARM.exidx	00000000 __exidx_start
10000d76 g     O .bss	00000001 __lock___env_recursive_mutex
1a004a44 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a0023b2 g     F .text	0000000e setStartMode
10000d77 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a000ddc g     F .text	00000014 setColor
1a00590c g     F .text	0000004c _realloc_r
1a0052cc g     F .text	00000048 __libc_init_array
10000d1c g     O .bss	00000001 D10
1a002ec0 g     F .text	000000b8 adcInit
1a004950 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a001568 g     F .text	00000054 drawfillCircle
1a0020e8 g     F .text	00000030 Board_Init
1a001f52  w    F .text	00000002 _init
10000d1d g     O .bss	00000001 bcl
10000bec g     O .data	00000004 LATCHED_16
1a000114 g       .text	00000000 __data_section_table
1a003ac8 g     F .text	0000082c __kernel_rem_pio2
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000d80 g       .bss	00000000 _ebss
1a002476 g     F .text	0000002a Chip_ADC_EnableChannel
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a001ec8 g     F .text	00000088 Reset_Handler
1a002e18 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002c38 g     F .text	00000038 Chip_I2C_SetClockRate
1a004f78 g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0026d0 g     F .text	0000004c Chip_Clock_EnableCrystal
10000d78 g     O .bss	00000001 __lock___malloc_recursive_mutex
10000d1e g     O .bss	00000001 D12
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0010d0 g     F .text	00000208 printCharAscii
1a0046d8 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
10000bf8 g     O .data	00000001 orient
1a004e70 g     F .text	00000082 .hidden __ledf2
10000d20 g     O .bss	00000004 P_CS
1a0057e8 g     F .text	00000020 strcat
1a0049d8 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0061b0 g     O .text	00000020 __sf_fake_stderr
1a002c14 g     F .text	00000024 Chip_I2C_Init
1a000c08 g     F .text	0000001c setFont
1a005316 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a00288c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a005958 g     F .text	000000b6 __ssputs_r
1a005eec g     O .text	000000e6 gpioPinsInit
10000be8 g     O .data	00000001 LANDSCAPE
1a002c9c g     F .text	00000012 Chip_SSP_SetClockRate
1a004f64 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a003290 g     F .text	000000c0 cos
1a005820 g     F .text	00000000 memchr
1a005344 g     F .text	0000009c _free_r
1a002974 g     F .text	00000026 Chip_Clock_GetBaseClock
1a004f50 g     F .text	00000012 .hidden __aeabi_dcmpge
10000ca8 g       .bss	00000000 _bss
1a002438 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0046d4 g     F .text	0000027a .hidden __aeabi_dsub
1a003350 g     F .text	000000c0 sin
10000d24 g     O .bss	00000004 B_SCL
1a0049d8 g     F .text	0000006a .hidden __floatundidf
10000d28 g     O .bss	00000001 bch
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a002cae g     F .text	0000003e Chip_SSP_SetBitRate
1a002bf0 g     F .text	00000002 Chip_GPIO_Init
1a005d50 g     O .text	00000004 OscRateIn
1a002d78 g     F .text	0000007c uartInit
10000d80 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000690 g     F .text	00000404 _fast_fill_16
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
10000d29 g     O .bss	00000001 _transparent
1a000178 g       .text	00000000 __bss_section_table_end
1a000eb0 g     F .text	00000074 drawHLine
1a004970 g     F .text	00000022 .hidden __aeabi_i2d
1a002fac g     F .text	000001ac gpioInit
1a001a48 g     F .text	000000e6 printNumF
10000d2a g     O .bss	00000001 D5
10000d2b g     O .bss	00000001 D2
10000d2c g     O .bss	00000004 B_ALE
1a0013cc g     F .text	0000019c drawCircle
1a0052c8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a004c98 g     F .text	000001d0 .hidden __divdf3
1a004a44 g     F .text	00000254 .hidden __muldf3
10000d30 g     O .bss	00000001 __p3
1a0031c4 g     F .text	0000001c USB0_IRQHandler
1a002a18 g     F .text	00000034 Chip_Clock_Disable
10000d31 g     O .bss	00000001 D8
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0058f4 g     F .text	0000000c __malloc_lock
10000bf0 g     O .data	00000004 SERIAL_4PIN
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0061d0 g     O .text	00000020 __sf_fake_stdin
1a002738 g     F .text	0000001c Chip_Clock_GetDividerDivisor
10000d34 g     O .bss	00000004 P_WR
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a005314 g     F .text	00000002 __retarget_lock_acquire_recursive
1a001328 g     F .text	000000a2 drawRoundRect
10000ca8 g     O .bss	00000001 PORTRAIT
1a005334 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
10000d38 g     O .bss	00000004 B_RS
1a001b30 g     F .text	000001c0 main
10000d3c g     O .bss	00000008 cfont
1a0012d8 g     F .text	00000050 drawRectangulo
1a000a94 g     F .text	00000080 setXY
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
10000d44 g     O .bss	00000004 SER
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
10000d48 g     O .bss	00000001 VL
1a0053e0 g     F .text	000000b4 _malloc_r
10000000 g     O .data	00000be4 BigFont
1a0049e8 g     F .text	0000005a .hidden __aeabi_l2d
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0029a8 g     F .text	0000003c Chip_Clock_EnableOpts
1a002754 g     F .text	000000b8 Chip_Clock_GetClockInputHz
10000d49 g     O .bss	00000001 D4
10000d4c g     O .bss	00000004 B_SDA
1a00280c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000c24 g     F .text	00000190 initlcd
1a002d24 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a003254 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a004e78 g     F .text	0000007a .hidden __nedf2
1a003158 g     F .text	0000006a gpioWrite
1a001f50  w    F .text	00000002 _fini
1a000f98 g     F .text	000000dc drawLine
1a0015c0 g     F .text	000001f4 rotateChar
1a000668 g     F .text	00000028 LCD_Write_DATAb
1a0057a8 g     F .text	00000040 sprintf
1a0023c0 g     F .text	00000040 Chip_ADC_Init
10000d70 g     O .bss	00000004 g_pUsbApi
1a002120 g     F .text	00000038 Board_SetupMuxing
1a002290 g     F .text	000000dc Chip_UART_SetBaudFDR
1a002df4 g     F .text	0000000c tickRead
10000c38 g     O .data	00000008 tickRateMS
10000d50 g     O .bss	00000001 D14
10000d51 g     O .bss	00000001 D13
1a000b14 g     F .text	00000044 clrXY
1a0024a0 g     F .text	00000022 Chip_ADC_SetBurstCmd
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a005494 g     F .text	000000ea _printf_common
10000c40 g     O .data	00000004 _impure_ptr
1a0045a8 g     F .text	00000124 scalbn
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a005a10 g     F .text	000001f0 _svfiprintf_r
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000d80 g       .bss	00000000 _pvHeapStart
10000d52 g     O .bss	00000001 D15
1a000178 g       .text	00000000 __section_table_end
1a002cec g     F .text	00000038 Chip_SSP_Init
1a001084 g     F .text	0000004c drawPixel
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
10000be4 g     O .data	00000004 CTE70
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0020c4 g     F .text	00000024 Board_Debug_Init
1a004f14 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a002416 g     F .text	00000022 Chip_ADC_Int_SetChannelCmd
10000ca4 g       .data	00000000 _edata
1a002bf4 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10000d79 g     O .bss	00000001 __lock___at_quick_exit_mutex
10000d53 g     O .bss	00000001 __p5
1a002a98 g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a00188c g     F .text	00000114 printNumI
1a000000 g     O .text	00000040 g_pfnVectors
1a0024c4 g     F .text	00000014 SystemCoreClockUpdate
1a004f78 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0061f0 g     O .text	00000020 __sf_fake_stdout
1a0057a8 g     F .text	00000040 siprintf
10000d54 g     O .bss	00000004 P_RS
1a0052c8  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
10000d7a g     O .bss	00000001 __lock___dd_hash_mutex
10000d7b g     O .bss	00000001 __lock___tz_mutex
10000d58 g     O .bss	00000001 D1
1a000f24 g     F .text	00000074 drawVLine
1a005808 g     F .text	00000010 strlen
1a005580 g     F .text	00000228 _printf_i
1a0029e4 g     F .text	00000034 Chip_Clock_Enable
1a004f04 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a004e68 g     F .text	0000008a .hidden __gedf2
1a0003b8 g     F .text	00000260 LCD_Writ_Bus
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10000cd4 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a001074 g     F .text	0000000e setPixel
10000d59 g     O .bss	00000001 __p1
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
10000d5a g     O .bss	00000001 __p4
1a004994 g     F .text	00000042 .hidden __aeabi_f2d
1a0031e0 g     F .text	00000074 boardInit
10000d5b g     O .bss	00000001 D7
10000d5c g     O .bss	00000001 RS
10000bf4 g     O .data	00000004 SERIAL_5PIN
10000cd0 g     O .bss	00000004 __malloc_free_list
10000d5d g     O .bss	00000001 CS
10000d60 g     O .bss	00000004 disp_x_size
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0046d4 g     F .text	0000027a .hidden __subdf3
10000d64 g     O .bss	00000001 D6
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
10000d65 g     O .bss	00000001 REST
1a002e00 g     F .text	00000018 tickPowerSet
1a000db4 g     F .text	00000028 setColorb
10000d68 g     O .bss	00000004 P_ALE
1a00291c g     F .text	00000058 Chip_Clock_SetBaseClock
1a002d5c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000640 g     F .text	00000028 LCD_Write_COM
10000d7c g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0021c4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 c9 1e 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a c6 59 ff 53     }............Y.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	95 2e 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	c5 31 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .1..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a006250 	.word	0x1a006250
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000ca4 	.word	0x00000ca4
1a000120:	1a006250 	.word	0x1a006250
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a006250 	.word	0x1a006250
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a006250 	.word	0x1a006250
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a006250 	.word	0x1a006250
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000ca8 	.word	0x10000ca8
1a000154:	000000d8 	.word	0x000000d8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <Conflcd>:
#define LCDFCONFIGURACION_H_
//para este modelo tenemos
//db0-C5 db1-C4 db2-C3 db3-C2 db4-C1 db5-D10 db6-A7 db7-D9 db8-B26 db9-A14 db10-A15 db11-D0 db12-D1 db13-D2 db14-D3 db15-D6
//rs-c6 wr-c7 cs-c8 rst-c9
//con esta funcion se obtiene la resolucion en x, y y la forma de transferencia.
void Conflcd(int model, int RS, int WR, int CS, int REST) {
1a000300:	b570      	push	{r4, r5, r6, lr}
1a000302:	b0de      	sub	sp, #376	; 0x178
1a000304:	4604      	mov	r4, r0
	int dsx[] = { 239, 239, 239, 239, 239, 239, 175, 175, 239, 127,     // 00-09
1a000306:	4d24      	ldr	r5, [pc, #144]	; (1a000398 <Conflcd+0x98>)
1a000308:	267c      	movs	r6, #124	; 0x7c
1a00030a:	4632      	mov	r2, r6
1a00030c:	4629      	mov	r1, r5
1a00030e:	a83f      	add	r0, sp, #252	; 0xfc
1a000310:	f005 f802 	bl	1a005318 <memcpy>
			127, 239, 271, 479, 239, 239, 239, 239, 239, 239,           // 10-19
			479, 319, 239, 175, 0, 239, 239, 319, 319, 799,            // 20-29
			127 };                                  // 30-
	int dsy[] = { 319, 399, 319, 319, 319, 319, 219, 219, 399, 159,     // 00-09
1a000314:	4632      	mov	r2, r6
1a000316:	19a9      	adds	r1, r5, r6
1a000318:	a820      	add	r0, sp, #128	; 0x80
1a00031a:	f004 fffd 	bl	1a005318 <memcpy>
			127, 319, 479, 799, 319, 319, 319, 319, 319, 319,           // 10-19
			799, 479, 319, 219, 0, 319, 319, 479, 479, 479,            // 20-29
			159 };                                  // 30-
	int dtm[] = { 16, 16, 16, 8, 8, 16, 8, SERIAL_4PIN, 16, SERIAL_5PIN, // 00-09
1a00031e:	ab01      	add	r3, sp, #4
1a000320:	2210      	movs	r2, #16
1a000322:	601a      	str	r2, [r3, #0]
1a000324:	605a      	str	r2, [r3, #4]
1a000326:	609a      	str	r2, [r3, #8]
1a000328:	2108      	movs	r1, #8
1a00032a:	60d9      	str	r1, [r3, #12]
1a00032c:	6119      	str	r1, [r3, #16]
1a00032e:	615a      	str	r2, [r3, #20]
1a000330:	6199      	str	r1, [r3, #24]
1a000332:	481a      	ldr	r0, [pc, #104]	; (1a00039c <Conflcd+0x9c>)
1a000334:	6805      	ldr	r5, [r0, #0]
1a000336:	61dd      	str	r5, [r3, #28]
1a000338:	621a      	str	r2, [r3, #32]
1a00033a:	4819      	ldr	r0, [pc, #100]	; (1a0003a0 <Conflcd+0xa0>)
1a00033c:	6800      	ldr	r0, [r0, #0]
1a00033e:	6258      	str	r0, [r3, #36]	; 0x24
1a000340:	6298      	str	r0, [r3, #40]	; 0x28
1a000342:	62da      	str	r2, [r3, #44]	; 0x2c
1a000344:	631a      	str	r2, [r3, #48]	; 0x30
1a000346:	635a      	str	r2, [r3, #52]	; 0x34
1a000348:	6399      	str	r1, [r3, #56]	; 0x38
1a00034a:	63da      	str	r2, [r3, #60]	; 0x3c
1a00034c:	4e15      	ldr	r6, [pc, #84]	; (1a0003a4 <Conflcd+0xa4>)
1a00034e:	6836      	ldr	r6, [r6, #0]
1a000350:	641e      	str	r6, [r3, #64]	; 0x40
1a000352:	645a      	str	r2, [r3, #68]	; 0x44
1a000354:	6499      	str	r1, [r3, #72]	; 0x48
1a000356:	64d9      	str	r1, [r3, #76]	; 0x4c
1a000358:	651a      	str	r2, [r3, #80]	; 0x50
1a00035a:	655a      	str	r2, [r3, #84]	; 0x54
1a00035c:	659a      	str	r2, [r3, #88]	; 0x58
1a00035e:	65d9      	str	r1, [r3, #92]	; 0x5c
1a000360:	2100      	movs	r1, #0
1a000362:	6619      	str	r1, [r3, #96]	; 0x60
1a000364:	6658      	str	r0, [r3, #100]	; 0x64
1a000366:	669d      	str	r5, [r3, #104]	; 0x68
1a000368:	66da      	str	r2, [r3, #108]	; 0x6c
1a00036a:	671a      	str	r2, [r3, #112]	; 0x70
1a00036c:	675a      	str	r2, [r3, #116]	; 0x74
1a00036e:	6798      	str	r0, [r3, #120]	; 0x78
			SERIAL_5PIN, 16, 16, 16, 8, 16, LATCHED_16, 16, 8, 8,       // 10-19
			16, 16, 16, 8, 0, SERIAL_5PIN, SERIAL_4PIN, 16, 16, 16,     // 20-29
			SERIAL_5PIN };                              // 30-

	disp_x_size = dsx[model];
1a000370:	aa5e      	add	r2, sp, #376	; 0x178
1a000372:	eb02 0284 	add.w	r2, r2, r4, lsl #2
1a000376:	f852 0c7c 	ldr.w	r0, [r2, #-124]
1a00037a:	490b      	ldr	r1, [pc, #44]	; (1a0003a8 <Conflcd+0xa8>)
1a00037c:	6008      	str	r0, [r1, #0]
	disp_y_size = dsy[model];
1a00037e:	f852 1cf8 	ldr.w	r1, [r2, #-248]
1a000382:	4a0a      	ldr	r2, [pc, #40]	; (1a0003ac <Conflcd+0xac>)
1a000384:	6011      	str	r1, [r2, #0]
	display_transfer_mode = dtm[model];       //para arm es 16
1a000386:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
1a00038a:	4b09      	ldr	r3, [pc, #36]	; (1a0003b0 <Conflcd+0xb0>)
1a00038c:	601a      	str	r2, [r3, #0]
	display_model = model;
1a00038e:	4b09      	ldr	r3, [pc, #36]	; (1a0003b4 <Conflcd+0xb4>)
1a000390:	601c      	str	r4, [r3, #0]

	if (display_transfer_mode != 1) {
		_set_direction_registers (display_transfer_mode); //habilita los pines del micro

	}
}
1a000392:	b05e      	add	sp, #376	; 0x178
1a000394:	bd70      	pop	{r4, r5, r6, pc}
1a000396:	bf00      	nop
1a000398:	1a005c10 	.word	0x1a005c10
1a00039c:	10000bf0 	.word	0x10000bf0
1a0003a0:	10000bf4 	.word	0x10000bf4
1a0003a4:	10000bec 	.word	0x10000bec
1a0003a8:	10000d60 	.word	0x10000d60
1a0003ac:	10000ce4 	.word	0x10000ce4
1a0003b0:	10000d04 	.word	0x10000d04
1a0003b4:	10000cfc 	.word	0x10000cfc

1a0003b8 <LCD_Writ_Bus>:
		 REG_PIOC_OER=(REG_PIOC_OER & 0b11111111111111111111110000111111) | 0b00000000000000000000001111000000; //PC6 - PC9 enable
		 */
	}
}

void LCD_Writ_Bus(char VH, char VL, uint8_t mode) {
1a0003b8:	b570      	push	{r4, r5, r6, lr}
1a0003ba:	4604      	mov	r4, r0
1a0003bc:	460d      	mov	r5, r1
	//aqui para micro arm
	//REG_PIOA_CODR=0x0000C080;  //pone en cero los pines seleccionados
	gpioWrite(D6, OFF);
1a0003be:	2100      	movs	r1, #0
1a0003c0:	4b84      	ldr	r3, [pc, #528]	; (1a0005d4 <LCD_Writ_Bus+0x21c>)
1a0003c2:	f993 0000 	ldrsb.w	r0, [r3]
1a0003c6:	f002 fec7 	bl	1a003158 <gpioWrite>
	gpioWrite(D9, OFF);
1a0003ca:	2100      	movs	r1, #0
1a0003cc:	4b82      	ldr	r3, [pc, #520]	; (1a0005d8 <LCD_Writ_Bus+0x220>)
1a0003ce:	f993 0000 	ldrsb.w	r0, [r3]
1a0003d2:	f002 fec1 	bl	1a003158 <gpioWrite>
	gpioWrite(D10, OFF);
1a0003d6:	2100      	movs	r1, #0
1a0003d8:	4b80      	ldr	r3, [pc, #512]	; (1a0005dc <LCD_Writ_Bus+0x224>)
1a0003da:	f993 0000 	ldrsb.w	r0, [r3]
1a0003de:	f002 febb 	bl	1a003158 <gpioWrite>
	//REG_PIOB_CODR=0x4000000;
	gpioWrite(D8, OFF);
1a0003e2:	2100      	movs	r1, #0
1a0003e4:	4b7e      	ldr	r3, [pc, #504]	; (1a0005e0 <LCD_Writ_Bus+0x228>)
1a0003e6:	f993 0000 	ldrsb.w	r0, [r3]
1a0003ea:	f002 feb5 	bl	1a003158 <gpioWrite>
	//REG_PIOC_CODR=0x0000003E;
	gpioWrite(D0, OFF);
1a0003ee:	2100      	movs	r1, #0
1a0003f0:	4b7c      	ldr	r3, [pc, #496]	; (1a0005e4 <LCD_Writ_Bus+0x22c>)
1a0003f2:	f993 0000 	ldrsb.w	r0, [r3]
1a0003f6:	f002 feaf 	bl	1a003158 <gpioWrite>
	gpioWrite(D1, OFF);
1a0003fa:	2100      	movs	r1, #0
1a0003fc:	4b7a      	ldr	r3, [pc, #488]	; (1a0005e8 <LCD_Writ_Bus+0x230>)
1a0003fe:	f993 0000 	ldrsb.w	r0, [r3]
1a000402:	f002 fea9 	bl	1a003158 <gpioWrite>
	gpioWrite(D2, OFF);
1a000406:	2100      	movs	r1, #0
1a000408:	4b78      	ldr	r3, [pc, #480]	; (1a0005ec <LCD_Writ_Bus+0x234>)
1a00040a:	f993 0000 	ldrsb.w	r0, [r3]
1a00040e:	f002 fea3 	bl	1a003158 <gpioWrite>
	gpioWrite(D3, OFF);
1a000412:	2100      	movs	r1, #0
1a000414:	4b76      	ldr	r3, [pc, #472]	; (1a0005f0 <LCD_Writ_Bus+0x238>)
1a000416:	f993 0000 	ldrsb.w	r0, [r3]
1a00041a:	f002 fe9d 	bl	1a003158 <gpioWrite>
	gpioWrite(D4, OFF);
1a00041e:	2100      	movs	r1, #0
1a000420:	4b74      	ldr	r3, [pc, #464]	; (1a0005f4 <LCD_Writ_Bus+0x23c>)
1a000422:	f993 0000 	ldrsb.w	r0, [r3]
1a000426:	f002 fe97 	bl	1a003158 <gpioWrite>
	//REG_PIOD_CODR=0x0000064F;
	gpioWrite(D5, OFF);
1a00042a:	2100      	movs	r1, #0
1a00042c:	4b72      	ldr	r3, [pc, #456]	; (1a0005f8 <LCD_Writ_Bus+0x240>)
1a00042e:	f993 0000 	ldrsb.w	r0, [r3]
1a000432:	f002 fe91 	bl	1a003158 <gpioWrite>
	gpioWrite(D7, OFF);
1a000436:	2100      	movs	r1, #0
1a000438:	4b70      	ldr	r3, [pc, #448]	; (1a0005fc <LCD_Writ_Bus+0x244>)
1a00043a:	f993 0000 	ldrsb.w	r0, [r3]
1a00043e:	f002 fe8b 	bl	1a003158 <gpioWrite>
	gpioWrite(D11, OFF);
1a000442:	2100      	movs	r1, #0
1a000444:	4b6e      	ldr	r3, [pc, #440]	; (1a000600 <LCD_Writ_Bus+0x248>)
1a000446:	f993 0000 	ldrsb.w	r0, [r3]
1a00044a:	f002 fe85 	bl	1a003158 <gpioWrite>
	gpioWrite(D12, OFF);
1a00044e:	2100      	movs	r1, #0
1a000450:	4b6c      	ldr	r3, [pc, #432]	; (1a000604 <LCD_Writ_Bus+0x24c>)
1a000452:	f993 0000 	ldrsb.w	r0, [r3]
1a000456:	f002 fe7f 	bl	1a003158 <gpioWrite>
	gpioWrite(D13, OFF);
1a00045a:	2100      	movs	r1, #0
1a00045c:	4b6a      	ldr	r3, [pc, #424]	; (1a000608 <LCD_Writ_Bus+0x250>)
1a00045e:	f993 0000 	ldrsb.w	r0, [r3]
1a000462:	f002 fe79 	bl	1a003158 <gpioWrite>
	gpioWrite(D14, OFF);
1a000466:	2100      	movs	r1, #0
1a000468:	4b68      	ldr	r3, [pc, #416]	; (1a00060c <LCD_Writ_Bus+0x254>)
1a00046a:	f993 0000 	ldrsb.w	r0, [r3]
1a00046e:	f002 fe73 	bl	1a003158 <gpioWrite>
	gpioWrite(D15, OFF);
1a000472:	2100      	movs	r1, #0
1a000474:	4b66      	ldr	r3, [pc, #408]	; (1a000610 <LCD_Writ_Bus+0x258>)
1a000476:	f993 0000 	ldrsb.w	r0, [r3]
1a00047a:	f002 fe6d 	bl	1a003158 <gpioWrite>

	//REG_PIOA_SODR=((VH & 0x06)<<13) | ((VL & 0x40)<<1);   //pone en 1 los bits seleccionados por puerto
	if ((VL & 0x040)) {
1a00047e:	f015 0f40 	tst.w	r5, #64	; 0x40
1a000482:	d136      	bne.n	1a0004f2 <LCD_Writ_Bus+0x13a>
		gpioWrite(D6, ON);
	}
	if ((VH & 0x02)) {
1a000484:	f014 0f02 	tst.w	r4, #2
1a000488:	d13a      	bne.n	1a000500 <LCD_Writ_Bus+0x148>
		gpioWrite(D9, ON);
	}
	if ((VH & 0x04)) {
1a00048a:	f014 0604 	ands.w	r6, r4, #4
1a00048e:	d13e      	bne.n	1a00050e <LCD_Writ_Bus+0x156>
		gpioWrite(D10, ON);
	}
	//(VH & 0x01) ? REG_PIOB_SODR = 0x4000000 : REG_PIOB_CODR = 0x4000000;
	if ((VH & 0x01)) {
1a000490:	f014 0f01 	tst.w	r4, #1
1a000494:	d142      	bne.n	1a00051c <LCD_Writ_Bus+0x164>
		gpioWrite(D8, ON);
	}

	//REG_PIOC_SODR=((VL & 0x01)<<5) | ((VL & 0x02)<<3) | ((VL & 0x04)<<1) | ((VL & 0x08)>>1) | ((VL & 0x10)>>3);
	if ((VL & 0x01)) {
1a000496:	f015 0f01 	tst.w	r5, #1
1a00049a:	d146      	bne.n	1a00052a <LCD_Writ_Bus+0x172>
		gpioWrite(D0, ON);
	}
	if ((VL & 0x02)) {
1a00049c:	f015 0f02 	tst.w	r5, #2
1a0004a0:	d14a      	bne.n	1a000538 <LCD_Writ_Bus+0x180>
		gpioWrite(D1, ON);
	}
	if ((VL & 0x04)) {
1a0004a2:	f015 0f04 	tst.w	r5, #4
1a0004a6:	d14e      	bne.n	1a000546 <LCD_Writ_Bus+0x18e>
		gpioWrite(D2, ON);
	}
	if ((VL & 0x08)) {
1a0004a8:	f015 0f08 	tst.w	r5, #8
1a0004ac:	d152      	bne.n	1a000554 <LCD_Writ_Bus+0x19c>
		gpioWrite(D3, ON);
	}
	if ((VL & 0x010)) {
1a0004ae:	f015 0f10 	tst.w	r5, #16
1a0004b2:	d156      	bne.n	1a000562 <LCD_Writ_Bus+0x1aa>
		gpioWrite(D4, ON);
	}
	//REG_PIOD_SODR=((VH & 0x78)>>3) | ((VH & 0x80)>>1) | ((VL & 0x20)<<5) | ((VL & 0x80)<<2);
	if ((VL & 0x020)) {
1a0004b4:	f015 0f20 	tst.w	r5, #32
1a0004b8:	d15a      	bne.n	1a000570 <LCD_Writ_Bus+0x1b8>
		gpioWrite(D5, ON);
	}
	if ((VL & 0x080)) {
1a0004ba:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0004be:	d15e      	bne.n	1a00057e <LCD_Writ_Bus+0x1c6>
		gpioWrite(D7, ON);
	}
	if ((VH & 0x08)) {
1a0004c0:	f014 0508 	ands.w	r5, r4, #8
1a0004c4:	d162      	bne.n	1a00058c <LCD_Writ_Bus+0x1d4>
		gpioWrite(D11, ON);
	}
	if ((VH & 0x010)) {
1a0004c6:	f014 0f10 	tst.w	r4, #16
1a0004ca:	d166      	bne.n	1a00059a <LCD_Writ_Bus+0x1e2>
		gpioWrite(D12, ON);
	}
	if ((VH & 0x020)) {
1a0004cc:	f014 0f20 	tst.w	r4, #32
1a0004d0:	d16a      	bne.n	1a0005a8 <LCD_Writ_Bus+0x1f0>
		gpioWrite(D13, ON);
	}
	if ((VH & 0x04)) {
1a0004d2:	2e00      	cmp	r6, #0
1a0004d4:	d16f      	bne.n	1a0005b6 <LCD_Writ_Bus+0x1fe>
		gpioWrite(D14, ON);
	}
	if ((VH & 0x08)) {
1a0004d6:	2d00      	cmp	r5, #0
1a0004d8:	d174      	bne.n	1a0005c4 <LCD_Writ_Bus+0x20c>
		gpioWrite(D15, ON);
	}
	//pulse_low(P_WR, B_WR); hace un pulso en bajo de wr
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
	gpioWrite(WR, ON);
1a0004da:	4c4e      	ldr	r4, [pc, #312]	; (1a000614 <LCD_Writ_Bus+0x25c>)
1a0004dc:	2101      	movs	r1, #1
1a0004de:	f994 0000 	ldrsb.w	r0, [r4]
1a0004e2:	f002 fe39 	bl	1a003158 <gpioWrite>
	//delayMicroseconds(1); //retardo minimo de 12nseg
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
	gpioWrite(WR, OFF);
1a0004e6:	2100      	movs	r1, #0
1a0004e8:	f994 0000 	ldrsb.w	r0, [r4]
1a0004ec:	f002 fe34 	bl	1a003158 <gpioWrite>
}
1a0004f0:	bd70      	pop	{r4, r5, r6, pc}
		gpioWrite(D6, ON);
1a0004f2:	2101      	movs	r1, #1
1a0004f4:	4b37      	ldr	r3, [pc, #220]	; (1a0005d4 <LCD_Writ_Bus+0x21c>)
1a0004f6:	f993 0000 	ldrsb.w	r0, [r3]
1a0004fa:	f002 fe2d 	bl	1a003158 <gpioWrite>
1a0004fe:	e7c1      	b.n	1a000484 <LCD_Writ_Bus+0xcc>
		gpioWrite(D9, ON);
1a000500:	2101      	movs	r1, #1
1a000502:	4b35      	ldr	r3, [pc, #212]	; (1a0005d8 <LCD_Writ_Bus+0x220>)
1a000504:	f993 0000 	ldrsb.w	r0, [r3]
1a000508:	f002 fe26 	bl	1a003158 <gpioWrite>
1a00050c:	e7bd      	b.n	1a00048a <LCD_Writ_Bus+0xd2>
		gpioWrite(D10, ON);
1a00050e:	2101      	movs	r1, #1
1a000510:	4b32      	ldr	r3, [pc, #200]	; (1a0005dc <LCD_Writ_Bus+0x224>)
1a000512:	f993 0000 	ldrsb.w	r0, [r3]
1a000516:	f002 fe1f 	bl	1a003158 <gpioWrite>
1a00051a:	e7b9      	b.n	1a000490 <LCD_Writ_Bus+0xd8>
		gpioWrite(D8, ON);
1a00051c:	2101      	movs	r1, #1
1a00051e:	4b30      	ldr	r3, [pc, #192]	; (1a0005e0 <LCD_Writ_Bus+0x228>)
1a000520:	f993 0000 	ldrsb.w	r0, [r3]
1a000524:	f002 fe18 	bl	1a003158 <gpioWrite>
1a000528:	e7b5      	b.n	1a000496 <LCD_Writ_Bus+0xde>
		gpioWrite(D0, ON);
1a00052a:	2101      	movs	r1, #1
1a00052c:	4b2d      	ldr	r3, [pc, #180]	; (1a0005e4 <LCD_Writ_Bus+0x22c>)
1a00052e:	f993 0000 	ldrsb.w	r0, [r3]
1a000532:	f002 fe11 	bl	1a003158 <gpioWrite>
1a000536:	e7b1      	b.n	1a00049c <LCD_Writ_Bus+0xe4>
		gpioWrite(D1, ON);
1a000538:	2101      	movs	r1, #1
1a00053a:	4b2b      	ldr	r3, [pc, #172]	; (1a0005e8 <LCD_Writ_Bus+0x230>)
1a00053c:	f993 0000 	ldrsb.w	r0, [r3]
1a000540:	f002 fe0a 	bl	1a003158 <gpioWrite>
1a000544:	e7ad      	b.n	1a0004a2 <LCD_Writ_Bus+0xea>
		gpioWrite(D2, ON);
1a000546:	2101      	movs	r1, #1
1a000548:	4b28      	ldr	r3, [pc, #160]	; (1a0005ec <LCD_Writ_Bus+0x234>)
1a00054a:	f993 0000 	ldrsb.w	r0, [r3]
1a00054e:	f002 fe03 	bl	1a003158 <gpioWrite>
1a000552:	e7a9      	b.n	1a0004a8 <LCD_Writ_Bus+0xf0>
		gpioWrite(D3, ON);
1a000554:	2101      	movs	r1, #1
1a000556:	4b26      	ldr	r3, [pc, #152]	; (1a0005f0 <LCD_Writ_Bus+0x238>)
1a000558:	f993 0000 	ldrsb.w	r0, [r3]
1a00055c:	f002 fdfc 	bl	1a003158 <gpioWrite>
1a000560:	e7a5      	b.n	1a0004ae <LCD_Writ_Bus+0xf6>
		gpioWrite(D4, ON);
1a000562:	2101      	movs	r1, #1
1a000564:	4b23      	ldr	r3, [pc, #140]	; (1a0005f4 <LCD_Writ_Bus+0x23c>)
1a000566:	f993 0000 	ldrsb.w	r0, [r3]
1a00056a:	f002 fdf5 	bl	1a003158 <gpioWrite>
1a00056e:	e7a1      	b.n	1a0004b4 <LCD_Writ_Bus+0xfc>
		gpioWrite(D5, ON);
1a000570:	2101      	movs	r1, #1
1a000572:	4b21      	ldr	r3, [pc, #132]	; (1a0005f8 <LCD_Writ_Bus+0x240>)
1a000574:	f993 0000 	ldrsb.w	r0, [r3]
1a000578:	f002 fdee 	bl	1a003158 <gpioWrite>
1a00057c:	e79d      	b.n	1a0004ba <LCD_Writ_Bus+0x102>
		gpioWrite(D7, ON);
1a00057e:	2101      	movs	r1, #1
1a000580:	4b1e      	ldr	r3, [pc, #120]	; (1a0005fc <LCD_Writ_Bus+0x244>)
1a000582:	f993 0000 	ldrsb.w	r0, [r3]
1a000586:	f002 fde7 	bl	1a003158 <gpioWrite>
1a00058a:	e799      	b.n	1a0004c0 <LCD_Writ_Bus+0x108>
		gpioWrite(D11, ON);
1a00058c:	2101      	movs	r1, #1
1a00058e:	4b1c      	ldr	r3, [pc, #112]	; (1a000600 <LCD_Writ_Bus+0x248>)
1a000590:	f993 0000 	ldrsb.w	r0, [r3]
1a000594:	f002 fde0 	bl	1a003158 <gpioWrite>
1a000598:	e795      	b.n	1a0004c6 <LCD_Writ_Bus+0x10e>
		gpioWrite(D12, ON);
1a00059a:	2101      	movs	r1, #1
1a00059c:	4b19      	ldr	r3, [pc, #100]	; (1a000604 <LCD_Writ_Bus+0x24c>)
1a00059e:	f993 0000 	ldrsb.w	r0, [r3]
1a0005a2:	f002 fdd9 	bl	1a003158 <gpioWrite>
1a0005a6:	e791      	b.n	1a0004cc <LCD_Writ_Bus+0x114>
		gpioWrite(D13, ON);
1a0005a8:	2101      	movs	r1, #1
1a0005aa:	4b17      	ldr	r3, [pc, #92]	; (1a000608 <LCD_Writ_Bus+0x250>)
1a0005ac:	f993 0000 	ldrsb.w	r0, [r3]
1a0005b0:	f002 fdd2 	bl	1a003158 <gpioWrite>
1a0005b4:	e78d      	b.n	1a0004d2 <LCD_Writ_Bus+0x11a>
		gpioWrite(D14, ON);
1a0005b6:	2101      	movs	r1, #1
1a0005b8:	4b14      	ldr	r3, [pc, #80]	; (1a00060c <LCD_Writ_Bus+0x254>)
1a0005ba:	f993 0000 	ldrsb.w	r0, [r3]
1a0005be:	f002 fdcb 	bl	1a003158 <gpioWrite>
1a0005c2:	e788      	b.n	1a0004d6 <LCD_Writ_Bus+0x11e>
		gpioWrite(D15, ON);
1a0005c4:	2101      	movs	r1, #1
1a0005c6:	4b12      	ldr	r3, [pc, #72]	; (1a000610 <LCD_Writ_Bus+0x258>)
1a0005c8:	f993 0000 	ldrsb.w	r0, [r3]
1a0005cc:	f002 fdc4 	bl	1a003158 <gpioWrite>
1a0005d0:	e783      	b.n	1a0004da <LCD_Writ_Bus+0x122>
1a0005d2:	bf00      	nop
1a0005d4:	10000d64 	.word	0x10000d64
1a0005d8:	10000ce8 	.word	0x10000ce8
1a0005dc:	10000d1c 	.word	0x10000d1c
1a0005e0:	10000d31 	.word	0x10000d31
1a0005e4:	10000cf5 	.word	0x10000cf5
1a0005e8:	10000d58 	.word	0x10000d58
1a0005ec:	10000d2b 	.word	0x10000d2b
1a0005f0:	10000cd8 	.word	0x10000cd8
1a0005f4:	10000d49 	.word	0x10000d49
1a0005f8:	10000d2a 	.word	0x10000d2a
1a0005fc:	10000d5b 	.word	0x10000d5b
1a000600:	10000d00 	.word	0x10000d00
1a000604:	10000d1e 	.word	0x10000d1e
1a000608:	10000d51 	.word	0x10000d51
1a00060c:	10000d50 	.word	0x10000d50
1a000610:	10000d52 	.word	0x10000d52
1a000614:	10000ce1 	.word	0x10000ce1

1a000618 <LCD_Write_DATA>:

void LCD_Write_DATA(char VL) {		//no lo uso es para otro modelo de display de 8bits
1a000618:	b510      	push	{r4, lr}
1a00061a:	4604      	mov	r4, r0
	//sbi(P_RS, B_RS); pone en 1 RS
	gpioWrite(RS, ON);
1a00061c:	2101      	movs	r1, #1
1a00061e:	4b06      	ldr	r3, [pc, #24]	; (1a000638 <LCD_Write_DATA+0x20>)
1a000620:	f993 0000 	ldrsb.w	r0, [r3]
1a000624:	f002 fd98 	bl	1a003158 <gpioWrite>
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111110111111) | 0b00000000000000000000000001000000; //PC6-RS
	LCD_Writ_Bus(0x00, VL, display_transfer_mode);
1a000628:	4b04      	ldr	r3, [pc, #16]	; (1a00063c <LCD_Write_DATA+0x24>)
1a00062a:	781a      	ldrb	r2, [r3, #0]
1a00062c:	4621      	mov	r1, r4
1a00062e:	2000      	movs	r0, #0
1a000630:	f7ff fec2 	bl	1a0003b8 <LCD_Writ_Bus>
}
1a000634:	bd10      	pop	{r4, pc}
1a000636:	bf00      	nop
1a000638:	10000d5c 	.word	0x10000d5c
1a00063c:	10000d04 	.word	0x10000d04

1a000640 <LCD_Write_COM>:

void LCD_Write_COM(char VL) {
1a000640:	b510      	push	{r4, lr}
1a000642:	4604      	mov	r4, r0
	//cbi(P_RS, B_RS); para poner a cero el pin RS
	gpioWrite(RS, OFF);
1a000644:	2100      	movs	r1, #0
1a000646:	4b06      	ldr	r3, [pc, #24]	; (1a000660 <LCD_Write_COM+0x20>)
1a000648:	f993 0000 	ldrsb.w	r0, [r3]
1a00064c:	f002 fd84 	bl	1a003158 <gpioWrite>
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111110111111) | 0b00000000000000000000000001000000; //PC6-RS
	LCD_Writ_Bus(0x00, VL, display_transfer_mode);
1a000650:	4b04      	ldr	r3, [pc, #16]	; (1a000664 <LCD_Write_COM+0x24>)
1a000652:	781a      	ldrb	r2, [r3, #0]
1a000654:	4621      	mov	r1, r4
1a000656:	2000      	movs	r0, #0
1a000658:	f7ff feae 	bl	1a0003b8 <LCD_Writ_Bus>
}
1a00065c:	bd10      	pop	{r4, pc}
1a00065e:	bf00      	nop
1a000660:	10000d5c 	.word	0x10000d5c
1a000664:	10000d04 	.word	0x10000d04

1a000668 <LCD_Write_DATAb>:

void LCD_Write_DATAb(char VH, char VL) {
1a000668:	b538      	push	{r3, r4, r5, lr}
1a00066a:	4604      	mov	r4, r0
1a00066c:	460d      	mov	r5, r1
	//sbi(P_RS, B_RS);
	gpioWrite(RS, ON);
1a00066e:	2101      	movs	r1, #1
1a000670:	4b05      	ldr	r3, [pc, #20]	; (1a000688 <LCD_Write_DATAb+0x20>)
1a000672:	f993 0000 	ldrsb.w	r0, [r3]
1a000676:	f002 fd6f 	bl	1a003158 <gpioWrite>
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111110111111) | 0b00000000000000000000000001000000; //PC6-RS
	LCD_Writ_Bus(VH, VL, display_transfer_mode);
1a00067a:	4b04      	ldr	r3, [pc, #16]	; (1a00068c <LCD_Write_DATAb+0x24>)
1a00067c:	781a      	ldrb	r2, [r3, #0]
1a00067e:	4629      	mov	r1, r5
1a000680:	4620      	mov	r0, r4
1a000682:	f7ff fe99 	bl	1a0003b8 <LCD_Writ_Bus>
}
1a000686:	bd38      	pop	{r3, r4, r5, pc}
1a000688:	10000d5c 	.word	0x10000d5c
1a00068c:	10000d04 	.word	0x10000d04

1a000690 <_fast_fill_16>:
		setXY(0, 0, disp_x_size, disp_y_size);
	else
		setXY(0, 0, disp_y_size, disp_x_size);
}

void _fast_fill_16(int ch, int cl, long pix) {
1a000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000692:	4604      	mov	r4, r0
1a000694:	460d      	mov	r5, r1
1a000696:	4616      	mov	r6, r2
	long blocks;

	//REG_PIOA_CODR=0x0000C080;  //pone en cero los pines seleccionados
	gpioWrite(D6, OFF);
1a000698:	2100      	movs	r1, #0
1a00069a:	4be0      	ldr	r3, [pc, #896]	; (1a000a1c <_fast_fill_16+0x38c>)
1a00069c:	f993 0000 	ldrsb.w	r0, [r3]
1a0006a0:	f002 fd5a 	bl	1a003158 <gpioWrite>
	gpioWrite(D9, OFF);
1a0006a4:	2100      	movs	r1, #0
1a0006a6:	4bde      	ldr	r3, [pc, #888]	; (1a000a20 <_fast_fill_16+0x390>)
1a0006a8:	f993 0000 	ldrsb.w	r0, [r3]
1a0006ac:	f002 fd54 	bl	1a003158 <gpioWrite>
	gpioWrite(D10, OFF);
1a0006b0:	2100      	movs	r1, #0
1a0006b2:	4bdc      	ldr	r3, [pc, #880]	; (1a000a24 <_fast_fill_16+0x394>)
1a0006b4:	f993 0000 	ldrsb.w	r0, [r3]
1a0006b8:	f002 fd4e 	bl	1a003158 <gpioWrite>
	//REG_PIOB_CODR=0x4000000;
	gpioWrite(D8, OFF);
1a0006bc:	2100      	movs	r1, #0
1a0006be:	4bda      	ldr	r3, [pc, #872]	; (1a000a28 <_fast_fill_16+0x398>)
1a0006c0:	f993 0000 	ldrsb.w	r0, [r3]
1a0006c4:	f002 fd48 	bl	1a003158 <gpioWrite>

	//REG_PIOC_CODR=0x0000003E;
	gpioWrite(D0, OFF);
1a0006c8:	2100      	movs	r1, #0
1a0006ca:	4bd8      	ldr	r3, [pc, #864]	; (1a000a2c <_fast_fill_16+0x39c>)
1a0006cc:	f993 0000 	ldrsb.w	r0, [r3]
1a0006d0:	f002 fd42 	bl	1a003158 <gpioWrite>
	gpioWrite(D1, OFF);
1a0006d4:	2100      	movs	r1, #0
1a0006d6:	4bd6      	ldr	r3, [pc, #856]	; (1a000a30 <_fast_fill_16+0x3a0>)
1a0006d8:	f993 0000 	ldrsb.w	r0, [r3]
1a0006dc:	f002 fd3c 	bl	1a003158 <gpioWrite>
	gpioWrite(D2, OFF);
1a0006e0:	2100      	movs	r1, #0
1a0006e2:	4bd4      	ldr	r3, [pc, #848]	; (1a000a34 <_fast_fill_16+0x3a4>)
1a0006e4:	f993 0000 	ldrsb.w	r0, [r3]
1a0006e8:	f002 fd36 	bl	1a003158 <gpioWrite>
	gpioWrite(D3, OFF);
1a0006ec:	2100      	movs	r1, #0
1a0006ee:	4bd2      	ldr	r3, [pc, #840]	; (1a000a38 <_fast_fill_16+0x3a8>)
1a0006f0:	f993 0000 	ldrsb.w	r0, [r3]
1a0006f4:	f002 fd30 	bl	1a003158 <gpioWrite>
	gpioWrite(D4, OFF);
1a0006f8:	2100      	movs	r1, #0
1a0006fa:	4bd0      	ldr	r3, [pc, #832]	; (1a000a3c <_fast_fill_16+0x3ac>)
1a0006fc:	f993 0000 	ldrsb.w	r0, [r3]
1a000700:	f002 fd2a 	bl	1a003158 <gpioWrite>
	//REG_PIOD_CODR=0x0000064F;
	gpioWrite(D5, OFF);
1a000704:	2100      	movs	r1, #0
1a000706:	4bce      	ldr	r3, [pc, #824]	; (1a000a40 <_fast_fill_16+0x3b0>)
1a000708:	f993 0000 	ldrsb.w	r0, [r3]
1a00070c:	f002 fd24 	bl	1a003158 <gpioWrite>
	gpioWrite(D7, OFF);
1a000710:	2100      	movs	r1, #0
1a000712:	4bcc      	ldr	r3, [pc, #816]	; (1a000a44 <_fast_fill_16+0x3b4>)
1a000714:	f993 0000 	ldrsb.w	r0, [r3]
1a000718:	f002 fd1e 	bl	1a003158 <gpioWrite>
	gpioWrite(D11, OFF);
1a00071c:	2100      	movs	r1, #0
1a00071e:	4bca      	ldr	r3, [pc, #808]	; (1a000a48 <_fast_fill_16+0x3b8>)
1a000720:	f993 0000 	ldrsb.w	r0, [r3]
1a000724:	f002 fd18 	bl	1a003158 <gpioWrite>
	gpioWrite(D12, OFF);
1a000728:	2100      	movs	r1, #0
1a00072a:	4bc8      	ldr	r3, [pc, #800]	; (1a000a4c <_fast_fill_16+0x3bc>)
1a00072c:	f993 0000 	ldrsb.w	r0, [r3]
1a000730:	f002 fd12 	bl	1a003158 <gpioWrite>
	gpioWrite(D13, OFF);
1a000734:	2100      	movs	r1, #0
1a000736:	4bc6      	ldr	r3, [pc, #792]	; (1a000a50 <_fast_fill_16+0x3c0>)
1a000738:	f993 0000 	ldrsb.w	r0, [r3]
1a00073c:	f002 fd0c 	bl	1a003158 <gpioWrite>
	gpioWrite(D14, OFF);
1a000740:	2100      	movs	r1, #0
1a000742:	4bc4      	ldr	r3, [pc, #784]	; (1a000a54 <_fast_fill_16+0x3c4>)
1a000744:	f993 0000 	ldrsb.w	r0, [r3]
1a000748:	f002 fd06 	bl	1a003158 <gpioWrite>
	gpioWrite(D15, OFF);
1a00074c:	2100      	movs	r1, #0
1a00074e:	4bc2      	ldr	r3, [pc, #776]	; (1a000a58 <_fast_fill_16+0x3c8>)
1a000750:	f993 0000 	ldrsb.w	r0, [r3]
1a000754:	f002 fd00 	bl	1a003158 <gpioWrite>

	//REG_PIOA_SODR=((VH & 0x06)<<13) | ((VL & 0x40)<<1);   //pone en 1 los bits seleccionados por puerto
	if ((cl & 0x040)) {
1a000758:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00075c:	f040 80e6 	bne.w	1a00092c <_fast_fill_16+0x29c>
		gpioWrite(D6, ON);
	}
	if ((ch & 0x02)) {
1a000760:	f014 0f02 	tst.w	r4, #2
1a000764:	f040 80e9 	bne.w	1a00093a <_fast_fill_16+0x2aa>
		gpioWrite(D9, ON);
	}
	if ((ch & 0x04)) {
1a000768:	f014 0704 	ands.w	r7, r4, #4
1a00076c:	f040 80ec 	bne.w	1a000948 <_fast_fill_16+0x2b8>
		gpioWrite(D10, ON);
	}
	//(VH & 0x01) ? REG_PIOB_SODR = 0x4000000 : REG_PIOB_CODR = 0x4000000;
	if ((ch & 0x01)) {
1a000770:	f014 0f01 	tst.w	r4, #1
1a000774:	f040 80ef 	bne.w	1a000956 <_fast_fill_16+0x2c6>
		gpioWrite(D8, ON);
	}

	//REG_PIOC_SODR=((VL & 0x01)<<5) | ((VL & 0x02)<<3) | ((VL & 0x04)<<1) | ((VL & 0x08)>>1) | ((VL & 0x10)>>3);
	if ((cl & 0x01)) {
1a000778:	f015 0f01 	tst.w	r5, #1
1a00077c:	f040 80f2 	bne.w	1a000964 <_fast_fill_16+0x2d4>
		gpioWrite(D0, ON);
	}
	if ((cl & 0x02)) {
1a000780:	f015 0f02 	tst.w	r5, #2
1a000784:	f040 80f5 	bne.w	1a000972 <_fast_fill_16+0x2e2>
		gpioWrite(D1, ON);
	}
	if ((cl & 0x04)) {
1a000788:	f015 0f04 	tst.w	r5, #4
1a00078c:	f040 80f8 	bne.w	1a000980 <_fast_fill_16+0x2f0>
		gpioWrite(D2, ON);
	}
	if ((cl & 0x08)) {
1a000790:	f015 0f08 	tst.w	r5, #8
1a000794:	f040 80fb 	bne.w	1a00098e <_fast_fill_16+0x2fe>
		gpioWrite(D3, ON);
	}
	if ((cl & 0x010)) {
1a000798:	f015 0f10 	tst.w	r5, #16
1a00079c:	f040 80fe 	bne.w	1a00099c <_fast_fill_16+0x30c>
		gpioWrite(D4, ON);
	}
	//REG_PIOD_SODR=((VH & 0x78)>>3) | ((VH & 0x80)>>1) | ((VL & 0x20)<<5) | ((VL & 0x80)<<2);
	if ((cl & 0x020)) {
1a0007a0:	f015 0f20 	tst.w	r5, #32
1a0007a4:	f040 8101 	bne.w	1a0009aa <_fast_fill_16+0x31a>
		gpioWrite(D5, ON);
	}
	if ((cl & 0x080)) {
1a0007a8:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0007ac:	f040 8104 	bne.w	1a0009b8 <_fast_fill_16+0x328>
		gpioWrite(D7, ON);
	}
	if ((ch & 0x08)) {
1a0007b0:	f014 0508 	ands.w	r5, r4, #8
1a0007b4:	f040 8107 	bne.w	1a0009c6 <_fast_fill_16+0x336>
		gpioWrite(D11, ON);
	}
	if ((ch & 0x010)) {
1a0007b8:	f014 0f10 	tst.w	r4, #16
1a0007bc:	f040 810a 	bne.w	1a0009d4 <_fast_fill_16+0x344>
		gpioWrite(D12, ON);
	}
	if ((ch & 0x020)) {
1a0007c0:	f014 0f20 	tst.w	r4, #32
1a0007c4:	f040 810d 	bne.w	1a0009e2 <_fast_fill_16+0x352>
		gpioWrite(D13, ON);
	}
	if ((ch & 0x04)) {
1a0007c8:	2f00      	cmp	r7, #0
1a0007ca:	f040 8111 	bne.w	1a0009f0 <_fast_fill_16+0x360>
		gpioWrite(D14, ON);
	}
	if ((ch & 0x08)) {
1a0007ce:	2d00      	cmp	r5, #0
1a0007d0:	f040 8115 	bne.w	1a0009fe <_fast_fill_16+0x36e>
		gpioWrite(D15, ON);
	}

	blocks = pix / 16;
1a0007d4:	4637      	mov	r7, r6
1a0007d6:	2e00      	cmp	r6, #0
1a0007d8:	f2c0 8118 	blt.w	1a000a0c <_fast_fill_16+0x37c>
1a0007dc:	113f      	asrs	r7, r7, #4
	for (int i = 0; i < blocks; i++) {
1a0007de:	2500      	movs	r5, #0
1a0007e0:	42bd      	cmp	r5, r7
1a0007e2:	f280 8116 	bge.w	1a000a12 <_fast_fill_16+0x382>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0007e6:	4c9d      	ldr	r4, [pc, #628]	; (1a000a5c <_fast_fill_16+0x3cc>)
1a0007e8:	2100      	movs	r1, #0
1a0007ea:	f994 0000 	ldrsb.w	r0, [r4]
1a0007ee:	f002 fcb3 	bl	1a003158 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0007f2:	2101      	movs	r1, #1
1a0007f4:	f994 0000 	ldrsb.w	r0, [r4]
1a0007f8:	f002 fcae 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0007fc:	2100      	movs	r1, #0
1a0007fe:	f994 0000 	ldrsb.w	r0, [r4]
1a000802:	f002 fca9 	bl	1a003158 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a000806:	2101      	movs	r1, #1
1a000808:	f994 0000 	ldrsb.w	r0, [r4]
1a00080c:	f002 fca4 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000810:	2100      	movs	r1, #0
1a000812:	f994 0000 	ldrsb.w	r0, [r4]
1a000816:	f002 fc9f 	bl	1a003158 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00081a:	2101      	movs	r1, #1
1a00081c:	f994 0000 	ldrsb.w	r0, [r4]
1a000820:	f002 fc9a 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000824:	2100      	movs	r1, #0
1a000826:	f994 0000 	ldrsb.w	r0, [r4]
1a00082a:	f002 fc95 	bl	1a003158 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00082e:	2101      	movs	r1, #1
1a000830:	f994 0000 	ldrsb.w	r0, [r4]
1a000834:	f002 fc90 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000838:	2100      	movs	r1, #0
1a00083a:	f994 0000 	ldrsb.w	r0, [r4]
1a00083e:	f002 fc8b 	bl	1a003158 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a000842:	2101      	movs	r1, #1
1a000844:	f994 0000 	ldrsb.w	r0, [r4]
1a000848:	f002 fc86 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a00084c:	2100      	movs	r1, #0
1a00084e:	f994 0000 	ldrsb.w	r0, [r4]
1a000852:	f002 fc81 	bl	1a003158 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a000856:	2101      	movs	r1, #1
1a000858:	f994 0000 	ldrsb.w	r0, [r4]
1a00085c:	f002 fc7c 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000860:	2100      	movs	r1, #0
1a000862:	f994 0000 	ldrsb.w	r0, [r4]
1a000866:	f002 fc77 	bl	1a003158 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00086a:	2101      	movs	r1, #1
1a00086c:	f994 0000 	ldrsb.w	r0, [r4]
1a000870:	f002 fc72 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000874:	2100      	movs	r1, #0
1a000876:	f994 0000 	ldrsb.w	r0, [r4]
1a00087a:	f002 fc6d 	bl	1a003158 <gpioWrite>
		// delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00087e:	2101      	movs	r1, #1
1a000880:	f994 0000 	ldrsb.w	r0, [r4]
1a000884:	f002 fc68 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000888:	2100      	movs	r1, #0
1a00088a:	f994 0000 	ldrsb.w	r0, [r4]
1a00088e:	f002 fc63 	bl	1a003158 <gpioWrite>
		// delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a000892:	2101      	movs	r1, #1
1a000894:	f994 0000 	ldrsb.w	r0, [r4]
1a000898:	f002 fc5e 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a00089c:	2100      	movs	r1, #0
1a00089e:	f994 0000 	ldrsb.w	r0, [r4]
1a0008a2:	f002 fc59 	bl	1a003158 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0008a6:	2101      	movs	r1, #1
1a0008a8:	f994 0000 	ldrsb.w	r0, [r4]
1a0008ac:	f002 fc54 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0008b0:	2100      	movs	r1, #0
1a0008b2:	f994 0000 	ldrsb.w	r0, [r4]
1a0008b6:	f002 fc4f 	bl	1a003158 <gpioWrite>
		// delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0008ba:	2101      	movs	r1, #1
1a0008bc:	f994 0000 	ldrsb.w	r0, [r4]
1a0008c0:	f002 fc4a 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0008c4:	2100      	movs	r1, #0
1a0008c6:	f994 0000 	ldrsb.w	r0, [r4]
1a0008ca:	f002 fc45 	bl	1a003158 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0008ce:	2101      	movs	r1, #1
1a0008d0:	f994 0000 	ldrsb.w	r0, [r4]
1a0008d4:	f002 fc40 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0008d8:	2100      	movs	r1, #0
1a0008da:	f994 0000 	ldrsb.w	r0, [r4]
1a0008de:	f002 fc3b 	bl	1a003158 <gpioWrite>
		// delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0008e2:	2101      	movs	r1, #1
1a0008e4:	f994 0000 	ldrsb.w	r0, [r4]
1a0008e8:	f002 fc36 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0008ec:	2100      	movs	r1, #0
1a0008ee:	f994 0000 	ldrsb.w	r0, [r4]
1a0008f2:	f002 fc31 	bl	1a003158 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0008f6:	2101      	movs	r1, #1
1a0008f8:	f994 0000 	ldrsb.w	r0, [r4]
1a0008fc:	f002 fc2c 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000900:	2100      	movs	r1, #0
1a000902:	f994 0000 	ldrsb.w	r0, [r4]
1a000906:	f002 fc27 	bl	1a003158 <gpioWrite>
		// delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00090a:	2101      	movs	r1, #1
1a00090c:	f994 0000 	ldrsb.w	r0, [r4]
1a000910:	f002 fc22 	bl	1a003158 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000914:	2100      	movs	r1, #0
1a000916:	f994 0000 	ldrsb.w	r0, [r4]
1a00091a:	f002 fc1d 	bl	1a003158 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00091e:	2101      	movs	r1, #1
1a000920:	f994 0000 	ldrsb.w	r0, [r4]
1a000924:	f002 fc18 	bl	1a003158 <gpioWrite>
	for (int i = 0; i < blocks; i++) {
1a000928:	3501      	adds	r5, #1
1a00092a:	e759      	b.n	1a0007e0 <_fast_fill_16+0x150>
		gpioWrite(D6, ON);
1a00092c:	2101      	movs	r1, #1
1a00092e:	4b3b      	ldr	r3, [pc, #236]	; (1a000a1c <_fast_fill_16+0x38c>)
1a000930:	f993 0000 	ldrsb.w	r0, [r3]
1a000934:	f002 fc10 	bl	1a003158 <gpioWrite>
1a000938:	e712      	b.n	1a000760 <_fast_fill_16+0xd0>
		gpioWrite(D9, ON);
1a00093a:	2101      	movs	r1, #1
1a00093c:	4b38      	ldr	r3, [pc, #224]	; (1a000a20 <_fast_fill_16+0x390>)
1a00093e:	f993 0000 	ldrsb.w	r0, [r3]
1a000942:	f002 fc09 	bl	1a003158 <gpioWrite>
1a000946:	e70f      	b.n	1a000768 <_fast_fill_16+0xd8>
		gpioWrite(D10, ON);
1a000948:	2101      	movs	r1, #1
1a00094a:	4b36      	ldr	r3, [pc, #216]	; (1a000a24 <_fast_fill_16+0x394>)
1a00094c:	f993 0000 	ldrsb.w	r0, [r3]
1a000950:	f002 fc02 	bl	1a003158 <gpioWrite>
1a000954:	e70c      	b.n	1a000770 <_fast_fill_16+0xe0>
		gpioWrite(D8, ON);
1a000956:	2101      	movs	r1, #1
1a000958:	4b33      	ldr	r3, [pc, #204]	; (1a000a28 <_fast_fill_16+0x398>)
1a00095a:	f993 0000 	ldrsb.w	r0, [r3]
1a00095e:	f002 fbfb 	bl	1a003158 <gpioWrite>
1a000962:	e709      	b.n	1a000778 <_fast_fill_16+0xe8>
		gpioWrite(D0, ON);
1a000964:	2101      	movs	r1, #1
1a000966:	4b31      	ldr	r3, [pc, #196]	; (1a000a2c <_fast_fill_16+0x39c>)
1a000968:	f993 0000 	ldrsb.w	r0, [r3]
1a00096c:	f002 fbf4 	bl	1a003158 <gpioWrite>
1a000970:	e706      	b.n	1a000780 <_fast_fill_16+0xf0>
		gpioWrite(D1, ON);
1a000972:	2101      	movs	r1, #1
1a000974:	4b2e      	ldr	r3, [pc, #184]	; (1a000a30 <_fast_fill_16+0x3a0>)
1a000976:	f993 0000 	ldrsb.w	r0, [r3]
1a00097a:	f002 fbed 	bl	1a003158 <gpioWrite>
1a00097e:	e703      	b.n	1a000788 <_fast_fill_16+0xf8>
		gpioWrite(D2, ON);
1a000980:	2101      	movs	r1, #1
1a000982:	4b2c      	ldr	r3, [pc, #176]	; (1a000a34 <_fast_fill_16+0x3a4>)
1a000984:	f993 0000 	ldrsb.w	r0, [r3]
1a000988:	f002 fbe6 	bl	1a003158 <gpioWrite>
1a00098c:	e700      	b.n	1a000790 <_fast_fill_16+0x100>
		gpioWrite(D3, ON);
1a00098e:	2101      	movs	r1, #1
1a000990:	4b29      	ldr	r3, [pc, #164]	; (1a000a38 <_fast_fill_16+0x3a8>)
1a000992:	f993 0000 	ldrsb.w	r0, [r3]
1a000996:	f002 fbdf 	bl	1a003158 <gpioWrite>
1a00099a:	e6fd      	b.n	1a000798 <_fast_fill_16+0x108>
		gpioWrite(D4, ON);
1a00099c:	2101      	movs	r1, #1
1a00099e:	4b27      	ldr	r3, [pc, #156]	; (1a000a3c <_fast_fill_16+0x3ac>)
1a0009a0:	f993 0000 	ldrsb.w	r0, [r3]
1a0009a4:	f002 fbd8 	bl	1a003158 <gpioWrite>
1a0009a8:	e6fa      	b.n	1a0007a0 <_fast_fill_16+0x110>
		gpioWrite(D5, ON);
1a0009aa:	2101      	movs	r1, #1
1a0009ac:	4b24      	ldr	r3, [pc, #144]	; (1a000a40 <_fast_fill_16+0x3b0>)
1a0009ae:	f993 0000 	ldrsb.w	r0, [r3]
1a0009b2:	f002 fbd1 	bl	1a003158 <gpioWrite>
1a0009b6:	e6f7      	b.n	1a0007a8 <_fast_fill_16+0x118>
		gpioWrite(D7, ON);
1a0009b8:	2101      	movs	r1, #1
1a0009ba:	4b22      	ldr	r3, [pc, #136]	; (1a000a44 <_fast_fill_16+0x3b4>)
1a0009bc:	f993 0000 	ldrsb.w	r0, [r3]
1a0009c0:	f002 fbca 	bl	1a003158 <gpioWrite>
1a0009c4:	e6f4      	b.n	1a0007b0 <_fast_fill_16+0x120>
		gpioWrite(D11, ON);
1a0009c6:	2101      	movs	r1, #1
1a0009c8:	4b1f      	ldr	r3, [pc, #124]	; (1a000a48 <_fast_fill_16+0x3b8>)
1a0009ca:	f993 0000 	ldrsb.w	r0, [r3]
1a0009ce:	f002 fbc3 	bl	1a003158 <gpioWrite>
1a0009d2:	e6f1      	b.n	1a0007b8 <_fast_fill_16+0x128>
		gpioWrite(D12, ON);
1a0009d4:	2101      	movs	r1, #1
1a0009d6:	4b1d      	ldr	r3, [pc, #116]	; (1a000a4c <_fast_fill_16+0x3bc>)
1a0009d8:	f993 0000 	ldrsb.w	r0, [r3]
1a0009dc:	f002 fbbc 	bl	1a003158 <gpioWrite>
1a0009e0:	e6ee      	b.n	1a0007c0 <_fast_fill_16+0x130>
		gpioWrite(D13, ON);
1a0009e2:	2101      	movs	r1, #1
1a0009e4:	4b1a      	ldr	r3, [pc, #104]	; (1a000a50 <_fast_fill_16+0x3c0>)
1a0009e6:	f993 0000 	ldrsb.w	r0, [r3]
1a0009ea:	f002 fbb5 	bl	1a003158 <gpioWrite>
1a0009ee:	e6eb      	b.n	1a0007c8 <_fast_fill_16+0x138>
		gpioWrite(D14, ON);
1a0009f0:	2101      	movs	r1, #1
1a0009f2:	4b18      	ldr	r3, [pc, #96]	; (1a000a54 <_fast_fill_16+0x3c4>)
1a0009f4:	f993 0000 	ldrsb.w	r0, [r3]
1a0009f8:	f002 fbae 	bl	1a003158 <gpioWrite>
1a0009fc:	e6e7      	b.n	1a0007ce <_fast_fill_16+0x13e>
		gpioWrite(D15, ON);
1a0009fe:	2101      	movs	r1, #1
1a000a00:	4b15      	ldr	r3, [pc, #84]	; (1a000a58 <_fast_fill_16+0x3c8>)
1a000a02:	f993 0000 	ldrsb.w	r0, [r3]
1a000a06:	f002 fba7 	bl	1a003158 <gpioWrite>
1a000a0a:	e6e3      	b.n	1a0007d4 <_fast_fill_16+0x144>
	blocks = pix / 16;
1a000a0c:	f106 070f 	add.w	r7, r6, #15
1a000a10:	e6e4      	b.n	1a0007dc <_fast_fill_16+0x14c>
	}
	if ((pix % 16) != 0)
1a000a12:	f016 0f0f 	tst.w	r6, #15
1a000a16:	d139      	bne.n	1a000a8c <_fast_fill_16+0x3fc>
			//delayMicroseconds(1); //retardo minimo de 12nseg
			//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
			gpioWrite(WR, ON);

		}
}
1a000a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000a1a:	bf00      	nop
1a000a1c:	10000d64 	.word	0x10000d64
1a000a20:	10000ce8 	.word	0x10000ce8
1a000a24:	10000d1c 	.word	0x10000d1c
1a000a28:	10000d31 	.word	0x10000d31
1a000a2c:	10000cf5 	.word	0x10000cf5
1a000a30:	10000d58 	.word	0x10000d58
1a000a34:	10000d2b 	.word	0x10000d2b
1a000a38:	10000cd8 	.word	0x10000cd8
1a000a3c:	10000d49 	.word	0x10000d49
1a000a40:	10000d2a 	.word	0x10000d2a
1a000a44:	10000d5b 	.word	0x10000d5b
1a000a48:	10000d00 	.word	0x10000d00
1a000a4c:	10000d1e 	.word	0x10000d1e
1a000a50:	10000d51 	.word	0x10000d51
1a000a54:	10000d50 	.word	0x10000d50
1a000a58:	10000d52 	.word	0x10000d52
1a000a5c:	10000ce1 	.word	0x10000ce1
			gpioWrite(WR, OFF);
1a000a60:	4d0b      	ldr	r5, [pc, #44]	; (1a000a90 <_fast_fill_16+0x400>)
1a000a62:	2100      	movs	r1, #0
1a000a64:	f995 0000 	ldrsb.w	r0, [r5]
1a000a68:	f002 fb76 	bl	1a003158 <gpioWrite>
			gpioWrite(WR, ON);
1a000a6c:	2101      	movs	r1, #1
1a000a6e:	f995 0000 	ldrsb.w	r0, [r5]
1a000a72:	f002 fb71 	bl	1a003158 <gpioWrite>
		for (int i = 0; i < (pix % 16) + 1; i++) {
1a000a76:	3401      	adds	r4, #1
1a000a78:	4272      	negs	r2, r6
1a000a7a:	f006 030f 	and.w	r3, r6, #15
1a000a7e:	f002 020f 	and.w	r2, r2, #15
1a000a82:	bf58      	it	pl
1a000a84:	4253      	negpl	r3, r2
1a000a86:	42a3      	cmp	r3, r4
1a000a88:	daea      	bge.n	1a000a60 <_fast_fill_16+0x3d0>
1a000a8a:	e7c5      	b.n	1a000a18 <_fast_fill_16+0x388>
1a000a8c:	2400      	movs	r4, #0
1a000a8e:	e7f3      	b.n	1a000a78 <_fast_fill_16+0x3e8>
1a000a90:	10000ce1 	.word	0x10000ce1

1a000a94 <setXY>:

void setXY(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2) {
1a000a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000a96:	4605      	mov	r5, r0
1a000a98:	460f      	mov	r7, r1
1a000a9a:	4614      	mov	r4, r2
1a000a9c:	461e      	mov	r6, r3
	if (orient == LANDSCAPE) {
1a000a9e:	4b1a      	ldr	r3, [pc, #104]	; (1a000b08 <setXY+0x74>)
1a000aa0:	781a      	ldrb	r2, [r3, #0]
1a000aa2:	4b1a      	ldr	r3, [pc, #104]	; (1a000b0c <setXY+0x78>)
1a000aa4:	781b      	ldrb	r3, [r3, #0]
1a000aa6:	429a      	cmp	r2, r3
1a000aa8:	d025      	beq.n	1a000af6 <setXY+0x62>
		y2 = disp_y_size - y2;
		swap(uint32_t, y1, y2)
	}
	swap(uint32_t, x1, y1);
	swap(uint32_t, x2, y2);
	LCD_Write_COM(0x2a);		//habilita las direccion de las columnas
1a000aaa:	202a      	movs	r0, #42	; 0x2a
1a000aac:	f7ff fdc8 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(x1 >> 8);
1a000ab0:	f3c7 2007 	ubfx	r0, r7, #8, #8
1a000ab4:	f7ff fdb0 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(x1);
1a000ab8:	b2f8      	uxtb	r0, r7
1a000aba:	f7ff fdad 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(x2 >> 8);
1a000abe:	f3c6 2007 	ubfx	r0, r6, #8, #8
1a000ac2:	f7ff fda9 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(x2);
1a000ac6:	b2f0      	uxtb	r0, r6
1a000ac8:	f7ff fda6 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_COM(0x2b);		//setea la direccion de pagina, filas
1a000acc:	202b      	movs	r0, #43	; 0x2b
1a000ace:	f7ff fdb7 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(y1 >> 8);
1a000ad2:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a000ad6:	f7ff fd9f 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(y1);
1a000ada:	b2e8      	uxtb	r0, r5
1a000adc:	f7ff fd9c 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(y2 >> 8);
1a000ae0:	f3c4 2007 	ubfx	r0, r4, #8, #8
1a000ae4:	f7ff fd98 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(y2);
1a000ae8:	b2e0      	uxtb	r0, r4
1a000aea:	f7ff fd95 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_COM(0x2c);		//inicio de escritura de memoria
1a000aee:	202c      	movs	r0, #44	; 0x2c
1a000af0:	f7ff fda6 	bl	1a000640 <LCD_Write_COM>
							/*Transfer image information from the host processor interface
							to the SSD1963 starting at the location provided by
							set_column_address and set_page_address*/
}
1a000af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		y1=disp_y_size-y1;
1a000af6:	4b06      	ldr	r3, [pc, #24]	; (1a000b10 <setXY+0x7c>)
1a000af8:	681b      	ldr	r3, [r3, #0]
		y2 = disp_y_size - y2;
1a000afa:	1b1a      	subs	r2, r3, r4
		swap(uint32_t, x2, y2)
1a000afc:	4634      	mov	r4, r6
		swap(uint32_t, y1, y2)
1a000afe:	1a1e      	subs	r6, r3, r0
		swap(uint32_t, x1, y1);
1a000b00:	460d      	mov	r5, r1
		swap(uint32_t, y1, y2)
1a000b02:	4617      	mov	r7, r2
1a000b04:	e7d1      	b.n	1a000aaa <setXY+0x16>
1a000b06:	bf00      	nop
1a000b08:	10000bf8 	.word	0x10000bf8
1a000b0c:	10000be8 	.word	0x10000be8
1a000b10:	10000ce4 	.word	0x10000ce4

1a000b14 <clrXY>:
void clrXY(void) {
1a000b14:	b508      	push	{r3, lr}
	if (orient == PORTRAIT)
1a000b16:	4b0c      	ldr	r3, [pc, #48]	; (1a000b48 <clrXY+0x34>)
1a000b18:	781a      	ldrb	r2, [r3, #0]
1a000b1a:	4b0c      	ldr	r3, [pc, #48]	; (1a000b4c <clrXY+0x38>)
1a000b1c:	781b      	ldrb	r3, [r3, #0]
1a000b1e:	429a      	cmp	r2, r3
1a000b20:	d008      	beq.n	1a000b34 <clrXY+0x20>
		setXY(0, 0, disp_y_size, disp_x_size);
1a000b22:	4b0b      	ldr	r3, [pc, #44]	; (1a000b50 <clrXY+0x3c>)
1a000b24:	681b      	ldr	r3, [r3, #0]
1a000b26:	4a0b      	ldr	r2, [pc, #44]	; (1a000b54 <clrXY+0x40>)
1a000b28:	6812      	ldr	r2, [r2, #0]
1a000b2a:	2100      	movs	r1, #0
1a000b2c:	4608      	mov	r0, r1
1a000b2e:	f7ff ffb1 	bl	1a000a94 <setXY>
}
1a000b32:	bd08      	pop	{r3, pc}
		setXY(0, 0, disp_x_size, disp_y_size);
1a000b34:	4b07      	ldr	r3, [pc, #28]	; (1a000b54 <clrXY+0x40>)
1a000b36:	681b      	ldr	r3, [r3, #0]
1a000b38:	4a05      	ldr	r2, [pc, #20]	; (1a000b50 <clrXY+0x3c>)
1a000b3a:	6812      	ldr	r2, [r2, #0]
1a000b3c:	2100      	movs	r1, #0
1a000b3e:	4608      	mov	r0, r1
1a000b40:	f7ff ffa8 	bl	1a000a94 <setXY>
1a000b44:	e7f5      	b.n	1a000b32 <clrXY+0x1e>
1a000b46:	bf00      	nop
1a000b48:	10000bf8 	.word	0x10000bf8
1a000b4c:	10000ca8 	.word	0x10000ca8
1a000b50:	10000d60 	.word	0x10000d60
1a000b54:	10000ce4 	.word	0x10000ce4

1a000b58 <clrScr>:
void clrScr(void) {
1a000b58:	b510      	push	{r4, lr}
	gpioWrite(CS, OFF);
1a000b5a:	2100      	movs	r1, #0
1a000b5c:	4b25      	ldr	r3, [pc, #148]	; (1a000bf4 <clrScr+0x9c>)
1a000b5e:	f993 0000 	ldrsb.w	r0, [r3]
1a000b62:	f002 faf9 	bl	1a003158 <gpioWrite>
	clrXY();
1a000b66:	f7ff ffd5 	bl	1a000b14 <clrXY>
	if (display_transfer_mode != 1)
1a000b6a:	4b23      	ldr	r3, [pc, #140]	; (1a000bf8 <clrScr+0xa0>)
1a000b6c:	681b      	ldr	r3, [r3, #0]
1a000b6e:	2b01      	cmp	r3, #1
1a000b70:	d105      	bne.n	1a000b7e <clrScr+0x26>
	if (display_transfer_mode == 16)
1a000b72:	4b21      	ldr	r3, [pc, #132]	; (1a000bf8 <clrScr+0xa0>)
1a000b74:	681b      	ldr	r3, [r3, #0]
1a000b76:	2b10      	cmp	r3, #16
1a000b78:	d008      	beq.n	1a000b8c <clrScr+0x34>
		for (i = 0; i < ((disp_x_size + 1) * (disp_y_size + 1)); i++) {
1a000b7a:	2400      	movs	r4, #0
1a000b7c:	e020      	b.n	1a000bc0 <clrScr+0x68>
		gpioWrite(RS, ON);
1a000b7e:	2101      	movs	r1, #1
1a000b80:	4b1e      	ldr	r3, [pc, #120]	; (1a000bfc <clrScr+0xa4>)
1a000b82:	f993 0000 	ldrsb.w	r0, [r3]
1a000b86:	f002 fae7 	bl	1a003158 <gpioWrite>
1a000b8a:	e7f2      	b.n	1a000b72 <clrScr+0x1a>
		_fast_fill_16(0, 0, ((disp_x_size + 1) * (disp_y_size + 1)));
1a000b8c:	4b1c      	ldr	r3, [pc, #112]	; (1a000c00 <clrScr+0xa8>)
1a000b8e:	681b      	ldr	r3, [r3, #0]
1a000b90:	4a1c      	ldr	r2, [pc, #112]	; (1a000c04 <clrScr+0xac>)
1a000b92:	6812      	ldr	r2, [r2, #0]
1a000b94:	3201      	adds	r2, #1
1a000b96:	fb03 2202 	mla	r2, r3, r2, r2
1a000b9a:	2100      	movs	r1, #0
1a000b9c:	4608      	mov	r0, r1
1a000b9e:	f7ff fd77 	bl	1a000690 <_fast_fill_16>
	gpioWrite(CS, ON);
1a000ba2:	2101      	movs	r1, #1
1a000ba4:	4b13      	ldr	r3, [pc, #76]	; (1a000bf4 <clrScr+0x9c>)
1a000ba6:	f993 0000 	ldrsb.w	r0, [r3]
1a000baa:	f002 fad5 	bl	1a003158 <gpioWrite>
	clrXY();
1a000bae:	f7ff ffb1 	bl	1a000b14 <clrXY>
}
1a000bb2:	bd10      	pop	{r4, pc}
				LCD_Writ_Bus(0, 0, display_transfer_mode);
1a000bb4:	b2d2      	uxtb	r2, r2
1a000bb6:	2100      	movs	r1, #0
1a000bb8:	4608      	mov	r0, r1
1a000bba:	f7ff fbfd 	bl	1a0003b8 <LCD_Writ_Bus>
		for (i = 0; i < ((disp_x_size + 1) * (disp_y_size + 1)); i++) {
1a000bbe:	3401      	adds	r4, #1
1a000bc0:	4b0f      	ldr	r3, [pc, #60]	; (1a000c00 <clrScr+0xa8>)
1a000bc2:	681a      	ldr	r2, [r3, #0]
1a000bc4:	4b0f      	ldr	r3, [pc, #60]	; (1a000c04 <clrScr+0xac>)
1a000bc6:	681b      	ldr	r3, [r3, #0]
1a000bc8:	3301      	adds	r3, #1
1a000bca:	fb02 3303 	mla	r3, r2, r3, r3
1a000bce:	42a3      	cmp	r3, r4
1a000bd0:	dde7      	ble.n	1a000ba2 <clrScr+0x4a>
			if (display_transfer_mode != 1)
1a000bd2:	4b09      	ldr	r3, [pc, #36]	; (1a000bf8 <clrScr+0xa0>)
1a000bd4:	681a      	ldr	r2, [r3, #0]
1a000bd6:	2a01      	cmp	r2, #1
1a000bd8:	d1ec      	bne.n	1a000bb4 <clrScr+0x5c>
				LCD_Writ_Bus(1, 0, display_transfer_mode);
1a000bda:	b2d2      	uxtb	r2, r2
1a000bdc:	2100      	movs	r1, #0
1a000bde:	2001      	movs	r0, #1
1a000be0:	f7ff fbea 	bl	1a0003b8 <LCD_Writ_Bus>
				LCD_Writ_Bus(1, 0, display_transfer_mode);
1a000be4:	4b04      	ldr	r3, [pc, #16]	; (1a000bf8 <clrScr+0xa0>)
1a000be6:	781a      	ldrb	r2, [r3, #0]
1a000be8:	2100      	movs	r1, #0
1a000bea:	2001      	movs	r0, #1
1a000bec:	f7ff fbe4 	bl	1a0003b8 <LCD_Writ_Bus>
1a000bf0:	e7e5      	b.n	1a000bbe <clrScr+0x66>
1a000bf2:	bf00      	nop
1a000bf4:	10000d5d 	.word	0x10000d5d
1a000bf8:	10000d04 	.word	0x10000d04
1a000bfc:	10000d5c 	.word	0x10000d5c
1a000c00:	10000d60 	.word	0x10000d60
1a000c04:	10000ce4 	.word	0x10000ce4

1a000c08 <setFont>:

//para establecer el tipo de letra
void setFont(uint8_t* font) {
cfont.font = font;
1a000c08:	4b05      	ldr	r3, [pc, #20]	; (1a000c20 <setFont+0x18>)
1a000c0a:	6018      	str	r0, [r3, #0]
cfont.x_size = fontbyte(0);
1a000c0c:	7802      	ldrb	r2, [r0, #0]
1a000c0e:	711a      	strb	r2, [r3, #4]
cfont.y_size = fontbyte(1);
1a000c10:	7842      	ldrb	r2, [r0, #1]
1a000c12:	715a      	strb	r2, [r3, #5]
cfont.offset = fontbyte(2);
1a000c14:	7882      	ldrb	r2, [r0, #2]
1a000c16:	719a      	strb	r2, [r3, #6]
cfont.numchars = fontbyte(3);
1a000c18:	78c2      	ldrb	r2, [r0, #3]
1a000c1a:	71da      	strb	r2, [r3, #7]
}
1a000c1c:	4770      	bx	lr
1a000c1e:	bf00      	nop
1a000c20:	10000d3c 	.word	0x10000d3c

1a000c24 <initlcd>:
	setBackColorb(0, 0, 0);
	cfont.font = 0;
	_transparent = false;
}

void initlcd(void) {
1a000c24:	b508      	push	{r3, lr}
	LCD_Write_COM(0xE2);    //PLL multiplier, set PLL clock to 120M
1a000c26:	20e2      	movs	r0, #226	; 0xe2
1a000c28:	f7ff fd0a 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x23);     //N=0x36 for 6.5M, 0x23 for 10M crystal
1a000c2c:	2023      	movs	r0, #35	; 0x23
1a000c2e:	f7ff fcf3 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x02);   //frecuencia pll a 120mhz
1a000c32:	2002      	movs	r0, #2
1a000c34:	f7ff fcf0 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x04);
1a000c38:	2004      	movs	r0, #4
1a000c3a:	f7ff fced 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_COM(0xE0);    // PLL enable
1a000c3e:	20e0      	movs	r0, #224	; 0xe0
1a000c40:	f7ff fcfe 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x01);
1a000c44:	2001      	movs	r0, #1
1a000c46:	f7ff fce7 	bl	1a000618 <LCD_Write_DATA>
	delay(1);
1a000c4a:	2001      	movs	r0, #1
1a000c4c:	2100      	movs	r1, #0
1a000c4e:	f002 fb01 	bl	1a003254 <delay>
	//delay(10);
	LCD_Write_COM(0xE0);
1a000c52:	20e0      	movs	r0, #224	; 0xe0
1a000c54:	f7ff fcf4 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x03);
1a000c58:	2003      	movs	r0, #3
1a000c5a:	f7ff fcdd 	bl	1a000618 <LCD_Write_DATA>
	delay(1);
1a000c5e:	2001      	movs	r0, #1
1a000c60:	2100      	movs	r1, #0
1a000c62:	f002 faf7 	bl	1a003254 <delay>
	//delay_us(100);
	LCD_Write_COM(0x01);    // software reset
1a000c66:	2001      	movs	r0, #1
1a000c68:	f7ff fcea 	bl	1a000640 <LCD_Write_COM>
	delay(5);
1a000c6c:	2005      	movs	r0, #5
1a000c6e:	2100      	movs	r1, #0
1a000c70:	f002 faf0 	bl	1a003254 <delay>
	//delay_us(500);
	LCD_Write_COM(0xE6);    //PLL setting for PCLK, depends on resolution
1a000c74:	20e6      	movs	r0, #230	; 0xe6
1a000c76:	f7ff fce3 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x04);   //para 3.43mhz de clock
1a000c7a:	2004      	movs	r0, #4
1a000c7c:	f7ff fccc 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x93);
1a000c80:	2093      	movs	r0, #147	; 0x93
1a000c82:	f7ff fcc9 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0xE0);
1a000c86:	20e0      	movs	r0, #224	; 0xe0
1a000c88:	f7ff fcc6 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xB0);    //LCD SPECIFICATION
1a000c8c:	20b0      	movs	r0, #176	; 0xb0
1a000c8e:	f7ff fcd7 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x00); // 0x24
1a000c92:	2000      	movs	r0, #0
1a000c94:	f7ff fcc0 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);
1a000c98:	2000      	movs	r0, #0
1a000c9a:	f7ff fcbd 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x03);   //Set HDP 799
1a000c9e:	2003      	movs	r0, #3
1a000ca0:	f7ff fcba 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x1F);
1a000ca4:	201f      	movs	r0, #31
1a000ca6:	f7ff fcb7 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x01);   //Set VDP 479
1a000caa:	2001      	movs	r0, #1
1a000cac:	f7ff fcb4 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0xDF);
1a000cb0:	20df      	movs	r0, #223	; 0xdf
1a000cb2:	f7ff fcb1 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);
1a000cb6:	2000      	movs	r0, #0
1a000cb8:	f7ff fcae 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xB4);    //HSYNC
1a000cbc:	20b4      	movs	r0, #180	; 0xb4
1a000cbe:	f7ff fcbf 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x03);   //Set HT  928
1a000cc2:	2003      	movs	r0, #3
1a000cc4:	f7ff fca8 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0xA0);
1a000cc8:	20a0      	movs	r0, #160	; 0xa0
1a000cca:	f7ff fca5 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);   //Set HPS 46
1a000cce:	2000      	movs	r0, #0
1a000cd0:	f7ff fca2 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x2E);
1a000cd4:	202e      	movs	r0, #46	; 0x2e
1a000cd6:	f7ff fc9f 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x30);   //Set HPW 48
1a000cda:	2030      	movs	r0, #48	; 0x30
1a000cdc:	f7ff fc9c 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);   //Set LPS 15
1a000ce0:	2000      	movs	r0, #0
1a000ce2:	f7ff fc99 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x0F);
1a000ce6:	200f      	movs	r0, #15
1a000ce8:	f7ff fc96 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);
1a000cec:	2000      	movs	r0, #0
1a000cee:	f7ff fc93 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xB6);    //VSYNC
1a000cf2:	20b6      	movs	r0, #182	; 0xb6
1a000cf4:	f7ff fca4 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x02);   //Set VT  525
1a000cf8:	2002      	movs	r0, #2
1a000cfa:	f7ff fc8d 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x0D);
1a000cfe:	200d      	movs	r0, #13
1a000d00:	f7ff fc8a 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);   //Set VPS 16
1a000d04:	2000      	movs	r0, #0
1a000d06:	f7ff fc87 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x10);
1a000d0a:	2010      	movs	r0, #16
1a000d0c:	f7ff fc84 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x10);   //Set VPW 16
1a000d10:	2010      	movs	r0, #16
1a000d12:	f7ff fc81 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);   //Set FPS 8
1a000d16:	2000      	movs	r0, #0
1a000d18:	f7ff fc7e 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x08);
1a000d1c:	2008      	movs	r0, #8
1a000d1e:	f7ff fc7b 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xBA);
1a000d22:	20ba      	movs	r0, #186	; 0xba
1a000d24:	f7ff fc8c 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x05);   //GPIO[3:0] out 1
1a000d28:	2005      	movs	r0, #5
1a000d2a:	f7ff fc75 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xB8);
1a000d2e:	20b8      	movs	r0, #184	; 0xb8
1a000d30:	f7ff fc86 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x07);     //GPIO3=input, GPIO[2:0]=output
1a000d34:	2007      	movs	r0, #7
1a000d36:	f7ff fc6f 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x01);   //GPIO0 normal
1a000d3a:	2001      	movs	r0, #1
1a000d3c:	f7ff fc6c 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0x36);    //rotation
1a000d40:	2036      	movs	r0, #54	; 0x36
1a000d42:	f7ff fc7d 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x22);   // -- Set to 0x21 to rotate 180 degrees
1a000d46:	2022      	movs	r0, #34	; 0x22
1a000d48:	f7ff fc66 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xF0);    //pixel data interface
1a000d4c:	20f0      	movs	r0, #240	; 0xf0
1a000d4e:	f7ff fc77 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x03);
1a000d52:	2003      	movs	r0, #3
1a000d54:	f7ff fc60 	bl	1a000618 <LCD_Write_DATA>

	delay(1);
1a000d58:	2001      	movs	r0, #1
1a000d5a:	2100      	movs	r1, #0
1a000d5c:	f002 fa7a 	bl	1a003254 <delay>
	//delay_us(100);

	setXY(0, 0, 799, 479);
1a000d60:	f240 13df 	movw	r3, #479	; 0x1df
1a000d64:	f240 321f 	movw	r2, #799	; 0x31f
1a000d68:	2100      	movs	r1, #0
1a000d6a:	4608      	mov	r0, r1
1a000d6c:	f7ff fe92 	bl	1a000a94 <setXY>
	LCD_Write_COM(0x29);    //display on
1a000d70:	2029      	movs	r0, #41	; 0x29
1a000d72:	f7ff fc65 	bl	1a000640 <LCD_Write_COM>

	LCD_Write_COM(0xBE);    //set PWM for B/L
1a000d76:	20be      	movs	r0, #190	; 0xbe
1a000d78:	f7ff fc62 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x06);
1a000d7c:	2006      	movs	r0, #6
1a000d7e:	f7ff fc4b 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0xF0);
1a000d82:	20f0      	movs	r0, #240	; 0xf0
1a000d84:	f7ff fc48 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x01);
1a000d88:	2001      	movs	r0, #1
1a000d8a:	f7ff fc45 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0xF0);
1a000d8e:	20f0      	movs	r0, #240	; 0xf0
1a000d90:	f7ff fc42 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);
1a000d94:	2000      	movs	r0, #0
1a000d96:	f7ff fc3f 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);
1a000d9a:	2000      	movs	r0, #0
1a000d9c:	f7ff fc3c 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xD0);
1a000da0:	20d0      	movs	r0, #208	; 0xd0
1a000da2:	f7ff fc4d 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x0D);
1a000da6:	200d      	movs	r0, #13
1a000da8:	f7ff fc36 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0x2C);
1a000dac:	202c      	movs	r0, #44	; 0x2c
1a000dae:	f7ff fc47 	bl	1a000640 <LCD_Write_COM>

}
1a000db2:	bd08      	pop	{r3, pc}

1a000db4 <setColorb>:
 */

#ifndef LCDFGRAFICOS_H_
#define LCDFGRAFICOS_H_
void setColorb(uint8_t r, uint8_t g, uint8_t b) {
	fch = ((r & 248) | g >> 5);
1a000db4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
1a000db8:	b240      	sxtb	r0, r0
1a000dba:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
1a000dbe:	4b05      	ldr	r3, [pc, #20]	; (1a000dd4 <setColorb+0x20>)
1a000dc0:	7018      	strb	r0, [r3, #0]
	fcl = ((g & 28) << 3 | b >> 3);
1a000dc2:	00c9      	lsls	r1, r1, #3
1a000dc4:	f021 011f 	bic.w	r1, r1, #31
1a000dc8:	b249      	sxtb	r1, r1
1a000dca:	ea41 02d2 	orr.w	r2, r1, r2, lsr #3
1a000dce:	4b02      	ldr	r3, [pc, #8]	; (1a000dd8 <setColorb+0x24>)
1a000dd0:	701a      	strb	r2, [r3, #0]
}
1a000dd2:	4770      	bx	lr
1a000dd4:	10000cd9 	.word	0x10000cd9
1a000dd8:	10000ce0 	.word	0x10000ce0

1a000ddc <setColor>:

void setColor(int color) {
	//fch=Byte(color>>8);
	//fcl=Byte(color & 0xFF);
	fch = (color >> 8);
1a000ddc:	1202      	asrs	r2, r0, #8
1a000dde:	4b02      	ldr	r3, [pc, #8]	; (1a000de8 <setColor+0xc>)
1a000de0:	701a      	strb	r2, [r3, #0]
	fcl = (color & 0xFF);
1a000de2:	4b02      	ldr	r3, [pc, #8]	; (1a000dec <setColor+0x10>)
1a000de4:	7018      	strb	r0, [r3, #0]
}
1a000de6:	4770      	bx	lr
1a000de8:	10000cd9 	.word	0x10000cd9
1a000dec:	10000ce0 	.word	0x10000ce0

1a000df0 <setBackColorb>:

void setBackColorb(uint8_t r, uint8_t g, uint8_t b) {
	bch = ((r & 248) | g >> 5);
1a000df0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
1a000df4:	b240      	sxtb	r0, r0
1a000df6:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
1a000dfa:	4b07      	ldr	r3, [pc, #28]	; (1a000e18 <setBackColorb+0x28>)
1a000dfc:	7018      	strb	r0, [r3, #0]
	bcl = ((g & 28) << 3 | b >> 3);
1a000dfe:	00c9      	lsls	r1, r1, #3
1a000e00:	f021 011f 	bic.w	r1, r1, #31
1a000e04:	b249      	sxtb	r1, r1
1a000e06:	ea41 02d2 	orr.w	r2, r1, r2, lsr #3
1a000e0a:	4b04      	ldr	r3, [pc, #16]	; (1a000e1c <setBackColorb+0x2c>)
1a000e0c:	701a      	strb	r2, [r3, #0]
	_transparent = false;
1a000e0e:	4b04      	ldr	r3, [pc, #16]	; (1a000e20 <setBackColorb+0x30>)
1a000e10:	2200      	movs	r2, #0
1a000e12:	701a      	strb	r2, [r3, #0]
}
1a000e14:	4770      	bx	lr
1a000e16:	bf00      	nop
1a000e18:	10000d28 	.word	0x10000d28
1a000e1c:	10000d1d 	.word	0x10000d1d
1a000e20:	10000d29 	.word	0x10000d29

1a000e24 <inicioLCD>:
void inicioLCD(uint8_t orientation) {
1a000e24:	b510      	push	{r4, lr}
	orient = orientation;
1a000e26:	4b1d      	ldr	r3, [pc, #116]	; (1a000e9c <inicioLCD+0x78>)
1a000e28:	7018      	strb	r0, [r3, #0]
	gpioWrite(REST, ON);
1a000e2a:	4c1d      	ldr	r4, [pc, #116]	; (1a000ea0 <inicioLCD+0x7c>)
1a000e2c:	2101      	movs	r1, #1
1a000e2e:	f994 0000 	ldrsb.w	r0, [r4]
1a000e32:	f002 f991 	bl	1a003158 <gpioWrite>
	delay(1);
1a000e36:	2001      	movs	r0, #1
1a000e38:	2100      	movs	r1, #0
1a000e3a:	f002 fa0b 	bl	1a003254 <delay>
	gpioWrite(REST, OFF);
1a000e3e:	2100      	movs	r1, #0
1a000e40:	f994 0000 	ldrsb.w	r0, [r4]
1a000e44:	f002 f988 	bl	1a003158 <gpioWrite>
	delay(1);
1a000e48:	2001      	movs	r0, #1
1a000e4a:	2100      	movs	r1, #0
1a000e4c:	f002 fa02 	bl	1a003254 <delay>
	gpioWrite(REST, ON);
1a000e50:	2101      	movs	r1, #1
1a000e52:	f994 0000 	ldrsb.w	r0, [r4]
1a000e56:	f002 f97f 	bl	1a003158 <gpioWrite>
	delay(1);
1a000e5a:	2001      	movs	r0, #1
1a000e5c:	2100      	movs	r1, #0
1a000e5e:	f002 f9f9 	bl	1a003254 <delay>
	gpioWrite(CS, OFF);
1a000e62:	4c10      	ldr	r4, [pc, #64]	; (1a000ea4 <inicioLCD+0x80>)
1a000e64:	2100      	movs	r1, #0
1a000e66:	f994 0000 	ldrsb.w	r0, [r4]
1a000e6a:	f002 f975 	bl	1a003158 <gpioWrite>
	initlcd();
1a000e6e:	f7ff fed9 	bl	1a000c24 <initlcd>
	gpioWrite(CS, ON);
1a000e72:	2101      	movs	r1, #1
1a000e74:	f994 0000 	ldrsb.w	r0, [r4]
1a000e78:	f002 f96e 	bl	1a003158 <gpioWrite>
	setColorb(255, 255, 255);
1a000e7c:	22ff      	movs	r2, #255	; 0xff
1a000e7e:	4611      	mov	r1, r2
1a000e80:	4610      	mov	r0, r2
1a000e82:	f7ff ff97 	bl	1a000db4 <setColorb>
	setBackColorb(0, 0, 0);
1a000e86:	2200      	movs	r2, #0
1a000e88:	4611      	mov	r1, r2
1a000e8a:	4610      	mov	r0, r2
1a000e8c:	f7ff ffb0 	bl	1a000df0 <setBackColorb>
	cfont.font = 0;
1a000e90:	2300      	movs	r3, #0
1a000e92:	4a05      	ldr	r2, [pc, #20]	; (1a000ea8 <inicioLCD+0x84>)
1a000e94:	6013      	str	r3, [r2, #0]
	_transparent = false;
1a000e96:	4a05      	ldr	r2, [pc, #20]	; (1a000eac <inicioLCD+0x88>)
1a000e98:	7013      	strb	r3, [r2, #0]
}
1a000e9a:	bd10      	pop	{r4, pc}
1a000e9c:	10000bf8 	.word	0x10000bf8
1a000ea0:	10000d65 	.word	0x10000d65
1a000ea4:	10000d5d 	.word	0x10000d5d
1a000ea8:	10000d3c 	.word	0x10000d3c
1a000eac:	10000d29 	.word	0x10000d29

1a000eb0 <drawHLine>:
		_transparent = false;
	}
}

//para dibujar una line horizontal l pixeles
void drawHLine(int x, int y, int l) {
1a000eb0:	b570      	push	{r4, r5, r6, lr}
1a000eb2:	4604      	mov	r4, r0
1a000eb4:	460e      	mov	r6, r1
	if (l < 0) {
1a000eb6:	1e15      	subs	r5, r2, #0
1a000eb8:	db18      	blt.n	1a000eec <drawHLine+0x3c>
		l = -l;
		x -= l;
	}
	//cbi(P_CS, B_CS);
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, OFF);
1a000eba:	2100      	movs	r1, #0
1a000ebc:	4b14      	ldr	r3, [pc, #80]	; (1a000f10 <drawHLine+0x60>)
1a000ebe:	f993 0000 	ldrsb.w	r0, [r3]
1a000ec2:	f002 f949 	bl	1a003158 <gpioWrite>

	setXY(x, y, x + l, y);
1a000ec6:	4633      	mov	r3, r6
1a000ec8:	1962      	adds	r2, r4, r5
1a000eca:	4631      	mov	r1, r6
1a000ecc:	4620      	mov	r0, r4
1a000ece:	f7ff fde1 	bl	1a000a94 <setXY>
	if (display_transfer_mode == 16) {
1a000ed2:	4b10      	ldr	r3, [pc, #64]	; (1a000f14 <drawHLine+0x64>)
1a000ed4:	681b      	ldr	r3, [r3, #0]
1a000ed6:	2b10      	cmp	r3, #16
1a000ed8:	d00b      	beq.n	1a000ef2 <drawHLine+0x42>
		_fast_fill_16(fch, fcl, l);
	}

	//sbi(P_CS, B_CS);
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, ON);
1a000eda:	2101      	movs	r1, #1
1a000edc:	4b0c      	ldr	r3, [pc, #48]	; (1a000f10 <drawHLine+0x60>)
1a000ede:	f993 0000 	ldrsb.w	r0, [r3]
1a000ee2:	f002 f939 	bl	1a003158 <gpioWrite>
	clrXY();
1a000ee6:	f7ff fe15 	bl	1a000b14 <clrXY>
}
1a000eea:	bd70      	pop	{r4, r5, r6, pc}
		x -= l;
1a000eec:	442c      	add	r4, r5
		l = -l;
1a000eee:	426d      	negs	r5, r5
1a000ef0:	e7e3      	b.n	1a000eba <drawHLine+0xa>
		gpioWrite(RS, ON);
1a000ef2:	2101      	movs	r1, #1
1a000ef4:	4b08      	ldr	r3, [pc, #32]	; (1a000f18 <drawHLine+0x68>)
1a000ef6:	f993 0000 	ldrsb.w	r0, [r3]
1a000efa:	f002 f92d 	bl	1a003158 <gpioWrite>
		_fast_fill_16(fch, fcl, l);
1a000efe:	462a      	mov	r2, r5
1a000f00:	4b06      	ldr	r3, [pc, #24]	; (1a000f1c <drawHLine+0x6c>)
1a000f02:	7819      	ldrb	r1, [r3, #0]
1a000f04:	4b06      	ldr	r3, [pc, #24]	; (1a000f20 <drawHLine+0x70>)
1a000f06:	7818      	ldrb	r0, [r3, #0]
1a000f08:	f7ff fbc2 	bl	1a000690 <_fast_fill_16>
1a000f0c:	e7e5      	b.n	1a000eda <drawHLine+0x2a>
1a000f0e:	bf00      	nop
1a000f10:	10000d5d 	.word	0x10000d5d
1a000f14:	10000d04 	.word	0x10000d04
1a000f18:	10000d5c 	.word	0x10000d5c
1a000f1c:	10000ce0 	.word	0x10000ce0
1a000f20:	10000cd9 	.word	0x10000cd9

1a000f24 <drawVLine>:

//para graficar linea horizontal l pixeles
void drawVLine(int x, int y, int l) {
1a000f24:	b570      	push	{r4, r5, r6, lr}
1a000f26:	4606      	mov	r6, r0
1a000f28:	460c      	mov	r4, r1
	if (l < 0) {
1a000f2a:	1e15      	subs	r5, r2, #0
1a000f2c:	db18      	blt.n	1a000f60 <drawVLine+0x3c>
		l = -l;
		y -= l;
	}
	//cbi(P_CS, B_CS);
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, OFF);
1a000f2e:	2100      	movs	r1, #0
1a000f30:	4b14      	ldr	r3, [pc, #80]	; (1a000f84 <drawVLine+0x60>)
1a000f32:	f993 0000 	ldrsb.w	r0, [r3]
1a000f36:	f002 f90f 	bl	1a003158 <gpioWrite>
	setXY(x, y, x, y + l);
1a000f3a:	1963      	adds	r3, r4, r5
1a000f3c:	4632      	mov	r2, r6
1a000f3e:	4621      	mov	r1, r4
1a000f40:	4630      	mov	r0, r6
1a000f42:	f7ff fda7 	bl	1a000a94 <setXY>
	if (display_transfer_mode == 16) {
1a000f46:	4b10      	ldr	r3, [pc, #64]	; (1a000f88 <drawVLine+0x64>)
1a000f48:	681b      	ldr	r3, [r3, #0]
1a000f4a:	2b10      	cmp	r3, #16
1a000f4c:	d00b      	beq.n	1a000f66 <drawVLine+0x42>
		_fast_fill_16(fch, fcl, l);
	}

	//sbi(P_CS, B_CS);
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, ON);
1a000f4e:	2101      	movs	r1, #1
1a000f50:	4b0c      	ldr	r3, [pc, #48]	; (1a000f84 <drawVLine+0x60>)
1a000f52:	f993 0000 	ldrsb.w	r0, [r3]
1a000f56:	f002 f8ff 	bl	1a003158 <gpioWrite>
	clrXY();
1a000f5a:	f7ff fddb 	bl	1a000b14 <clrXY>
}
1a000f5e:	bd70      	pop	{r4, r5, r6, pc}
		y -= l;
1a000f60:	442c      	add	r4, r5
		l = -l;
1a000f62:	426d      	negs	r5, r5
1a000f64:	e7e3      	b.n	1a000f2e <drawVLine+0xa>
		gpioWrite(RS, ON);
1a000f66:	2101      	movs	r1, #1
1a000f68:	4b08      	ldr	r3, [pc, #32]	; (1a000f8c <drawVLine+0x68>)
1a000f6a:	f993 0000 	ldrsb.w	r0, [r3]
1a000f6e:	f002 f8f3 	bl	1a003158 <gpioWrite>
		_fast_fill_16(fch, fcl, l);
1a000f72:	462a      	mov	r2, r5
1a000f74:	4b06      	ldr	r3, [pc, #24]	; (1a000f90 <drawVLine+0x6c>)
1a000f76:	7819      	ldrb	r1, [r3, #0]
1a000f78:	4b06      	ldr	r3, [pc, #24]	; (1a000f94 <drawVLine+0x70>)
1a000f7a:	7818      	ldrb	r0, [r3, #0]
1a000f7c:	f7ff fb88 	bl	1a000690 <_fast_fill_16>
1a000f80:	e7e5      	b.n	1a000f4e <drawVLine+0x2a>
1a000f82:	bf00      	nop
1a000f84:	10000d5d 	.word	0x10000d5d
1a000f88:	10000d04 	.word	0x10000d04
1a000f8c:	10000d5c 	.word	0x10000d5c
1a000f90:	10000ce0 	.word	0x10000ce0
1a000f94:	10000cd9 	.word	0x10000cd9

1a000f98 <drawLine>:

//para dibujar una linea mediante dos puntos
void drawLine(int x1, int y1, int x2, int y2) {
1a000f98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000f9c:	4605      	mov	r5, r0
1a000f9e:	460c      	mov	r4, r1
1a000fa0:	4691      	mov	r9, r2
	if (y1 == y2)
1a000fa2:	4299      	cmp	r1, r3
1a000fa4:	d033      	beq.n	1a00100e <drawLine+0x76>
1a000fa6:	461e      	mov	r6, r3
		drawHLine(x1, y1, x2 - x1);
	else if (x1 == x2)
1a000fa8:	4282      	cmp	r2, r0
1a000faa:	d037      	beq.n	1a00101c <drawLine+0x84>
		drawVLine(x1, y1, y2 - y1);
	else {
		unsigned int dx = (x2 > x1 ? x2 - x1 : x1 - x2);
1a000fac:	4282      	cmp	r2, r0
1a000fae:	dd39      	ble.n	1a001024 <drawLine+0x8c>
1a000fb0:	1a17      	subs	r7, r2, r0
		short xstep = x2 > x1 ? 1 : -1;
1a000fb2:	45a9      	cmp	r9, r5
1a000fb4:	dd38      	ble.n	1a001028 <drawLine+0x90>
1a000fb6:	f04f 0a01 	mov.w	sl, #1
		unsigned int dy = (y2 > y1 ? y2 - y1 : y1 - y2);
1a000fba:	42b4      	cmp	r4, r6
1a000fbc:	da37      	bge.n	1a00102e <drawLine+0x96>
1a000fbe:	eba6 0804 	sub.w	r8, r6, r4
		short ystep = y2 > y1 ? 1 : -1;
1a000fc2:	42b4      	cmp	r4, r6
1a000fc4:	da36      	bge.n	1a001034 <drawLine+0x9c>
1a000fc6:	f04f 0b01 	mov.w	fp, #1
		int col = x1, row = y1;

		//cbi(P_CS, B_CS);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
		gpioWrite(CS, OFF);
1a000fca:	2100      	movs	r1, #0
1a000fcc:	4b26      	ldr	r3, [pc, #152]	; (1a001068 <drawLine+0xd0>)
1a000fce:	f993 0000 	ldrsb.w	r0, [r3]
1a000fd2:	f002 f8c1 	bl	1a003158 <gpioWrite>
		if (dx < dy) {
1a000fd6:	4547      	cmp	r7, r8
1a000fd8:	d22f      	bcs.n	1a00103a <drawLine+0xa2>
			int t = -(dy >> 1);
1a000fda:	ea4f 0958 	mov.w	r9, r8, lsr #1
1a000fde:	f1c9 0900 	rsb	r9, r9, #0
			while (true) {
				setXY(col, row, col, row);
1a000fe2:	4623      	mov	r3, r4
1a000fe4:	462a      	mov	r2, r5
1a000fe6:	4621      	mov	r1, r4
1a000fe8:	4628      	mov	r0, r5
1a000fea:	f7ff fd53 	bl	1a000a94 <setXY>
				LCD_Write_DATAb(fch, fcl);
1a000fee:	4b1f      	ldr	r3, [pc, #124]	; (1a00106c <drawLine+0xd4>)
1a000ff0:	7819      	ldrb	r1, [r3, #0]
1a000ff2:	4b1f      	ldr	r3, [pc, #124]	; (1a001070 <drawLine+0xd8>)
1a000ff4:	7818      	ldrb	r0, [r3, #0]
1a000ff6:	f7ff fb37 	bl	1a000668 <LCD_Write_DATAb>
				if (row == y2)
1a000ffa:	42b4      	cmp	r4, r6
1a000ffc:	d00c      	beq.n	1a001018 <drawLine+0x80>
					return;
				row += ystep;
1a000ffe:	445c      	add	r4, fp
				t += dx;
				if (t >= 0) {
1a001000:	eb19 0907 	adds.w	r9, r9, r7
1a001004:	d4ed      	bmi.n	1a000fe2 <drawLine+0x4a>
					col += xstep;
1a001006:	4455      	add	r5, sl
					t -= dy;
1a001008:	eba9 0908 	sub.w	r9, r9, r8
1a00100c:	e7e9      	b.n	1a000fe2 <drawLine+0x4a>
		drawHLine(x1, y1, x2 - x1);
1a00100e:	1a12      	subs	r2, r2, r0
1a001010:	f7ff ff4e 	bl	1a000eb0 <drawHLine>
		}
		//sbi(P_CS, B_CS);
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
		gpioWrite(CS, ON);
	}
	clrXY();
1a001014:	f7ff fd7e 	bl	1a000b14 <clrXY>
}
1a001018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drawVLine(x1, y1, y2 - y1);
1a00101c:	1a5a      	subs	r2, r3, r1
1a00101e:	f7ff ff81 	bl	1a000f24 <drawVLine>
1a001022:	e7f7      	b.n	1a001014 <drawLine+0x7c>
		unsigned int dx = (x2 > x1 ? x2 - x1 : x1 - x2);
1a001024:	1a87      	subs	r7, r0, r2
1a001026:	e7c4      	b.n	1a000fb2 <drawLine+0x1a>
		short xstep = x2 > x1 ? 1 : -1;
1a001028:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
1a00102c:	e7c5      	b.n	1a000fba <drawLine+0x22>
		unsigned int dy = (y2 > y1 ? y2 - y1 : y1 - y2);
1a00102e:	eba4 0806 	sub.w	r8, r4, r6
1a001032:	e7c6      	b.n	1a000fc2 <drawLine+0x2a>
		short ystep = y2 > y1 ? 1 : -1;
1a001034:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
1a001038:	e7c7      	b.n	1a000fca <drawLine+0x32>
			int t = -(dx >> 1);
1a00103a:	087e      	lsrs	r6, r7, #1
1a00103c:	4276      	negs	r6, r6
				setXY(col, row, col, row);
1a00103e:	4623      	mov	r3, r4
1a001040:	462a      	mov	r2, r5
1a001042:	4621      	mov	r1, r4
1a001044:	4628      	mov	r0, r5
1a001046:	f7ff fd25 	bl	1a000a94 <setXY>
				LCD_Write_DATAb(fch, fcl);
1a00104a:	4b08      	ldr	r3, [pc, #32]	; (1a00106c <drawLine+0xd4>)
1a00104c:	7819      	ldrb	r1, [r3, #0]
1a00104e:	4b08      	ldr	r3, [pc, #32]	; (1a001070 <drawLine+0xd8>)
1a001050:	7818      	ldrb	r0, [r3, #0]
1a001052:	f7ff fb09 	bl	1a000668 <LCD_Write_DATAb>
				if (col == x2)
1a001056:	454d      	cmp	r5, r9
1a001058:	d0de      	beq.n	1a001018 <drawLine+0x80>
				col += xstep;
1a00105a:	4455      	add	r5, sl
				if (t >= 0) {
1a00105c:	eb16 0608 	adds.w	r6, r6, r8
1a001060:	d4ed      	bmi.n	1a00103e <drawLine+0xa6>
					row += ystep;
1a001062:	445c      	add	r4, fp
					t -= dx;
1a001064:	1bf6      	subs	r6, r6, r7
1a001066:	e7ea      	b.n	1a00103e <drawLine+0xa6>
1a001068:	10000d5d 	.word	0x10000d5d
1a00106c:	10000ce0 	.word	0x10000ce0
1a001070:	10000cd9 	.word	0x10000cd9

1a001074 <setPixel>:

// para enviar el dato del pixel
void setPixel(int color) {
1a001074:	b508      	push	{r3, lr}
	LCD_Write_DATAb((color >> 8), (color & 0xFF));  // rrrrrggggggbbbbb
1a001076:	b2c1      	uxtb	r1, r0
1a001078:	f3c0 2007 	ubfx	r0, r0, #8, #8
1a00107c:	f7ff faf4 	bl	1a000668 <LCD_Write_DATAb>
}
1a001080:	bd08      	pop	{r3, pc}
1a001082:	Address 0x000000001a001082 is out of bounds.


1a001084 <drawPixel>:

//para dibujar un pixel en x e y
void drawPixel(int x, int y) {
1a001084:	b570      	push	{r4, r5, r6, lr}
1a001086:	4605      	mov	r5, r0
1a001088:	460e      	mov	r6, r1
	//cbi(P_CS, B_CS);
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, OFF);
1a00108a:	4c0e      	ldr	r4, [pc, #56]	; (1a0010c4 <drawPixel+0x40>)
1a00108c:	2100      	movs	r1, #0
1a00108e:	f994 0000 	ldrsb.w	r0, [r4]
1a001092:	f002 f861 	bl	1a003158 <gpioWrite>
	setXY(x, y, x, y);
1a001096:	4633      	mov	r3, r6
1a001098:	462a      	mov	r2, r5
1a00109a:	4631      	mov	r1, r6
1a00109c:	4628      	mov	r0, r5
1a00109e:	f7ff fcf9 	bl	1a000a94 <setXY>
	setPixel((fch << 8) | fcl);
1a0010a2:	4b09      	ldr	r3, [pc, #36]	; (1a0010c8 <drawPixel+0x44>)
1a0010a4:	7818      	ldrb	r0, [r3, #0]
1a0010a6:	4b09      	ldr	r3, [pc, #36]	; (1a0010cc <drawPixel+0x48>)
1a0010a8:	781b      	ldrb	r3, [r3, #0]
1a0010aa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a0010ae:	f7ff ffe1 	bl	1a001074 <setPixel>
	//sbi(P_CS, B_CS);
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, ON);
1a0010b2:	2101      	movs	r1, #1
1a0010b4:	f994 0000 	ldrsb.w	r0, [r4]
1a0010b8:	f002 f84e 	bl	1a003158 <gpioWrite>
	clrXY();
1a0010bc:	f7ff fd2a 	bl	1a000b14 <clrXY>
}
1a0010c0:	bd70      	pop	{r4, r5, r6, pc}
1a0010c2:	bf00      	nop
1a0010c4:	10000d5d 	.word	0x10000d5d
1a0010c8:	10000cd9 	.word	0x10000cd9
1a0010cc:	10000ce0 	.word	0x10000ce0

1a0010d0 <printCharAscii>:

//Para imprimir un caracter ASCII en x e y
void printCharAscii(uint8_t c, int x, int y) {
1a0010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0010d4:	4604      	mov	r4, r0
1a0010d6:	4688      	mov	r8, r1
1a0010d8:	4691      	mov	r9, r2
	int j;
	int temp;

	//cbi(P_CS, B_CS);
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, OFF);
1a0010da:	2100      	movs	r1, #0
1a0010dc:	4b75      	ldr	r3, [pc, #468]	; (1a0012b4 <printCharAscii+0x1e4>)
1a0010de:	f993 0000 	ldrsb.w	r0, [r3]
1a0010e2:	f002 f839 	bl	1a003158 <gpioWrite>
	if (!_transparent) {
1a0010e6:	4b74      	ldr	r3, [pc, #464]	; (1a0012b8 <printCharAscii+0x1e8>)
1a0010e8:	781b      	ldrb	r3, [r3, #0]
1a0010ea:	2b00      	cmp	r3, #0
1a0010ec:	f040 8096 	bne.w	1a00121c <printCharAscii+0x14c>
		if (orient == PORTRAIT) {
1a0010f0:	4b72      	ldr	r3, [pc, #456]	; (1a0012bc <printCharAscii+0x1ec>)
1a0010f2:	781a      	ldrb	r2, [r3, #0]
1a0010f4:	4b72      	ldr	r3, [pc, #456]	; (1a0012c0 <printCharAscii+0x1f0>)
1a0010f6:	781b      	ldrb	r3, [r3, #0]
1a0010f8:	429a      	cmp	r2, r3
1a0010fa:	d00d      	beq.n	1a001118 <printCharAscii+0x48>
					}
				}
				temp++;
			}
		} else {
			temp = ((c - cfont.offset) * ((cfont.x_size / 8) * cfont.y_size))
1a0010fc:	4a71      	ldr	r2, [pc, #452]	; (1a0012c4 <printCharAscii+0x1f4>)
1a0010fe:	7997      	ldrb	r7, [r2, #6]
1a001100:	1be4      	subs	r4, r4, r7
1a001102:	7913      	ldrb	r3, [r2, #4]
1a001104:	08db      	lsrs	r3, r3, #3
1a001106:	7957      	ldrb	r7, [r2, #5]
1a001108:	fb07 f703 	mul.w	r7, r7, r3
1a00110c:	fb07 f704 	mul.w	r7, r7, r4
1a001110:	3704      	adds	r7, #4
					+ 4;

			for (j = 0; j < ((cfont.x_size / 8) * cfont.y_size);
1a001112:	f04f 0a00 	mov.w	sl, #0
1a001116:	e06a      	b.n	1a0011ee <printCharAscii+0x11e>
			setXY(x, y, x + cfont.x_size - 1, y + cfont.y_size - 1);
1a001118:	4d6a      	ldr	r5, [pc, #424]	; (1a0012c4 <printCharAscii+0x1f4>)
1a00111a:	792a      	ldrb	r2, [r5, #4]
1a00111c:	4442      	add	r2, r8
1a00111e:	796b      	ldrb	r3, [r5, #5]
1a001120:	444b      	add	r3, r9
1a001122:	3b01      	subs	r3, #1
1a001124:	3a01      	subs	r2, #1
1a001126:	4649      	mov	r1, r9
1a001128:	4640      	mov	r0, r8
1a00112a:	f7ff fcb3 	bl	1a000a94 <setXY>
			temp = ((c - cfont.offset) * ((cfont.x_size / 8) * cfont.y_size))
1a00112e:	79ae      	ldrb	r6, [r5, #6]
1a001130:	1ba4      	subs	r4, r4, r6
1a001132:	792b      	ldrb	r3, [r5, #4]
1a001134:	08db      	lsrs	r3, r3, #3
1a001136:	796e      	ldrb	r6, [r5, #5]
1a001138:	fb06 f603 	mul.w	r6, r6, r3
1a00113c:	fb06 f604 	mul.w	r6, r6, r4
1a001140:	3604      	adds	r6, #4
			for (j = 0; j < ((cfont.x_size / 8) * cfont.y_size); j++) {
1a001142:	2700      	movs	r7, #0
1a001144:	e01d      	b.n	1a001182 <printCharAscii+0xb2>
						setPixel((bch << 8) | bcl);
1a001146:	4b60      	ldr	r3, [pc, #384]	; (1a0012c8 <printCharAscii+0x1f8>)
1a001148:	7818      	ldrb	r0, [r3, #0]
1a00114a:	4b60      	ldr	r3, [pc, #384]	; (1a0012cc <printCharAscii+0x1fc>)
1a00114c:	781b      	ldrb	r3, [r3, #0]
1a00114e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a001152:	f7ff ff8f 	bl	1a001074 <setPixel>
				for (i = 0; i < 8; i++) {
1a001156:	3401      	adds	r4, #1
1a001158:	b2e4      	uxtb	r4, r4
1a00115a:	2c07      	cmp	r4, #7
1a00115c:	d80f      	bhi.n	1a00117e <printCharAscii+0xae>
					if ((ch & (1 << (7 - i))) != 0) {
1a00115e:	f1c4 0307 	rsb	r3, r4, #7
1a001162:	fa45 f303 	asr.w	r3, r5, r3
1a001166:	f013 0f01 	tst.w	r3, #1
1a00116a:	d0ec      	beq.n	1a001146 <printCharAscii+0x76>
						setPixel((fch << 8) | fcl);
1a00116c:	4b58      	ldr	r3, [pc, #352]	; (1a0012d0 <printCharAscii+0x200>)
1a00116e:	7818      	ldrb	r0, [r3, #0]
1a001170:	4b58      	ldr	r3, [pc, #352]	; (1a0012d4 <printCharAscii+0x204>)
1a001172:	781b      	ldrb	r3, [r3, #0]
1a001174:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a001178:	f7ff ff7c 	bl	1a001074 <setPixel>
1a00117c:	e7eb      	b.n	1a001156 <printCharAscii+0x86>
				temp++;
1a00117e:	3601      	adds	r6, #1
			for (j = 0; j < ((cfont.x_size / 8) * cfont.y_size); j++) {
1a001180:	3701      	adds	r7, #1
1a001182:	4950      	ldr	r1, [pc, #320]	; (1a0012c4 <printCharAscii+0x1f4>)
1a001184:	790b      	ldrb	r3, [r1, #4]
1a001186:	08da      	lsrs	r2, r3, #3
1a001188:	794b      	ldrb	r3, [r1, #5]
1a00118a:	fb03 f302 	mul.w	r3, r3, r2
1a00118e:	42bb      	cmp	r3, r7
1a001190:	f340 8086 	ble.w	1a0012a0 <printCharAscii+0x1d0>
				ch = pgm_read_byte(&cfont.font[temp]);
1a001194:	4b4b      	ldr	r3, [pc, #300]	; (1a0012c4 <printCharAscii+0x1f4>)
1a001196:	681b      	ldr	r3, [r3, #0]
1a001198:	5d9d      	ldrb	r5, [r3, r6]
				for (i = 0; i < 8; i++) {
1a00119a:	2400      	movs	r4, #0
1a00119c:	e7dd      	b.n	1a00115a <printCharAscii+0x8a>
					ch = pgm_read_byte(&cfont.font[temp + zz]);
					for (i = 0; i < 8; i++) {
						if ((ch & (1 << i)) != 0) {
							setPixel((fch << 8) | fcl);
						} else {
							setPixel((bch << 8) | bcl);
1a00119e:	4b4a      	ldr	r3, [pc, #296]	; (1a0012c8 <printCharAscii+0x1f8>)
1a0011a0:	7818      	ldrb	r0, [r3, #0]
1a0011a2:	4b4a      	ldr	r3, [pc, #296]	; (1a0012cc <printCharAscii+0x1fc>)
1a0011a4:	781b      	ldrb	r3, [r3, #0]
1a0011a6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a0011aa:	f7ff ff63 	bl	1a001074 <setPixel>
					for (i = 0; i < 8; i++) {
1a0011ae:	3401      	adds	r4, #1
1a0011b0:	b2e4      	uxtb	r4, r4
1a0011b2:	2c07      	cmp	r4, #7
1a0011b4:	d80d      	bhi.n	1a0011d2 <printCharAscii+0x102>
						if ((ch & (1 << i)) != 0) {
1a0011b6:	fa45 f304 	asr.w	r3, r5, r4
1a0011ba:	f013 0f01 	tst.w	r3, #1
1a0011be:	d0ee      	beq.n	1a00119e <printCharAscii+0xce>
							setPixel((fch << 8) | fcl);
1a0011c0:	4b43      	ldr	r3, [pc, #268]	; (1a0012d0 <printCharAscii+0x200>)
1a0011c2:	7818      	ldrb	r0, [r3, #0]
1a0011c4:	4b43      	ldr	r3, [pc, #268]	; (1a0012d4 <printCharAscii+0x204>)
1a0011c6:	781b      	ldrb	r3, [r3, #0]
1a0011c8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a0011cc:	f7ff ff52 	bl	1a001074 <setPixel>
1a0011d0:	e7ed      	b.n	1a0011ae <printCharAscii+0xde>
				for (int zz = (cfont.x_size / 8) - 1; zz >= 0; zz--) {
1a0011d2:	3e01      	subs	r6, #1
1a0011d4:	2e00      	cmp	r6, #0
1a0011d6:	db05      	blt.n	1a0011e4 <printCharAscii+0x114>
					ch = pgm_read_byte(&cfont.font[temp + zz]);
1a0011d8:	4b3a      	ldr	r3, [pc, #232]	; (1a0012c4 <printCharAscii+0x1f4>)
1a0011da:	681a      	ldr	r2, [r3, #0]
1a0011dc:	19bb      	adds	r3, r7, r6
1a0011de:	5cd5      	ldrb	r5, [r2, r3]
					for (i = 0; i < 8; i++) {
1a0011e0:	2400      	movs	r4, #0
1a0011e2:	e7e6      	b.n	1a0011b2 <printCharAscii+0xe2>
						}
					}
				}
				temp += (cfont.x_size / 8);
1a0011e4:	4b37      	ldr	r3, [pc, #220]	; (1a0012c4 <printCharAscii+0x1f4>)
1a0011e6:	791b      	ldrb	r3, [r3, #4]
1a0011e8:	08db      	lsrs	r3, r3, #3
1a0011ea:	441f      	add	r7, r3
					j += (cfont.x_size / 8)) {
1a0011ec:	449a      	add	sl, r3
			for (j = 0; j < ((cfont.x_size / 8) * cfont.y_size);
1a0011ee:	4935      	ldr	r1, [pc, #212]	; (1a0012c4 <printCharAscii+0x1f4>)
1a0011f0:	790a      	ldrb	r2, [r1, #4]
1a0011f2:	08d3      	lsrs	r3, r2, #3
1a0011f4:	7949      	ldrb	r1, [r1, #5]
1a0011f6:	fb01 f103 	mul.w	r1, r1, r3
1a0011fa:	4551      	cmp	r1, sl
1a0011fc:	dd50      	ble.n	1a0012a0 <printCharAscii+0x1d0>
				setXY(x, y + (j / (cfont.x_size / 8)), x + cfont.x_size - 1,
1a0011fe:	fb9a f3f3 	sdiv	r3, sl, r3
1a001202:	eb03 0109 	add.w	r1, r3, r9
1a001206:	4442      	add	r2, r8
1a001208:	460b      	mov	r3, r1
1a00120a:	3a01      	subs	r2, #1
1a00120c:	4640      	mov	r0, r8
1a00120e:	f7ff fc41 	bl	1a000a94 <setXY>
				for (int zz = (cfont.x_size / 8) - 1; zz >= 0; zz--) {
1a001212:	4b2c      	ldr	r3, [pc, #176]	; (1a0012c4 <printCharAscii+0x1f4>)
1a001214:	791e      	ldrb	r6, [r3, #4]
1a001216:	08f6      	lsrs	r6, r6, #3
1a001218:	3e01      	subs	r6, #1
1a00121a:	e7db      	b.n	1a0011d4 <printCharAscii+0x104>
			}
		}
	} else {
		temp = ((c - cfont.offset) * ((cfont.x_size / 8) * cfont.y_size)) + 4;
1a00121c:	4a29      	ldr	r2, [pc, #164]	; (1a0012c4 <printCharAscii+0x1f4>)
1a00121e:	7993      	ldrb	r3, [r2, #6]
1a001220:	1ae4      	subs	r4, r4, r3
1a001222:	7913      	ldrb	r3, [r2, #4]
1a001224:	08db      	lsrs	r3, r3, #3
1a001226:	f892 a005 	ldrb.w	sl, [r2, #5]
1a00122a:	fb0a fa03 	mul.w	sl, sl, r3
1a00122e:	fb0a f404 	mul.w	r4, sl, r4
1a001232:	f104 0a04 	add.w	sl, r4, #4
		for (j = 0; j < cfont.y_size; j++) {
1a001236:	2700      	movs	r7, #0
1a001238:	e02c      	b.n	1a001294 <printCharAscii+0x1c4>
			for (int zz = 0; zz < (cfont.x_size / 8); zz++) {
				ch = pgm_read_byte(&cfont.font[temp + zz]);
				for (i = 0; i < 8; i++) {

					if ((ch & (1 << (7 - i))) != 0) {
						setXY(x + i + (zz * 8), y + j, x + i + (zz * 8) + 1,
1a00123a:	eb04 0008 	add.w	r0, r4, r8
1a00123e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
1a001242:	eb07 0109 	add.w	r1, r7, r9
1a001246:	1c4b      	adds	r3, r1, #1
1a001248:	1c42      	adds	r2, r0, #1
1a00124a:	f7ff fc23 	bl	1a000a94 <setXY>
								y + j + 1);
						setPixel((fch << 8) | fcl);
1a00124e:	4b20      	ldr	r3, [pc, #128]	; (1a0012d0 <printCharAscii+0x200>)
1a001250:	7818      	ldrb	r0, [r3, #0]
1a001252:	4b20      	ldr	r3, [pc, #128]	; (1a0012d4 <printCharAscii+0x204>)
1a001254:	781b      	ldrb	r3, [r3, #0]
1a001256:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a00125a:	f7ff ff0b 	bl	1a001074 <setPixel>
				for (i = 0; i < 8; i++) {
1a00125e:	3401      	adds	r4, #1
1a001260:	b2e4      	uxtb	r4, r4
1a001262:	2c07      	cmp	r4, #7
1a001264:	d807      	bhi.n	1a001276 <printCharAscii+0x1a6>
					if ((ch & (1 << (7 - i))) != 0) {
1a001266:	f1c4 0307 	rsb	r3, r4, #7
1a00126a:	fa45 f303 	asr.w	r3, r5, r3
1a00126e:	f013 0f01 	tst.w	r3, #1
1a001272:	d0f4      	beq.n	1a00125e <printCharAscii+0x18e>
1a001274:	e7e1      	b.n	1a00123a <printCharAscii+0x16a>
			for (int zz = 0; zz < (cfont.x_size / 8); zz++) {
1a001276:	3601      	adds	r6, #1
1a001278:	4b12      	ldr	r3, [pc, #72]	; (1a0012c4 <printCharAscii+0x1f4>)
1a00127a:	791b      	ldrb	r3, [r3, #4]
1a00127c:	08db      	lsrs	r3, r3, #3
1a00127e:	42b3      	cmp	r3, r6
1a001280:	dd06      	ble.n	1a001290 <printCharAscii+0x1c0>
				ch = pgm_read_byte(&cfont.font[temp + zz]);
1a001282:	4b10      	ldr	r3, [pc, #64]	; (1a0012c4 <printCharAscii+0x1f4>)
1a001284:	681a      	ldr	r2, [r3, #0]
1a001286:	eb0a 0306 	add.w	r3, sl, r6
1a00128a:	5cd5      	ldrb	r5, [r2, r3]
				for (i = 0; i < 8; i++) {
1a00128c:	2400      	movs	r4, #0
1a00128e:	e7e8      	b.n	1a001262 <printCharAscii+0x192>
					}
				}
			}
			temp += (cfont.x_size / 8);
1a001290:	449a      	add	sl, r3
		for (j = 0; j < cfont.y_size; j++) {
1a001292:	3701      	adds	r7, #1
1a001294:	4b0b      	ldr	r3, [pc, #44]	; (1a0012c4 <printCharAscii+0x1f4>)
1a001296:	795b      	ldrb	r3, [r3, #5]
1a001298:	42bb      	cmp	r3, r7
1a00129a:	dd01      	ble.n	1a0012a0 <printCharAscii+0x1d0>
			for (int zz = 0; zz < (cfont.x_size / 8); zz++) {
1a00129c:	2600      	movs	r6, #0
1a00129e:	e7eb      	b.n	1a001278 <printCharAscii+0x1a8>
		}
	}

	//sbi(P_CS, B_CS);
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, ON);
1a0012a0:	2101      	movs	r1, #1
1a0012a2:	4b04      	ldr	r3, [pc, #16]	; (1a0012b4 <printCharAscii+0x1e4>)
1a0012a4:	f993 0000 	ldrsb.w	r0, [r3]
1a0012a8:	f001 ff56 	bl	1a003158 <gpioWrite>
	clrXY();
1a0012ac:	f7ff fc32 	bl	1a000b14 <clrXY>
}
1a0012b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0012b4:	10000d5d 	.word	0x10000d5d
1a0012b8:	10000d29 	.word	0x10000d29
1a0012bc:	10000bf8 	.word	0x10000bf8
1a0012c0:	10000ca8 	.word	0x10000ca8
1a0012c4:	10000d3c 	.word	0x10000d3c
1a0012c8:	10000d28 	.word	0x10000d28
1a0012cc:	10000d1d 	.word	0x10000d1d
1a0012d0:	10000cd9 	.word	0x10000cd9
1a0012d4:	10000ce0 	.word	0x10000ce0

1a0012d8 <drawRectangulo>:

//Para dibujar una rectangulo
void drawRectangulo(int x1, int y1, int x2, int y2){
1a0012d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0012dc:	4607      	mov	r7, r0
1a0012de:	460c      	mov	r4, r1
1a0012e0:	4616      	mov	r6, r2
1a0012e2:	461d      	mov	r5, r3
	if (x1>x2)
1a0012e4:	4290      	cmp	r0, r2
1a0012e6:	dc01      	bgt.n	1a0012ec <drawRectangulo+0x14>
1a0012e8:	4606      	mov	r6, r0
1a0012ea:	4617      	mov	r7, r2
	{
		swap(int, x1, x2);
	}
	if (y1>y2)
1a0012ec:	42ac      	cmp	r4, r5
1a0012ee:	dc02      	bgt.n	1a0012f6 <drawRectangulo+0x1e>
1a0012f0:	462b      	mov	r3, r5
1a0012f2:	4625      	mov	r5, r4
1a0012f4:	461c      	mov	r4, r3
	{
		swap(int, y1, y2);
	}

	drawHLine(x1, y1, x2-x1);
1a0012f6:	eba7 0806 	sub.w	r8, r7, r6
1a0012fa:	4642      	mov	r2, r8
1a0012fc:	4629      	mov	r1, r5
1a0012fe:	4630      	mov	r0, r6
1a001300:	f7ff fdd6 	bl	1a000eb0 <drawHLine>
	drawHLine(x1, y2, x2-x1);
1a001304:	4642      	mov	r2, r8
1a001306:	4621      	mov	r1, r4
1a001308:	4630      	mov	r0, r6
1a00130a:	f7ff fdd1 	bl	1a000eb0 <drawHLine>
	drawVLine(x1, y1, y2-y1);
1a00130e:	1b64      	subs	r4, r4, r5
1a001310:	4622      	mov	r2, r4
1a001312:	4629      	mov	r1, r5
1a001314:	4630      	mov	r0, r6
1a001316:	f7ff fe05 	bl	1a000f24 <drawVLine>
	drawVLine(x2, y1, y2-y1);
1a00131a:	4622      	mov	r2, r4
1a00131c:	4629      	mov	r1, r5
1a00131e:	4638      	mov	r0, r7
1a001320:	f7ff fe00 	bl	1a000f24 <drawVLine>
}
1a001324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001328 <drawRoundRect>:

//Para dibujar una rectangulo con las esquinas redondeadas.
void drawRoundRect(int x1, int y1, int x2, int y2){
1a001328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00132c:	b083      	sub	sp, #12
1a00132e:	4606      	mov	r6, r0
1a001330:	460f      	mov	r7, r1
1a001332:	4614      	mov	r4, r2
1a001334:	461d      	mov	r5, r3
	if (x1>x2)
1a001336:	4290      	cmp	r0, r2
1a001338:	dc01      	bgt.n	1a00133e <drawRoundRect+0x16>
1a00133a:	4604      	mov	r4, r0
1a00133c:	4616      	mov	r6, r2
	{
		swap(int, x1, x2);
	}
	if (y1>y2)
1a00133e:	42af      	cmp	r7, r5
1a001340:	dc02      	bgt.n	1a001348 <drawRoundRect+0x20>
1a001342:	462b      	mov	r3, r5
1a001344:	463d      	mov	r5, r7
1a001346:	461f      	mov	r7, r3
	{
		swap(int, y1, y2);
	}
	if ((x2-x1)>4 && (y2-y1)>4)
1a001348:	eba6 0804 	sub.w	r8, r6, r4
1a00134c:	f1b8 0f04 	cmp.w	r8, #4
1a001350:	dd04      	ble.n	1a00135c <drawRoundRect+0x34>
1a001352:	eba7 0905 	sub.w	r9, r7, r5
1a001356:	f1b9 0f04 	cmp.w	r9, #4
1a00135a:	dc02      	bgt.n	1a001362 <drawRoundRect+0x3a>
		drawHLine(x1+2, y1, x2-x1-4);
		drawHLine(x1+2, y2, x2-x1-4);
		drawVLine(x1, y1+2, y2-y1-4);
		drawVLine(x2, y1+2, y2-y1-4);
	}
}
1a00135c:	b003      	add	sp, #12
1a00135e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drawPixel(x1+1,y1+1);
1a001362:	f104 0b01 	add.w	fp, r4, #1
1a001366:	f105 0a01 	add.w	sl, r5, #1
1a00136a:	4651      	mov	r1, sl
1a00136c:	4658      	mov	r0, fp
1a00136e:	f7ff fe89 	bl	1a001084 <drawPixel>
		drawPixel(x2-1,y1+1);
1a001372:	1e73      	subs	r3, r6, #1
1a001374:	4651      	mov	r1, sl
1a001376:	9301      	str	r3, [sp, #4]
1a001378:	4618      	mov	r0, r3
1a00137a:	f7ff fe83 	bl	1a001084 <drawPixel>
		drawPixel(x1+1,y2-1);
1a00137e:	f107 3aff 	add.w	sl, r7, #4294967295	; 0xffffffff
1a001382:	4651      	mov	r1, sl
1a001384:	4658      	mov	r0, fp
1a001386:	f7ff fe7d 	bl	1a001084 <drawPixel>
		drawPixel(x2-1,y2-1);
1a00138a:	4651      	mov	r1, sl
1a00138c:	9801      	ldr	r0, [sp, #4]
1a00138e:	f7ff fe79 	bl	1a001084 <drawPixel>
		drawHLine(x1+2, y1, x2-x1-4);
1a001392:	f104 0a02 	add.w	sl, r4, #2
1a001396:	f1a8 0804 	sub.w	r8, r8, #4
1a00139a:	4642      	mov	r2, r8
1a00139c:	4629      	mov	r1, r5
1a00139e:	4650      	mov	r0, sl
1a0013a0:	f7ff fd86 	bl	1a000eb0 <drawHLine>
		drawHLine(x1+2, y2, x2-x1-4);
1a0013a4:	4642      	mov	r2, r8
1a0013a6:	4639      	mov	r1, r7
1a0013a8:	4650      	mov	r0, sl
1a0013aa:	f7ff fd81 	bl	1a000eb0 <drawHLine>
		drawVLine(x1, y1+2, y2-y1-4);
1a0013ae:	3502      	adds	r5, #2
1a0013b0:	f1a9 0904 	sub.w	r9, r9, #4
1a0013b4:	464a      	mov	r2, r9
1a0013b6:	4629      	mov	r1, r5
1a0013b8:	4620      	mov	r0, r4
1a0013ba:	f7ff fdb3 	bl	1a000f24 <drawVLine>
		drawVLine(x2, y1+2, y2-y1-4);
1a0013be:	464a      	mov	r2, r9
1a0013c0:	4629      	mov	r1, r5
1a0013c2:	4630      	mov	r0, r6
1a0013c4:	f7ff fdae 	bl	1a000f24 <drawVLine>
}
1a0013c8:	e7c8      	b.n	1a00135c <drawRoundRect+0x34>
1a0013ca:	Address 0x000000001a0013ca is out of bounds.


1a0013cc <drawCircle>:
		}
	}
}

//Para dibujar un circulo
void drawCircle(int x, int y, int radius){
1a0013cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0013d0:	b085      	sub	sp, #20
1a0013d2:	4683      	mov	fp, r0
1a0013d4:	4688      	mov	r8, r1
1a0013d6:	4616      	mov	r6, r2
	int f = 1 - radius;
1a0013d8:	f1c2 0a01 	rsb	sl, r2, #1
	int ddF_x = 1;
	int ddF_y = -2 * radius;
1a0013dc:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
1a0013e0:	0053      	lsls	r3, r2, #1
1a0013e2:	9303      	str	r3, [sp, #12]
	int x1 = 0;
	int y1 = radius;

	//cbi(P_CS, B_CS);
	gpioWrite(CS, OFF);
1a0013e4:	2100      	movs	r1, #0
1a0013e6:	4b5d      	ldr	r3, [pc, #372]	; (1a00155c <drawCircle+0x190>)
1a0013e8:	f993 0000 	ldrsb.w	r0, [r3]
1a0013ec:	f001 feb4 	bl	1a003158 <gpioWrite>
	setXY(x, y + radius, x, y + radius);
1a0013f0:	eb06 0108 	add.w	r1, r6, r8
1a0013f4:	460b      	mov	r3, r1
1a0013f6:	465a      	mov	r2, fp
1a0013f8:	4658      	mov	r0, fp
1a0013fa:	f7ff fb4b 	bl	1a000a94 <setXY>
	LCD_Write_DATAb(fch,fcl);
1a0013fe:	4d58      	ldr	r5, [pc, #352]	; (1a001560 <drawCircle+0x194>)
1a001400:	4c58      	ldr	r4, [pc, #352]	; (1a001564 <drawCircle+0x198>)
1a001402:	7829      	ldrb	r1, [r5, #0]
1a001404:	7820      	ldrb	r0, [r4, #0]
1a001406:	f7ff f92f 	bl	1a000668 <LCD_Write_DATAb>
	setXY(x, y - radius, x, y - radius);
1a00140a:	eba8 0106 	sub.w	r1, r8, r6
1a00140e:	460b      	mov	r3, r1
1a001410:	465a      	mov	r2, fp
1a001412:	4658      	mov	r0, fp
1a001414:	f7ff fb3e 	bl	1a000a94 <setXY>
	LCD_Write_DATAb(fch,fcl);
1a001418:	7829      	ldrb	r1, [r5, #0]
1a00141a:	7820      	ldrb	r0, [r4, #0]
1a00141c:	f7ff f924 	bl	1a000668 <LCD_Write_DATAb>
	setXY(x + radius, y, x + radius, y);
1a001420:	eb06 000b 	add.w	r0, r6, fp
1a001424:	4643      	mov	r3, r8
1a001426:	4602      	mov	r2, r0
1a001428:	4641      	mov	r1, r8
1a00142a:	f7ff fb33 	bl	1a000a94 <setXY>
	LCD_Write_DATAb(fch,fcl);
1a00142e:	7829      	ldrb	r1, [r5, #0]
1a001430:	7820      	ldrb	r0, [r4, #0]
1a001432:	f7ff f919 	bl	1a000668 <LCD_Write_DATAb>
	setXY(x - radius, y, x - radius, y);
1a001436:	ebab 0006 	sub.w	r0, fp, r6
1a00143a:	4643      	mov	r3, r8
1a00143c:	4602      	mov	r2, r0
1a00143e:	4641      	mov	r1, r8
1a001440:	f7ff fb28 	bl	1a000a94 <setXY>
	LCD_Write_DATAb(fch,fcl);
1a001444:	7829      	ldrb	r1, [r5, #0]
1a001446:	7820      	ldrb	r0, [r4, #0]
1a001448:	f7ff f90e 	bl	1a000668 <LCD_Write_DATAb>
	int x1 = 0;
1a00144c:	2700      	movs	r7, #0
	int ddF_x = 1;
1a00144e:	2301      	movs	r3, #1
1a001450:	9301      	str	r3, [sp, #4]
1a001452:	f8cd 8000 	str.w	r8, [sp]

	while(x1 < y1)
1a001456:	e06b      	b.n	1a001530 <drawCircle+0x164>
		{
			y1--;
			ddF_y += 2;
			f += ddF_y;
		}
		x1++;
1a001458:	3701      	adds	r7, #1
		ddF_x += 2;
1a00145a:	9b01      	ldr	r3, [sp, #4]
1a00145c:	3302      	adds	r3, #2
1a00145e:	9301      	str	r3, [sp, #4]
		f += ddF_x;
1a001460:	449a      	add	sl, r3
		setXY(x + x1, y + y1, x + x1, y + y1);
1a001462:	eb0b 0107 	add.w	r1, fp, r7
1a001466:	4608      	mov	r0, r1
1a001468:	9b00      	ldr	r3, [sp, #0]
1a00146a:	eb06 0903 	add.w	r9, r6, r3
1a00146e:	464b      	mov	r3, r9
1a001470:	460a      	mov	r2, r1
1a001472:	4649      	mov	r1, r9
1a001474:	9002      	str	r0, [sp, #8]
1a001476:	f7ff fb0d 	bl	1a000a94 <setXY>
		LCD_Write_DATAb(fch,fcl);
1a00147a:	4d39      	ldr	r5, [pc, #228]	; (1a001560 <drawCircle+0x194>)
1a00147c:	4c39      	ldr	r4, [pc, #228]	; (1a001564 <drawCircle+0x198>)
1a00147e:	7829      	ldrb	r1, [r5, #0]
1a001480:	7820      	ldrb	r0, [r4, #0]
1a001482:	f7ff f8f1 	bl	1a000668 <LCD_Write_DATAb>
		setXY(x - x1, y + y1, x - x1, y + y1);
1a001486:	ebab 0807 	sub.w	r8, fp, r7
1a00148a:	464b      	mov	r3, r9
1a00148c:	4642      	mov	r2, r8
1a00148e:	4649      	mov	r1, r9
1a001490:	4640      	mov	r0, r8
1a001492:	f7ff faff 	bl	1a000a94 <setXY>
		LCD_Write_DATAb(fch,fcl);
1a001496:	7829      	ldrb	r1, [r5, #0]
1a001498:	7820      	ldrb	r0, [r4, #0]
1a00149a:	f7ff f8e5 	bl	1a000668 <LCD_Write_DATAb>
		setXY(x + x1, y - y1, x + x1, y - y1);
1a00149e:	9a00      	ldr	r2, [sp, #0]
1a0014a0:	eba2 0906 	sub.w	r9, r2, r6
1a0014a4:	464b      	mov	r3, r9
1a0014a6:	9802      	ldr	r0, [sp, #8]
1a0014a8:	4602      	mov	r2, r0
1a0014aa:	4649      	mov	r1, r9
1a0014ac:	f7ff faf2 	bl	1a000a94 <setXY>
		LCD_Write_DATAb(fch,fcl);
1a0014b0:	7829      	ldrb	r1, [r5, #0]
1a0014b2:	7820      	ldrb	r0, [r4, #0]
1a0014b4:	f7ff f8d8 	bl	1a000668 <LCD_Write_DATAb>
		setXY(x - x1, y - y1, x - x1, y - y1);
1a0014b8:	464b      	mov	r3, r9
1a0014ba:	4642      	mov	r2, r8
1a0014bc:	4649      	mov	r1, r9
1a0014be:	4640      	mov	r0, r8
1a0014c0:	f7ff fae8 	bl	1a000a94 <setXY>
		LCD_Write_DATAb(fch,fcl);
1a0014c4:	7829      	ldrb	r1, [r5, #0]
1a0014c6:	7820      	ldrb	r0, [r4, #0]
1a0014c8:	f7ff f8ce 	bl	1a000668 <LCD_Write_DATAb>
		setXY(x + y1, y + x1, x + y1, y + x1);
1a0014cc:	eb06 090b 	add.w	r9, r6, fp
1a0014d0:	9900      	ldr	r1, [sp, #0]
1a0014d2:	eb01 0807 	add.w	r8, r1, r7
1a0014d6:	4643      	mov	r3, r8
1a0014d8:	464a      	mov	r2, r9
1a0014da:	4641      	mov	r1, r8
1a0014dc:	4648      	mov	r0, r9
1a0014de:	f7ff fad9 	bl	1a000a94 <setXY>
		LCD_Write_DATAb(fch,fcl);
1a0014e2:	7829      	ldrb	r1, [r5, #0]
1a0014e4:	7820      	ldrb	r0, [r4, #0]
1a0014e6:	f7ff f8bf 	bl	1a000668 <LCD_Write_DATAb>
		setXY(x - y1, y + x1, x - y1, y + x1);
1a0014ea:	ebab 0206 	sub.w	r2, fp, r6
1a0014ee:	4643      	mov	r3, r8
1a0014f0:	4610      	mov	r0, r2
1a0014f2:	4641      	mov	r1, r8
1a0014f4:	9202      	str	r2, [sp, #8]
1a0014f6:	f7ff facd 	bl	1a000a94 <setXY>
		LCD_Write_DATAb(fch,fcl);
1a0014fa:	7829      	ldrb	r1, [r5, #0]
1a0014fc:	7820      	ldrb	r0, [r4, #0]
1a0014fe:	f7ff f8b3 	bl	1a000668 <LCD_Write_DATAb>
		setXY(x + y1, y - x1, x + y1, y - x1);
1a001502:	9900      	ldr	r1, [sp, #0]
1a001504:	eba1 0807 	sub.w	r8, r1, r7
1a001508:	4643      	mov	r3, r8
1a00150a:	464a      	mov	r2, r9
1a00150c:	4641      	mov	r1, r8
1a00150e:	4648      	mov	r0, r9
1a001510:	f7ff fac0 	bl	1a000a94 <setXY>
		LCD_Write_DATAb(fch,fcl);
1a001514:	7829      	ldrb	r1, [r5, #0]
1a001516:	7820      	ldrb	r0, [r4, #0]
1a001518:	f7ff f8a6 	bl	1a000668 <LCD_Write_DATAb>
		setXY(x - y1, y - x1, x - y1, y - x1);
1a00151c:	4643      	mov	r3, r8
1a00151e:	9802      	ldr	r0, [sp, #8]
1a001520:	4602      	mov	r2, r0
1a001522:	4641      	mov	r1, r8
1a001524:	f7ff fab6 	bl	1a000a94 <setXY>
		LCD_Write_DATAb(fch,fcl);
1a001528:	7829      	ldrb	r1, [r5, #0]
1a00152a:	7820      	ldrb	r0, [r4, #0]
1a00152c:	f7ff f89c 	bl	1a000668 <LCD_Write_DATAb>
	while(x1 < y1)
1a001530:	42b7      	cmp	r7, r6
1a001532:	da08      	bge.n	1a001546 <drawCircle+0x17a>
		if(f >= 0)
1a001534:	f1ba 0f00 	cmp.w	sl, #0
1a001538:	db8e      	blt.n	1a001458 <drawCircle+0x8c>
			y1--;
1a00153a:	3e01      	subs	r6, #1
			ddF_y += 2;
1a00153c:	9b03      	ldr	r3, [sp, #12]
1a00153e:	3302      	adds	r3, #2
1a001540:	9303      	str	r3, [sp, #12]
			f += ddF_y;
1a001542:	449a      	add	sl, r3
1a001544:	e788      	b.n	1a001458 <drawCircle+0x8c>
	}
	//sbi(P_CS, B_CS);
	gpioWrite(CS, ON);
1a001546:	2101      	movs	r1, #1
1a001548:	4b04      	ldr	r3, [pc, #16]	; (1a00155c <drawCircle+0x190>)
1a00154a:	f993 0000 	ldrsb.w	r0, [r3]
1a00154e:	f001 fe03 	bl	1a003158 <gpioWrite>
	clrXY();
1a001552:	f7ff fadf 	bl	1a000b14 <clrXY>
}
1a001556:	b005      	add	sp, #20
1a001558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00155c:	10000d5d 	.word	0x10000d5d
1a001560:	10000ce0 	.word	0x10000ce0
1a001564:	10000cd9 	.word	0x10000cd9

1a001568 <drawfillCircle>:

//Para dibujar un circulo relleno
void drawfillCircle(int x, int y, int radius){
1a001568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00156c:	4680      	mov	r8, r0
1a00156e:	460f      	mov	r7, r1
1a001570:	4615      	mov	r5, r2
	for(int y1=-radius; y1<=0; y1++)
1a001572:	4256      	negs	r6, r2
1a001574:	4634      	mov	r4, r6
1a001576:	e010      	b.n	1a00159a <drawfillCircle+0x32>
		for(int x1=-radius; x1<=0; x1++)
			if(x1*x1+y1*y1 <= radius*radius)
			{
				drawHLine(x+x1, y+y1, 2*(-x1));
1a001578:	eb03 0908 	add.w	r9, r3, r8
1a00157c:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
1a001580:	ea4f 0a43 	mov.w	sl, r3, lsl #1
1a001584:	4652      	mov	r2, sl
1a001586:	19e1      	adds	r1, r4, r7
1a001588:	4648      	mov	r0, r9
1a00158a:	f7ff fc91 	bl	1a000eb0 <drawHLine>
				drawHLine(x+x1, y-y1, 2*(-x1));
1a00158e:	4652      	mov	r2, sl
1a001590:	1b39      	subs	r1, r7, r4
1a001592:	4648      	mov	r0, r9
1a001594:	f7ff fc8c 	bl	1a000eb0 <drawHLine>
	for(int y1=-radius; y1<=0; y1++)
1a001598:	3401      	adds	r4, #1
1a00159a:	2c00      	cmp	r4, #0
1a00159c:	dc0c      	bgt.n	1a0015b8 <drawfillCircle+0x50>
		for(int x1=-radius; x1<=0; x1++)
1a00159e:	4633      	mov	r3, r6
1a0015a0:	2b00      	cmp	r3, #0
1a0015a2:	dcf9      	bgt.n	1a001598 <drawfillCircle+0x30>
			if(x1*x1+y1*y1 <= radius*radius)
1a0015a4:	fb04 f204 	mul.w	r2, r4, r4
1a0015a8:	fb03 2203 	mla	r2, r3, r3, r2
1a0015ac:	fb05 f105 	mul.w	r1, r5, r5
1a0015b0:	428a      	cmp	r2, r1
1a0015b2:	dde1      	ble.n	1a001578 <drawfillCircle+0x10>
		for(int x1=-radius; x1<=0; x1++)
1a0015b4:	3301      	adds	r3, #1
1a0015b6:	e7f3      	b.n	1a0015a0 <drawfillCircle+0x38>
				break;
			}
}
1a0015b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0015bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0015c0 <rotateChar>:

void rotateChar(uint8_t c, int x, int y, int pos, int deg){
1a0015c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0015c4:	ed2d 8b02 	vpush	{d8}
1a0015c8:	b08d      	sub	sp, #52	; 0x34
1a0015ca:	4604      	mov	r4, r0
1a0015cc:	910b      	str	r1, [sp, #44]	; 0x2c
1a0015ce:	4617      	mov	r7, r2
1a0015d0:	461e      	mov	r6, r3
	uint8_t i,j,ch;
	uint32_t temp;
	int newx,newy;
	double radian;
	radian=deg*0.0175;
1a0015d2:	9818      	ldr	r0, [sp, #96]	; 0x60
1a0015d4:	f003 f9cc 	bl	1a004970 <__aeabi_i2d>
1a0015d8:	a374      	add	r3, pc, #464	; (adr r3, 1a0017ac <rotateChar+0x1ec>)
1a0015da:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0015de:	f003 fa31 	bl	1a004a44 <__aeabi_dmul>
1a0015e2:	ec41 0b18 	vmov	d8, r0, r1

	//cbi(P_CS, B_CS);
	gpioWrite(CS, OFF);
1a0015e6:	2100      	movs	r1, #0
1a0015e8:	4b69      	ldr	r3, [pc, #420]	; (1a001790 <rotateChar+0x1d0>)
1a0015ea:	f993 0000 	ldrsb.w	r0, [r3]
1a0015ee:	f001 fdb3 	bl	1a003158 <gpioWrite>

	temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
1a0015f2:	4968      	ldr	r1, [pc, #416]	; (1a001794 <rotateChar+0x1d4>)
1a0015f4:	798b      	ldrb	r3, [r1, #6]
1a0015f6:	1ae4      	subs	r4, r4, r3
1a0015f8:	790b      	ldrb	r3, [r1, #4]
1a0015fa:	08da      	lsrs	r2, r3, #3
1a0015fc:	794b      	ldrb	r3, [r1, #5]
1a0015fe:	fb03 f302 	mul.w	r3, r3, r2
1a001602:	fb03 f304 	mul.w	r3, r3, r4
1a001606:	3304      	adds	r3, #4
1a001608:	930a      	str	r3, [sp, #40]	; 0x28
	for(j=0;j<cfont.y_size;j++)
1a00160a:	2300      	movs	r3, #0
1a00160c:	9308      	str	r3, [sp, #32]
1a00160e:	9709      	str	r7, [sp, #36]	; 0x24
1a001610:	e0a4      	b.n	1a00175c <rotateChar+0x19c>

				setXY(newx,newy,newx+1,newy+1);

				if((ch&(1<<(7-i)))!=0)
				{
					setPixel((fch<<8)|fcl);
1a001612:	4b61      	ldr	r3, [pc, #388]	; (1a001798 <rotateChar+0x1d8>)
1a001614:	7818      	ldrb	r0, [r3, #0]
1a001616:	4b61      	ldr	r3, [pc, #388]	; (1a00179c <rotateChar+0x1dc>)
1a001618:	781b      	ldrb	r3, [r3, #0]
1a00161a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a00161e:	f7ff fd29 	bl	1a001074 <setPixel>
			for(i=0;i<8;i++)
1a001622:	3501      	adds	r5, #1
1a001624:	b2ed      	uxtb	r5, r5
1a001626:	2d07      	cmp	r5, #7
1a001628:	d87f      	bhi.n	1a00172a <rotateChar+0x16a>
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
1a00162a:	eb05 00ca 	add.w	r0, r5, sl, lsl #3
1a00162e:	4b59      	ldr	r3, [pc, #356]	; (1a001794 <rotateChar+0x1d4>)
1a001630:	791b      	ldrb	r3, [r3, #4]
1a001632:	fb0b 0003 	mla	r0, fp, r3, r0
1a001636:	f003 f99b 	bl	1a004970 <__aeabi_i2d>
1a00163a:	4606      	mov	r6, r0
1a00163c:	460f      	mov	r7, r1
1a00163e:	eeb0 0a48 	vmov.f32	s0, s16
1a001642:	eef0 0a68 	vmov.f32	s1, s17
1a001646:	f001 fe23 	bl	1a003290 <cos>
1a00164a:	ec54 3b10 	vmov	r3, r4, d0
1a00164e:	ed8d 0b04 	vstr	d0, [sp, #16]
1a001652:	ee10 2a10 	vmov	r2, s0
1a001656:	4623      	mov	r3, r4
1a001658:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a00165c:	4630      	mov	r0, r6
1a00165e:	4639      	mov	r1, r7
1a001660:	f003 f9f0 	bl	1a004a44 <__aeabi_dmul>
1a001664:	4606      	mov	r6, r0
1a001666:	460f      	mov	r7, r1
1a001668:	9808      	ldr	r0, [sp, #32]
1a00166a:	f003 f981 	bl	1a004970 <__aeabi_i2d>
1a00166e:	e9cd 0100 	strd	r0, r1, [sp]
1a001672:	eeb0 0a48 	vmov.f32	s0, s16
1a001676:	eef0 0a68 	vmov.f32	s1, s17
1a00167a:	f001 fe69 	bl	1a003350 <sin>
1a00167e:	ec54 3b10 	vmov	r3, r4, d0
1a001682:	ed8d 0b06 	vstr	d0, [sp, #24]
1a001686:	ee10 2a10 	vmov	r2, s0
1a00168a:	4623      	mov	r3, r4
1a00168c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a001690:	f003 f9d8 	bl	1a004a44 <__aeabi_dmul>
1a001694:	4602      	mov	r2, r0
1a001696:	460b      	mov	r3, r1
1a001698:	4630      	mov	r0, r6
1a00169a:	4639      	mov	r1, r7
1a00169c:	f003 f81a 	bl	1a0046d4 <__aeabi_dsub>
1a0016a0:	4606      	mov	r6, r0
1a0016a2:	460f      	mov	r7, r1
1a0016a4:	4648      	mov	r0, r9
1a0016a6:	f003 f963 	bl	1a004970 <__aeabi_i2d>
1a0016aa:	4632      	mov	r2, r6
1a0016ac:	463b      	mov	r3, r7
1a0016ae:	f003 f813 	bl	1a0046d8 <__adddf3>
1a0016b2:	f003 fc61 	bl	1a004f78 <__aeabi_d2iz>
1a0016b6:	4604      	mov	r4, r0
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
1a0016b8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0016bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0016c0:	f003 f9c0 	bl	1a004a44 <__aeabi_dmul>
1a0016c4:	4606      	mov	r6, r0
1a0016c6:	460f      	mov	r7, r1
1a0016c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a0016cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a0016d0:	f003 f9b8 	bl	1a004a44 <__aeabi_dmul>
1a0016d4:	4602      	mov	r2, r0
1a0016d6:	460b      	mov	r3, r1
1a0016d8:	4630      	mov	r0, r6
1a0016da:	4639      	mov	r1, r7
1a0016dc:	f002 fffc 	bl	1a0046d8 <__adddf3>
1a0016e0:	4606      	mov	r6, r0
1a0016e2:	460f      	mov	r7, r1
1a0016e4:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0016e6:	f003 f943 	bl	1a004970 <__aeabi_i2d>
1a0016ea:	4632      	mov	r2, r6
1a0016ec:	463b      	mov	r3, r7
1a0016ee:	f002 fff3 	bl	1a0046d8 <__adddf3>
1a0016f2:	f003 fc41 	bl	1a004f78 <__aeabi_d2iz>
1a0016f6:	4601      	mov	r1, r0
				setXY(newx,newy,newx+1,newy+1);
1a0016f8:	1c43      	adds	r3, r0, #1
1a0016fa:	1c62      	adds	r2, r4, #1
1a0016fc:	4620      	mov	r0, r4
1a0016fe:	f7ff f9c9 	bl	1a000a94 <setXY>
				if((ch&(1<<(7-i)))!=0)
1a001702:	f1c5 0307 	rsb	r3, r5, #7
1a001706:	fa48 f303 	asr.w	r3, r8, r3
1a00170a:	f013 0f01 	tst.w	r3, #1
1a00170e:	d180      	bne.n	1a001612 <rotateChar+0x52>
				}
				else
				{
					if (!_transparent)
1a001710:	4b23      	ldr	r3, [pc, #140]	; (1a0017a0 <rotateChar+0x1e0>)
1a001712:	781b      	ldrb	r3, [r3, #0]
1a001714:	2b00      	cmp	r3, #0
1a001716:	d184      	bne.n	1a001622 <rotateChar+0x62>
						setPixel((bch<<8)|bcl);
1a001718:	4b22      	ldr	r3, [pc, #136]	; (1a0017a4 <rotateChar+0x1e4>)
1a00171a:	7818      	ldrb	r0, [r3, #0]
1a00171c:	4b22      	ldr	r3, [pc, #136]	; (1a0017a8 <rotateChar+0x1e8>)
1a00171e:	781b      	ldrb	r3, [r3, #0]
1a001720:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a001724:	f7ff fca6 	bl	1a001074 <setPixel>
1a001728:	e77b      	b.n	1a001622 <rotateChar+0x62>
1a00172a:	464f      	mov	r7, r9
		for (int zz=0; zz<(cfont.x_size/8); zz++)
1a00172c:	f10a 0a01 	add.w	sl, sl, #1
1a001730:	4b18      	ldr	r3, [pc, #96]	; (1a001794 <rotateChar+0x1d4>)
1a001732:	791b      	ldrb	r3, [r3, #4]
1a001734:	08db      	lsrs	r3, r3, #3
1a001736:	4553      	cmp	r3, sl
1a001738:	dd08      	ble.n	1a00174c <rotateChar+0x18c>
			ch=pgm_read_byte(&cfont.font[temp+zz]);
1a00173a:	4b16      	ldr	r3, [pc, #88]	; (1a001794 <rotateChar+0x1d4>)
1a00173c:	681a      	ldr	r2, [r3, #0]
1a00173e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a001740:	4453      	add	r3, sl
1a001742:	5cd6      	ldrb	r6, [r2, r3]
			for(i=0;i<8;i++)
1a001744:	2500      	movs	r5, #0
1a001746:	46b0      	mov	r8, r6
1a001748:	46b9      	mov	r9, r7
1a00174a:	e76c      	b.n	1a001626 <rotateChar+0x66>
1a00174c:	465e      	mov	r6, fp
				}
			}
		}
		temp+=(cfont.x_size/8);
1a00174e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a001750:	441a      	add	r2, r3
1a001752:	920a      	str	r2, [sp, #40]	; 0x28
	for(j=0;j<cfont.y_size;j++)
1a001754:	9b08      	ldr	r3, [sp, #32]
1a001756:	3301      	adds	r3, #1
1a001758:	b2db      	uxtb	r3, r3
1a00175a:	9308      	str	r3, [sp, #32]
1a00175c:	4b0d      	ldr	r3, [pc, #52]	; (1a001794 <rotateChar+0x1d4>)
1a00175e:	795b      	ldrb	r3, [r3, #5]
1a001760:	9a08      	ldr	r2, [sp, #32]
1a001762:	4293      	cmp	r3, r2
1a001764:	d905      	bls.n	1a001772 <rotateChar+0x1b2>
		for (int zz=0; zz<(cfont.x_size/8); zz++)
1a001766:	f04f 0b00 	mov.w	fp, #0
1a00176a:	46da      	mov	sl, fp
1a00176c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1a00176e:	46b3      	mov	fp, r6
1a001770:	e7de      	b.n	1a001730 <rotateChar+0x170>
	}
	//sbi(P_CS, B_CS);
	gpioWrite(CS, ON);
1a001772:	2101      	movs	r1, #1
1a001774:	4b06      	ldr	r3, [pc, #24]	; (1a001790 <rotateChar+0x1d0>)
1a001776:	f993 0000 	ldrsb.w	r0, [r3]
1a00177a:	f001 fced 	bl	1a003158 <gpioWrite>

	clrXY();
1a00177e:	f7ff f9c9 	bl	1a000b14 <clrXY>
}
1a001782:	b00d      	add	sp, #52	; 0x34
1a001784:	ecbd 8b02 	vpop	{d8}
1a001788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00178c:	f3af 8000 	nop.w
1a001790:	10000d5d 	.word	0x10000d5d
1a001794:	10000d3c 	.word	0x10000d3c
1a001798:	10000cd9 	.word	0x10000cd9
1a00179c:	10000ce0 	.word	0x10000ce0
1a0017a0:	10000d29 	.word	0x10000d29
1a0017a4:	10000d28 	.word	0x10000d28
1a0017a8:	10000d1d 	.word	0x10000d1d
1a0017ac:	1eb851ec 	.word	0x1eb851ec
1a0017b0:	3f91eb85 	.word	0x3f91eb85

1a0017b4 <print>:

//para imprimir un string en x,y y rotarlo
void print(char *st, int x, int y, int deg){
1a0017b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0017b8:	b083      	sub	sp, #12
1a0017ba:	4604      	mov	r4, r0
1a0017bc:	460e      	mov	r6, r1
1a0017be:	4691      	mov	r9, r2
1a0017c0:	461f      	mov	r7, r3
	int stl, i;

	stl = strlen(st);
1a0017c2:	f004 f821 	bl	1a005808 <strlen>
1a0017c6:	4680      	mov	r8, r0

	if (orient==PORTRAIT)
1a0017c8:	4b2b      	ldr	r3, [pc, #172]	; (1a001878 <print+0xc4>)
1a0017ca:	781a      	ldrb	r2, [r3, #0]
1a0017cc:	4b2b      	ldr	r3, [pc, #172]	; (1a00187c <print+0xc8>)
1a0017ce:	781b      	ldrb	r3, [r3, #0]
1a0017d0:	429a      	cmp	r2, r3
1a0017d2:	d009      	beq.n	1a0017e8 <print+0x34>
	if (x==CENTER)
		x=((disp_x_size+1)-(stl*cfont.x_size))/2;
	}
	else
	{
	if (x==RIGHT)
1a0017d4:	f242 730f 	movw	r3, #9999	; 0x270f
1a0017d8:	429e      	cmp	r6, r3
1a0017da:	d020      	beq.n	1a00181e <print+0x6a>
		x=(disp_y_size+1)-(stl*cfont.x_size);
	if (x==CENTER)
1a0017dc:	f242 730e 	movw	r3, #9998	; 0x270e
1a0017e0:	429e      	cmp	r6, r3
1a0017e2:	d024      	beq.n	1a00182e <print+0x7a>
		x=((disp_y_size+1)-(stl*cfont.x_size))/2;
	}

	for (i=0; i<stl; i++)
1a0017e4:	2500      	movs	r5, #0
1a0017e6:	e036      	b.n	1a001856 <print+0xa2>
	if (x==RIGHT)
1a0017e8:	f242 730f 	movw	r3, #9999	; 0x270f
1a0017ec:	429e      	cmp	r6, r3
1a0017ee:	d00e      	beq.n	1a00180e <print+0x5a>
	if (x==CENTER)
1a0017f0:	f242 730e 	movw	r3, #9998	; 0x270e
1a0017f4:	429e      	cmp	r6, r3
1a0017f6:	d1f5      	bne.n	1a0017e4 <print+0x30>
		x=((disp_x_size+1)-(stl*cfont.x_size))/2;
1a0017f8:	4b21      	ldr	r3, [pc, #132]	; (1a001880 <print+0xcc>)
1a0017fa:	681a      	ldr	r2, [r3, #0]
1a0017fc:	3201      	adds	r2, #1
1a0017fe:	4b21      	ldr	r3, [pc, #132]	; (1a001884 <print+0xd0>)
1a001800:	791b      	ldrb	r3, [r3, #4]
1a001802:	fb00 2013 	mls	r0, r0, r3, r2
1a001806:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
1a00180a:	1046      	asrs	r6, r0, #1
1a00180c:	e7ea      	b.n	1a0017e4 <print+0x30>
		x=(disp_x_size+1)-(stl*cfont.x_size);
1a00180e:	4b1c      	ldr	r3, [pc, #112]	; (1a001880 <print+0xcc>)
1a001810:	681b      	ldr	r3, [r3, #0]
1a001812:	3301      	adds	r3, #1
1a001814:	4a1b      	ldr	r2, [pc, #108]	; (1a001884 <print+0xd0>)
1a001816:	7916      	ldrb	r6, [r2, #4]
1a001818:	fb00 3616 	mls	r6, r0, r6, r3
1a00181c:	e7e8      	b.n	1a0017f0 <print+0x3c>
		x=(disp_y_size+1)-(stl*cfont.x_size);
1a00181e:	4b1a      	ldr	r3, [pc, #104]	; (1a001888 <print+0xd4>)
1a001820:	681b      	ldr	r3, [r3, #0]
1a001822:	3301      	adds	r3, #1
1a001824:	4a17      	ldr	r2, [pc, #92]	; (1a001884 <print+0xd0>)
1a001826:	7916      	ldrb	r6, [r2, #4]
1a001828:	fb00 3616 	mls	r6, r0, r6, r3
1a00182c:	e7d6      	b.n	1a0017dc <print+0x28>
		x=((disp_y_size+1)-(stl*cfont.x_size))/2;
1a00182e:	4b16      	ldr	r3, [pc, #88]	; (1a001888 <print+0xd4>)
1a001830:	681b      	ldr	r3, [r3, #0]
1a001832:	3301      	adds	r3, #1
1a001834:	4a13      	ldr	r2, [pc, #76]	; (1a001884 <print+0xd0>)
1a001836:	7916      	ldrb	r6, [r2, #4]
1a001838:	fb00 3016 	mls	r0, r0, r6, r3
1a00183c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
1a001840:	1046      	asrs	r6, r0, #1
1a001842:	e7cf      	b.n	1a0017e4 <print+0x30>
		if (deg==0)
			printCharAscii(*st++, x + (i*(cfont.x_size)), y);
		else
			rotateChar(*st++, x, y, i, deg);
1a001844:	f814 0b01 	ldrb.w	r0, [r4], #1
1a001848:	9700      	str	r7, [sp, #0]
1a00184a:	462b      	mov	r3, r5
1a00184c:	464a      	mov	r2, r9
1a00184e:	4631      	mov	r1, r6
1a001850:	f7ff feb6 	bl	1a0015c0 <rotateChar>
	for (i=0; i<stl; i++)
1a001854:	3501      	adds	r5, #1
1a001856:	4545      	cmp	r5, r8
1a001858:	da0b      	bge.n	1a001872 <print+0xbe>
		if (deg==0)
1a00185a:	2f00      	cmp	r7, #0
1a00185c:	d1f2      	bne.n	1a001844 <print+0x90>
			printCharAscii(*st++, x + (i*(cfont.x_size)), y);
1a00185e:	4b09      	ldr	r3, [pc, #36]	; (1a001884 <print+0xd0>)
1a001860:	7919      	ldrb	r1, [r3, #4]
1a001862:	464a      	mov	r2, r9
1a001864:	fb05 6101 	mla	r1, r5, r1, r6
1a001868:	f814 0b01 	ldrb.w	r0, [r4], #1
1a00186c:	f7ff fc30 	bl	1a0010d0 <printCharAscii>
1a001870:	e7f0      	b.n	1a001854 <print+0xa0>
}
1a001872:	b003      	add	sp, #12
1a001874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a001878:	10000bf8 	.word	0x10000bf8
1a00187c:	10000ca8 	.word	0x10000ca8
1a001880:	10000d60 	.word	0x10000d60
1a001884:	10000d3c 	.word	0x10000d3c
1a001888:	10000ce4 	.word	0x10000ce4

1a00188c <printNumI>:

//para imprimir un numero entero
void printNumI(long num, int x, int y, int length, char filler){
1a00188c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001890:	b08e      	sub	sp, #56	; 0x38
1a001892:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
	char buf[25];
	char st[27];
	bool neg=false;
	int c=0, f=0;

	if (num==0)
1a001896:	b9e8      	cbnz	r0, 1a0018d4 <printNumI+0x48>
	{
		if (length!=0)
1a001898:	b933      	cbnz	r3, 1a0018a8 <printNumI+0x1c>
			st[c]=48;
			st[c+1]=0;
		}
		else
		{
			st[0]=48;
1a00189a:	2330      	movs	r3, #48	; 0x30
1a00189c:	f88d 3000 	strb.w	r3, [sp]
			st[1]=0;
1a0018a0:	2300      	movs	r3, #0
1a0018a2:	f88d 3001 	strb.w	r3, [sp, #1]
1a0018a6:	e071      	b.n	1a00198c <printNumI+0x100>
			for (c=0; c<(length-1); c++)
1a0018a8:	2000      	movs	r0, #0
1a0018aa:	1e5c      	subs	r4, r3, #1
1a0018ac:	4284      	cmp	r4, r0
1a0018ae:	dd05      	ble.n	1a0018bc <printNumI+0x30>
				st[c]=filler;
1a0018b0:	ac0e      	add	r4, sp, #56	; 0x38
1a0018b2:	4404      	add	r4, r0
1a0018b4:	f804 7c38 	strb.w	r7, [r4, #-56]
			for (c=0; c<(length-1); c++)
1a0018b8:	3001      	adds	r0, #1
1a0018ba:	e7f6      	b.n	1a0018aa <printNumI+0x1e>
			st[c]=48;
1a0018bc:	ab0e      	add	r3, sp, #56	; 0x38
1a0018be:	4403      	add	r3, r0
1a0018c0:	2430      	movs	r4, #48	; 0x30
1a0018c2:	f803 4c38 	strb.w	r4, [r3, #-56]
			st[c+1]=0;
1a0018c6:	3001      	adds	r0, #1
1a0018c8:	ab0e      	add	r3, sp, #56	; 0x38
1a0018ca:	4418      	add	r0, r3
1a0018cc:	2300      	movs	r3, #0
1a0018ce:	f800 3c38 	strb.w	r3, [r0, #-56]
1a0018d2:	e05b      	b.n	1a00198c <printNumI+0x100>
1a0018d4:	4604      	mov	r4, r0
		}
	}
	else
	{
		if (num<0)
1a0018d6:	2800      	cmp	r0, #0
1a0018d8:	db1f      	blt.n	1a00191a <printNumI+0x8e>
	bool neg=false;
1a0018da:	f04f 0c00 	mov.w	ip, #0
1a0018de:	2500      	movs	r5, #0
		{
			neg=true;
			num=-num;
		}

		while (num>0)
1a0018e0:	2c00      	cmp	r4, #0
1a0018e2:	dd1e      	ble.n	1a001922 <printNumI+0x96>
		{
			buf[c]=48+(num % 10);
1a0018e4:	4e2d      	ldr	r6, [pc, #180]	; (1a00199c <printNumI+0x110>)
1a0018e6:	fb86 0e04 	smull	r0, lr, r6, r4
1a0018ea:	17e0      	asrs	r0, r4, #31
1a0018ec:	ebc0 00ae 	rsb	r0, r0, lr, asr #2
1a0018f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0018f4:	ea4f 0e40 	mov.w	lr, r0, lsl #1
1a0018f8:	eba4 000e 	sub.w	r0, r4, lr
1a0018fc:	f100 0830 	add.w	r8, r0, #48	; 0x30
1a001900:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
1a001904:	44ae      	add	lr, r5
1a001906:	f80e 8c1c 	strb.w	r8, [lr, #-28]
			c++;
1a00190a:	3501      	adds	r5, #1
			num=(num-(num % 10))/10;
1a00190c:	1a20      	subs	r0, r4, r0
1a00190e:	fb86 6400 	smull	r6, r4, r6, r0
1a001912:	17c0      	asrs	r0, r0, #31
1a001914:	ebc0 04a4 	rsb	r4, r0, r4, asr #2
1a001918:	e7e2      	b.n	1a0018e0 <printNumI+0x54>
			num=-num;
1a00191a:	4244      	negs	r4, r0
			neg=true;
1a00191c:	f04f 0c01 	mov.w	ip, #1
1a001920:	e7dd      	b.n	1a0018de <printNumI+0x52>
		}
		buf[c]=0;
1a001922:	2400      	movs	r4, #0
1a001924:	a80e      	add	r0, sp, #56	; 0x38
1a001926:	4428      	add	r0, r5
1a001928:	f800 4c1c 	strb.w	r4, [r0, #-28]

		if (neg)
1a00192c:	f1bc 0f00 	cmp.w	ip, #0
1a001930:	d002      	beq.n	1a001938 <printNumI+0xac>
		{
			st[0]=45;
1a001932:	202d      	movs	r0, #45	; 0x2d
1a001934:	f88d 0000 	strb.w	r0, [sp]
		}

		if (length>(c+neg))
1a001938:	4666      	mov	r6, ip
1a00193a:	44ac      	add	ip, r5
1a00193c:	459c      	cmp	ip, r3
1a00193e:	db1d      	blt.n	1a00197c <printNumI+0xf0>
	int c=0, f=0;
1a001940:	2400      	movs	r4, #0
				st[i+neg]=filler;
				f++;
			}
		}

		for (int i=0; i<c; i++)
1a001942:	2700      	movs	r7, #0
1a001944:	42bd      	cmp	r5, r7
1a001946:	dd1b      	ble.n	1a001980 <printNumI+0xf4>
		{
			st[i+neg+f]=buf[c-i-1];
1a001948:	1be8      	subs	r0, r5, r7
1a00194a:	3801      	subs	r0, #1
1a00194c:	19f3      	adds	r3, r6, r7
1a00194e:	4423      	add	r3, r4
1a001950:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
1a001954:	4470      	add	r0, lr
1a001956:	f810 0c1c 	ldrb.w	r0, [r0, #-28]
1a00195a:	4473      	add	r3, lr
1a00195c:	f803 0c38 	strb.w	r0, [r3, #-56]
		for (int i=0; i<c; i++)
1a001960:	3701      	adds	r7, #1
1a001962:	e7ef      	b.n	1a001944 <printNumI+0xb8>
				st[i+neg]=filler;
1a001964:	1930      	adds	r0, r6, r4
1a001966:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
1a00196a:	4470      	add	r0, lr
1a00196c:	f800 7c38 	strb.w	r7, [r0, #-56]
				f++;
1a001970:	3401      	adds	r4, #1
			for (int i=0; i<(length-c-neg); i++)
1a001972:	1b58      	subs	r0, r3, r5
1a001974:	1b80      	subs	r0, r0, r6
1a001976:	42a0      	cmp	r0, r4
1a001978:	dcf4      	bgt.n	1a001964 <printNumI+0xd8>
1a00197a:	e7e2      	b.n	1a001942 <printNumI+0xb6>
	int c=0, f=0;
1a00197c:	2400      	movs	r4, #0
1a00197e:	e7f8      	b.n	1a001972 <printNumI+0xe6>
		}
		st[c+neg+f]=0;
1a001980:	4464      	add	r4, ip
1a001982:	ab0e      	add	r3, sp, #56	; 0x38
1a001984:	441c      	add	r4, r3
1a001986:	2300      	movs	r3, #0
1a001988:	f804 3c38 	strb.w	r3, [r4, #-56]

	}

	print(st,x,y,0);
1a00198c:	2300      	movs	r3, #0
1a00198e:	4668      	mov	r0, sp
1a001990:	f7ff ff10 	bl	1a0017b4 <print>
}
1a001994:	b00e      	add	sp, #56	; 0x38
1a001996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00199a:	bf00      	nop
1a00199c:	66666667 	.word	0x66666667

1a0019a0 <_convert_float>:

	print(st,x,y,0);
}

void _convert_float(char *buf, double num, int width, uint8_t prec)
{
1a0019a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0019a4:	b086      	sub	sp, #24
1a0019a6:	4680      	mov	r8, r0
1a0019a8:	ec57 6b10 	vmov	r6, r7, d0
	char format[10];
	char formato[10]="%d.%0";
1a0019ac:	4b23      	ldr	r3, [pc, #140]	; (1a001a3c <_convert_float+0x9c>)
1a0019ae:	e893 0003 	ldmia.w	r3, {r0, r1}
1a0019b2:	9003      	str	r0, [sp, #12]
1a0019b4:	f8ad 1010 	strh.w	r1, [sp, #16]
1a0019b8:	2400      	movs	r4, #0
1a0019ba:	f8cd 4012 	str.w	r4, [sp, #18]
	char formatob[10]="u";
1a0019be:	2375      	movs	r3, #117	; 0x75
1a0019c0:	9300      	str	r3, [sp, #0]
1a0019c2:	9401      	str	r4, [sp, #4]
1a0019c4:	f8ad 4008 	strh.w	r4, [sp, #8]
	int decimales;
	int i;

	sprintf(formatob,"%d",prec);
1a0019c8:	4615      	mov	r5, r2
1a0019ca:	491d      	ldr	r1, [pc, #116]	; (1a001a40 <_convert_float+0xa0>)
1a0019cc:	4668      	mov	r0, sp
1a0019ce:	f003 feeb 	bl	1a0057a8 <siprintf>
	i=0;
1a0019d2:	4623      	mov	r3, r4
	decimales=1;
1a0019d4:	2401      	movs	r4, #1
	while(i!=prec){
1a0019d6:	429d      	cmp	r5, r3
1a0019d8:	d004      	beq.n	1a0019e4 <_convert_float+0x44>
		decimales=(10*decimales);
1a0019da:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0019de:	0054      	lsls	r4, r2, #1
		i++;
1a0019e0:	3301      	adds	r3, #1
1a0019e2:	e7f8      	b.n	1a0019d6 <_convert_float+0x36>
	}
	strcat (formatob, "u");
1a0019e4:	4668      	mov	r0, sp
1a0019e6:	f003 ff0f 	bl	1a005808 <strlen>
1a0019ea:	4b16      	ldr	r3, [pc, #88]	; (1a001a44 <_convert_float+0xa4>)
1a0019ec:	881b      	ldrh	r3, [r3, #0]
1a0019ee:	f82d 3000 	strh.w	r3, [sp, r0]
	strcat (formato, formatob);
1a0019f2:	4669      	mov	r1, sp
1a0019f4:	a803      	add	r0, sp, #12
1a0019f6:	f003 fef7 	bl	1a0057e8 <strcat>
	sprintf(buf,(formato), (int) num, (int) ((num - (int) num ) * decimales) );
1a0019fa:	4630      	mov	r0, r6
1a0019fc:	4639      	mov	r1, r7
1a0019fe:	f003 fabb 	bl	1a004f78 <__aeabi_d2iz>
1a001a02:	4605      	mov	r5, r0
1a001a04:	f002 ffb4 	bl	1a004970 <__aeabi_i2d>
1a001a08:	4602      	mov	r2, r0
1a001a0a:	460b      	mov	r3, r1
1a001a0c:	4630      	mov	r0, r6
1a001a0e:	4639      	mov	r1, r7
1a001a10:	f002 fe60 	bl	1a0046d4 <__aeabi_dsub>
1a001a14:	4606      	mov	r6, r0
1a001a16:	460f      	mov	r7, r1
1a001a18:	4620      	mov	r0, r4
1a001a1a:	f002 ffa9 	bl	1a004970 <__aeabi_i2d>
1a001a1e:	4632      	mov	r2, r6
1a001a20:	463b      	mov	r3, r7
1a001a22:	f003 f80f 	bl	1a004a44 <__aeabi_dmul>
1a001a26:	f003 faa7 	bl	1a004f78 <__aeabi_d2iz>
1a001a2a:	4603      	mov	r3, r0
1a001a2c:	462a      	mov	r2, r5
1a001a2e:	a903      	add	r1, sp, #12
1a001a30:	4640      	mov	r0, r8
1a001a32:	f003 feb9 	bl	1a0057a8 <siprintf>

}
1a001a36:	b006      	add	sp, #24
1a001a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001a3c:	1a005d08 	.word	0x1a005d08
1a001a40:	1a005d14 	.word	0x1a005d14
1a001a44:	1a005d18 	.word	0x1a005d18

1a001a48 <printNumF>:
void printNumF(double num, uint8_t dec, int x, int y, char divider, int length, char filler){
1a001a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001a4c:	ed2d 8b02 	vpush	{d8}
1a001a50:	b089      	sub	sp, #36	; 0x24
1a001a52:	eeb0 8a40 	vmov.f32	s16, s0
1a001a56:	eef0 8a60 	vmov.f32	s17, s1
1a001a5a:	460d      	mov	r5, r1
1a001a5c:	4616      	mov	r6, r2
1a001a5e:	461f      	mov	r7, r3
1a001a60:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
	if (dec<1)
1a001a64:	b128      	cbz	r0, 1a001a72 <printNumF+0x2a>
1a001a66:	4681      	mov	r9, r0
	else if (dec>5)
1a001a68:	2805      	cmp	r0, #5
1a001a6a:	d904      	bls.n	1a001a76 <printNumF+0x2e>
		dec=5;
1a001a6c:	f04f 0905 	mov.w	r9, #5
1a001a70:	e001      	b.n	1a001a76 <printNumF+0x2e>
		dec=1;
1a001a72:	f04f 0901 	mov.w	r9, #1
	if (num<0)
1a001a76:	2200      	movs	r2, #0
1a001a78:	2300      	movs	r3, #0
1a001a7a:	ec51 0b18 	vmov	r0, r1, d8
1a001a7e:	f003 fa53 	bl	1a004f28 <__aeabi_dcmplt>
1a001a82:	b970      	cbnz	r0, 1a001aa2 <printNumF+0x5a>
	bool neg=false;
1a001a84:	f04f 0800 	mov.w	r8, #0
	_convert_float(st, num, length, dec);
1a001a88:	464a      	mov	r2, r9
1a001a8a:	9912      	ldr	r1, [sp, #72]	; 0x48
1a001a8c:	eeb0 0a48 	vmov.f32	s0, s16
1a001a90:	eef0 0a68 	vmov.f32	s1, s17
1a001a94:	a801      	add	r0, sp, #4
1a001a96:	f7ff ff83 	bl	1a0019a0 <_convert_float>
	if (divider != '.')
1a001a9a:	2f2e      	cmp	r7, #46	; 0x2e
1a001a9c:	d012      	beq.n	1a001ac4 <printNumF+0x7c>
		for (int i=0; i<sizeof(st); i++)
1a001a9e:	2300      	movs	r3, #0
1a001aa0:	e003      	b.n	1a001aaa <printNumF+0x62>
		neg = true;
1a001aa2:	f04f 0801 	mov.w	r8, #1
1a001aa6:	e7ef      	b.n	1a001a88 <printNumF+0x40>
		for (int i=0; i<sizeof(st); i++)
1a001aa8:	3301      	adds	r3, #1
1a001aaa:	2b1a      	cmp	r3, #26
1a001aac:	d80a      	bhi.n	1a001ac4 <printNumF+0x7c>
			if (st[i]=='.')
1a001aae:	aa08      	add	r2, sp, #32
1a001ab0:	441a      	add	r2, r3
1a001ab2:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
1a001ab6:	2a2e      	cmp	r2, #46	; 0x2e
1a001ab8:	d1f6      	bne.n	1a001aa8 <printNumF+0x60>
				st[i]=divider;
1a001aba:	aa08      	add	r2, sp, #32
1a001abc:	441a      	add	r2, r3
1a001abe:	f802 7c1c 	strb.w	r7, [r2, #-28]
1a001ac2:	e7f1      	b.n	1a001aa8 <printNumF+0x60>
	if (filler != ' ')
1a001ac4:	2c20      	cmp	r4, #32
1a001ac6:	d027      	beq.n	1a001b18 <printNumF+0xd0>
		if (neg)
1a001ac8:	f1b8 0f00 	cmp.w	r8, #0
1a001acc:	d022      	beq.n	1a001b14 <printNumF+0xcc>
			st[0]='-';
1a001ace:	232d      	movs	r3, #45	; 0x2d
1a001ad0:	f88d 3004 	strb.w	r3, [sp, #4]
			for (int i=1; i<sizeof(st); i++)
1a001ad4:	2301      	movs	r3, #1
1a001ad6:	e004      	b.n	1a001ae2 <printNumF+0x9a>
					st[i]=filler;
1a001ad8:	aa08      	add	r2, sp, #32
1a001ada:	441a      	add	r2, r3
1a001adc:	f802 4c1c 	strb.w	r4, [r2, #-28]
			for (int i=1; i<sizeof(st); i++)
1a001ae0:	3301      	adds	r3, #1
1a001ae2:	2b1a      	cmp	r3, #26
1a001ae4:	d818      	bhi.n	1a001b18 <printNumF+0xd0>
				if ((st[i]==' ') || (st[i]=='-'))
1a001ae6:	aa08      	add	r2, sp, #32
1a001ae8:	441a      	add	r2, r3
1a001aea:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
1a001aee:	2a20      	cmp	r2, #32
1a001af0:	d0f2      	beq.n	1a001ad8 <printNumF+0x90>
1a001af2:	2a2d      	cmp	r2, #45	; 0x2d
1a001af4:	d1f4      	bne.n	1a001ae0 <printNumF+0x98>
1a001af6:	e7ef      	b.n	1a001ad8 <printNumF+0x90>
			for (int i=0; i<sizeof(st); i++)
1a001af8:	3301      	adds	r3, #1
1a001afa:	2b1a      	cmp	r3, #26
1a001afc:	d80c      	bhi.n	1a001b18 <printNumF+0xd0>
				if (st[i]==' ')
1a001afe:	aa08      	add	r2, sp, #32
1a001b00:	441a      	add	r2, r3
1a001b02:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
1a001b06:	2a20      	cmp	r2, #32
1a001b08:	d1f6      	bne.n	1a001af8 <printNumF+0xb0>
					st[i]=filler;
1a001b0a:	aa08      	add	r2, sp, #32
1a001b0c:	441a      	add	r2, r3
1a001b0e:	f802 4c1c 	strb.w	r4, [r2, #-28]
1a001b12:	e7f1      	b.n	1a001af8 <printNumF+0xb0>
			for (int i=0; i<sizeof(st); i++)
1a001b14:	2300      	movs	r3, #0
1a001b16:	e7f0      	b.n	1a001afa <printNumF+0xb2>
	print(st,x,y,0);
1a001b18:	2300      	movs	r3, #0
1a001b1a:	4632      	mov	r2, r6
1a001b1c:	4629      	mov	r1, r5
1a001b1e:	a801      	add	r0, sp, #4
1a001b20:	f7ff fe48 	bl	1a0017b4 <print>
}
1a001b24:	b009      	add	sp, #36	; 0x24
1a001b26:	ecbd 8b02 	vpop	{d8}
1a001b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a001b2e:	Address 0x000000001a001b2e is out of bounds.


1a001b30 <main>:
short ResV = 480;

float valor;

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main(void) {
1a001b30:	b500      	push	{lr}
1a001b32:	b083      	sub	sp, #12
	// ---------- CONFIGURACIONES ------------------------------

	// Inicializar y configurar la plataforma
	boardConfig();
1a001b34:	f001 fb54 	bl	1a0031e0 <boardInit>
	inicio();		//inicializacion
1a001b38:	f000 f8da 	bl	1a001cf0 <inicio>

	/*configura lcd y selecciona el modelo*/
	Conflcd(CTE70, 38, 39, 40, 41);	//configura RS, WR, CS y rest pero no se usan por ahora vienen por defecto
1a001b3c:	2329      	movs	r3, #41	; 0x29
1a001b3e:	9300      	str	r3, [sp, #0]
1a001b40:	2328      	movs	r3, #40	; 0x28
1a001b42:	2227      	movs	r2, #39	; 0x27
1a001b44:	2126      	movs	r1, #38	; 0x26
1a001b46:	4864      	ldr	r0, [pc, #400]	; (1a001cd8 <main+0x1a8>)
1a001b48:	6800      	ldr	r0, [r0, #0]
1a001b4a:	f7fe fbd9 	bl	1a000300 <Conflcd>
	inicioLCD(LANDSCAPE); //inicializa LCD
1a001b4e:	4b63      	ldr	r3, [pc, #396]	; (1a001cdc <main+0x1ac>)
1a001b50:	7818      	ldrb	r0, [r3, #0]
1a001b52:	f7ff f967 	bl	1a000e24 <inicioLCD>
	setFont(BigFont); //configura letra pantalla
1a001b56:	4862      	ldr	r0, [pc, #392]	; (1a001ce0 <main+0x1b0>)
1a001b58:	f7ff f856 	bl	1a000c08 <setFont>
	clrScr();  //borra lcd
1a001b5c:	f7fe fffc 	bl	1a000b58 <clrScr>

	/* Retardo bloqueante durante 100ms */

	delay(1000);
1a001b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001b64:	2100      	movs	r1, #0
1a001b66:	f001 fb75 	bl	1a003254 <delay>
	valor=3.3/2;
1a001b6a:	4b5e      	ldr	r3, [pc, #376]	; (1a001ce4 <main+0x1b4>)
1a001b6c:	4a5e      	ldr	r2, [pc, #376]	; (1a001ce8 <main+0x1b8>)
1a001b6e:	601a      	str	r2, [r3, #0]
	// ---------- REPETIR POR SIEMPRE --------------------------
	while ( TRUE) {
		setColor(VGA_GREEN);
1a001b70:	f44f 6080 	mov.w	r0, #1024	; 0x400
1a001b74:	f7ff f932 	bl	1a000ddc <setColor>
		drawVLine(100, 100, 200);
1a001b78:	22c8      	movs	r2, #200	; 0xc8
1a001b7a:	2164      	movs	r1, #100	; 0x64
1a001b7c:	4608      	mov	r0, r1
1a001b7e:	f7ff f9d1 	bl	1a000f24 <drawVLine>
		delay(500);
1a001b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001b86:	2100      	movs	r1, #0
1a001b88:	f001 fb64 	bl	1a003254 <delay>
		drawHLine(100, 100, 400);
1a001b8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
1a001b90:	2164      	movs	r1, #100	; 0x64
1a001b92:	4608      	mov	r0, r1
1a001b94:	f7ff f98c 	bl	1a000eb0 <drawHLine>
		delay(500);
1a001b98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001b9c:	2100      	movs	r1, #0
1a001b9e:	f001 fb59 	bl	1a003254 <delay>
		setColor(VGA_WHITE);
1a001ba2:	f64f 70ff 	movw	r0, #65535	; 0xffff
1a001ba6:	f7ff f919 	bl	1a000ddc <setColor>
		drawLine(200, 200, 400, 200);
1a001baa:	23c8      	movs	r3, #200	; 0xc8
1a001bac:	f44f 72c8 	mov.w	r2, #400	; 0x190
1a001bb0:	4619      	mov	r1, r3
1a001bb2:	4618      	mov	r0, r3
1a001bb4:	f7ff f9f0 	bl	1a000f98 <drawLine>
		delay(500);
1a001bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001bbc:	2100      	movs	r1, #0
1a001bbe:	f001 fb49 	bl	1a003254 <delay>
		setColor(VGA_RED);
1a001bc2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
1a001bc6:	f7ff f909 	bl	1a000ddc <setColor>
		drawPixel(380, 470);
1a001bca:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
1a001bce:	f44f 70be 	mov.w	r0, #380	; 0x17c
1a001bd2:	f7ff fa57 	bl	1a001084 <drawPixel>
		delay(500);
1a001bd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001bda:	2100      	movs	r1, #0
1a001bdc:	f001 fb3a 	bl	1a003254 <delay>
		setFont(BigFont);
1a001be0:	483f      	ldr	r0, [pc, #252]	; (1a001ce0 <main+0x1b0>)
1a001be2:	f7ff f811 	bl	1a000c08 <setFont>
		printCharAscii(97, 300, 350);
1a001be6:	f44f 72af 	mov.w	r2, #350	; 0x15e
1a001bea:	f44f 7196 	mov.w	r1, #300	; 0x12c
1a001bee:	2061      	movs	r0, #97	; 0x61
1a001bf0:	f7ff fa6e 	bl	1a0010d0 <printCharAscii>
		delay(500);
1a001bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001bf8:	2100      	movs	r1, #0
1a001bfa:	f001 fb2b 	bl	1a003254 <delay>
		drawRectangulo(200,100,500,200);
1a001bfe:	23c8      	movs	r3, #200	; 0xc8
1a001c00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a001c04:	2164      	movs	r1, #100	; 0x64
1a001c06:	4618      	mov	r0, r3
1a001c08:	f7ff fb66 	bl	1a0012d8 <drawRectangulo>
		delay(500);
1a001c0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001c10:	2100      	movs	r1, #0
1a001c12:	f001 fb1f 	bl	1a003254 <delay>
		drawRoundRect(200,300,500,400);
1a001c16:	f44f 73c8 	mov.w	r3, #400	; 0x190
1a001c1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a001c1e:	f44f 7196 	mov.w	r1, #300	; 0x12c
1a001c22:	20c8      	movs	r0, #200	; 0xc8
1a001c24:	f7ff fb80 	bl	1a001328 <drawRoundRect>
		delay(500);
1a001c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001c2c:	2100      	movs	r1, #0
1a001c2e:	f001 fb11 	bl	1a003254 <delay>
		//setBackColor(VGA_BLUE);
		//drawfillRect(200,100,500,200);
		//delay(500);
		drawCircle(300,300,50);
1a001c32:	2232      	movs	r2, #50	; 0x32
1a001c34:	f44f 7196 	mov.w	r1, #300	; 0x12c
1a001c38:	4608      	mov	r0, r1
1a001c3a:	f7ff fbc7 	bl	1a0013cc <drawCircle>
		delay(500);
1a001c3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001c42:	2100      	movs	r1, #0
1a001c44:	f001 fb06 	bl	1a003254 <delay>
		setColor(VGA_BLUE);
1a001c48:	201f      	movs	r0, #31
1a001c4a:	f7ff f8c7 	bl	1a000ddc <setColor>
		drawfillCircle(300,300,50);
1a001c4e:	2232      	movs	r2, #50	; 0x32
1a001c50:	f44f 7196 	mov.w	r1, #300	; 0x12c
1a001c54:	4608      	mov	r0, r1
1a001c56:	f7ff fc87 	bl	1a001568 <drawfillCircle>
		delay(500);
1a001c5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001c5e:	2100      	movs	r1, #0
1a001c60:	f001 faf8 	bl	1a003254 <delay>
		print("hola",300,400,90);
1a001c64:	235a      	movs	r3, #90	; 0x5a
1a001c66:	f44f 72c8 	mov.w	r2, #400	; 0x190
1a001c6a:	f44f 7196 	mov.w	r1, #300	; 0x12c
1a001c6e:	481f      	ldr	r0, [pc, #124]	; (1a001cec <main+0x1bc>)
1a001c70:	f7ff fda0 	bl	1a0017b4 <print>
		delay(500);
1a001c74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001c78:	2100      	movs	r1, #0
1a001c7a:	f001 faeb 	bl	1a003254 <delay>
		printNumI(12,700,400,2,0);
1a001c7e:	2300      	movs	r3, #0
1a001c80:	9300      	str	r3, [sp, #0]
1a001c82:	2302      	movs	r3, #2
1a001c84:	f44f 72c8 	mov.w	r2, #400	; 0x190
1a001c88:	f44f 712f 	mov.w	r1, #700	; 0x2bc
1a001c8c:	200c      	movs	r0, #12
1a001c8e:	f7ff fdfd 	bl	1a00188c <printNumI>
		delay(500);
1a001c92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001c96:	2100      	movs	r1, #0
1a001c98:	f001 fadc 	bl	1a003254 <delay>
		printNumF(valor,4,550,400,'.',4,' ');
1a001c9c:	4b11      	ldr	r3, [pc, #68]	; (1a001ce4 <main+0x1b4>)
1a001c9e:	6818      	ldr	r0, [r3, #0]
1a001ca0:	f002 fe78 	bl	1a004994 <__aeabi_f2d>
1a001ca4:	ec41 0b10 	vmov	d0, r0, r1
1a001ca8:	2320      	movs	r3, #32
1a001caa:	9301      	str	r3, [sp, #4]
1a001cac:	2004      	movs	r0, #4
1a001cae:	9000      	str	r0, [sp, #0]
1a001cb0:	232e      	movs	r3, #46	; 0x2e
1a001cb2:	f44f 72c8 	mov.w	r2, #400	; 0x190
1a001cb6:	f240 2126 	movw	r1, #550	; 0x226
1a001cba:	f7ff fec5 	bl	1a001a48 <printNumF>
		delay(500);
1a001cbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001cc2:	2100      	movs	r1, #0
1a001cc4:	f001 fac6 	bl	1a003254 <delay>
		clrScr();
1a001cc8:	f7fe ff46 	bl	1a000b58 <clrScr>
		delay(500);
1a001ccc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001cd0:	2100      	movs	r1, #0
1a001cd2:	f001 fabf 	bl	1a003254 <delay>
1a001cd6:	e74b      	b.n	1a001b70 <main+0x40>
1a001cd8:	10000be4 	.word	0x10000be4
1a001cdc:	10000be8 	.word	0x10000be8
1a001ce0:	10000000 	.word	0x10000000
1a001ce4:	10000d10 	.word	0x10000d10
1a001ce8:	3fd33333 	.word	0x3fd33333
1a001cec:	1a005d1c 	.word	0x1a005d1c

1a001cf0 <inicio>:
// Bibliotecas
#include "sapi.h"        // <= Biblioteca sAPI
#include "inicio.h"

void inicio() {
1a001cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Inicializar UART_USB a 115200 baudios */
	uartConfig(UART_USB, 230400);
1a001cf4:	f44f 3161 	mov.w	r1, #230400	; 0x38400
1a001cf8:	2003      	movs	r0, #3
1a001cfa:	f001 f83d 	bl	1a002d78 <uartInit>
	uartConfig(UART_232, 230400);
1a001cfe:	f44f 3161 	mov.w	r1, #230400	; 0x38400
1a001d02:	2005      	movs	r0, #5
1a001d04:	f001 f838 	bl	1a002d78 <uartInit>
	/* Inicializar AnalogIO */
	adcConfig(ADC_ENABLE); /* ADC */
1a001d08:	2000      	movs	r0, #0
1a001d0a:	f001 f8d9 	bl	1a002ec0 <adcInit>
	/***configuracion de pines*/
	D0 = GPIO0;
1a001d0e:	2020      	movs	r0, #32
1a001d10:	4b58      	ldr	r3, [pc, #352]	; (1a001e74 <inicio+0x184>)
1a001d12:	7018      	strb	r0, [r3, #0]
	D1 = GPIO1;
1a001d14:	f8df b19c 	ldr.w	fp, [pc, #412]	; 1a001eb4 <inicio+0x1c4>
1a001d18:	230f      	movs	r3, #15
1a001d1a:	f88b 3000 	strb.w	r3, [fp]
	D2 = GPIO2;
1a001d1e:	f8df a198 	ldr.w	sl, [pc, #408]	; 1a001eb8 <inicio+0x1c8>
1a001d22:	231f      	movs	r3, #31
1a001d24:	f88a 3000 	strb.w	r3, [sl]
	D3 = GPIO3;
1a001d28:	f8df 9190 	ldr.w	r9, [pc, #400]	; 1a001ebc <inicio+0x1cc>
1a001d2c:	230e      	movs	r3, #14
1a001d2e:	f889 3000 	strb.w	r3, [r9]
	D4 = GPIO4;
1a001d32:	f8df 818c 	ldr.w	r8, [pc, #396]	; 1a001ec0 <inicio+0x1d0>
1a001d36:	231e      	movs	r3, #30
1a001d38:	f888 3000 	strb.w	r3, [r8]
	D5 = GPIO5;
1a001d3c:	230d      	movs	r3, #13
1a001d3e:	4a4e      	ldr	r2, [pc, #312]	; (1a001e78 <inicio+0x188>)
1a001d40:	7013      	strb	r3, [r2, #0]
	D6 = GPIO6;
1a001d42:	231d      	movs	r3, #29
1a001d44:	494d      	ldr	r1, [pc, #308]	; (1a001e7c <inicio+0x18c>)
1a001d46:	700b      	strb	r3, [r1, #0]
	D7 = GPIO7;
1a001d48:	230c      	movs	r3, #12
1a001d4a:	4c4d      	ldr	r4, [pc, #308]	; (1a001e80 <inicio+0x190>)
1a001d4c:	7023      	strb	r3, [r4, #0]
	D8 = GPIO8;
1a001d4e:	230b      	movs	r3, #11
1a001d50:	4d4c      	ldr	r5, [pc, #304]	; (1a001e84 <inicio+0x194>)
1a001d52:	702b      	strb	r3, [r5, #0]
	D9 = LCDEN;
1a001d54:	2321      	movs	r3, #33	; 0x21
1a001d56:	4e4c      	ldr	r6, [pc, #304]	; (1a001e88 <inicio+0x198>)
1a001d58:	7033      	strb	r3, [r6, #0]
	D10 = LCD1;
1a001d5a:	2310      	movs	r3, #16
1a001d5c:	4f4b      	ldr	r7, [pc, #300]	; (1a001e8c <inicio+0x19c>)
1a001d5e:	703b      	strb	r3, [r7, #0]
	D11 = LCD2;
1a001d60:	2311      	movs	r3, #17
1a001d62:	494b      	ldr	r1, [pc, #300]	; (1a001e90 <inicio+0x1a0>)
1a001d64:	700b      	strb	r3, [r1, #0]
	D12 = LCD3;
1a001d66:	2312      	movs	r3, #18
1a001d68:	4c4a      	ldr	r4, [pc, #296]	; (1a001e94 <inicio+0x1a4>)
1a001d6a:	7023      	strb	r3, [r4, #0]
	D13 = LCD4;
1a001d6c:	2314      	movs	r3, #20
1a001d6e:	4d4a      	ldr	r5, [pc, #296]	; (1a001e98 <inicio+0x1a8>)
1a001d70:	702b      	strb	r3, [r5, #0]
	D14 = LCDRS;
1a001d72:	2313      	movs	r3, #19
1a001d74:	4e49      	ldr	r6, [pc, #292]	; (1a001e9c <inicio+0x1ac>)
1a001d76:	7033      	strb	r3, [r6, #0]
	D15 = T_COL0;
1a001d78:	2302      	movs	r3, #2
1a001d7a:	4f49      	ldr	r7, [pc, #292]	; (1a001ea0 <inicio+0x1b0>)
1a001d7c:	703b      	strb	r3, [r7, #0]
	RS = T_FIL2;
1a001d7e:	4f49      	ldr	r7, [pc, #292]	; (1a001ea4 <inicio+0x1b4>)
1a001d80:	2303      	movs	r3, #3
1a001d82:	703b      	strb	r3, [r7, #0]
	WR = T_FIL3;
1a001d84:	4e48      	ldr	r6, [pc, #288]	; (1a001ea8 <inicio+0x1b8>)
1a001d86:	2304      	movs	r3, #4
1a001d88:	7033      	strb	r3, [r6, #0]
	CS = T_FIL0;
1a001d8a:	4d48      	ldr	r5, [pc, #288]	; (1a001eac <inicio+0x1bc>)
1a001d8c:	2305      	movs	r3, #5
1a001d8e:	702b      	strb	r3, [r5, #0]
	REST = T_COL1;
1a001d90:	4c47      	ldr	r4, [pc, #284]	; (1a001eb0 <inicio+0x1c0>)
1a001d92:	2306      	movs	r3, #6
1a001d94:	7023      	strb	r3, [r4, #0]
	/***Inicializacion de pines*/
	gpioInit(D0, GPIO_OUTPUT);
1a001d96:	2101      	movs	r1, #1
1a001d98:	f001 f908 	bl	1a002fac <gpioInit>
	gpioInit(D1, GPIO_OUTPUT);
1a001d9c:	2101      	movs	r1, #1
1a001d9e:	f99b 0000 	ldrsb.w	r0, [fp]
1a001da2:	f001 f903 	bl	1a002fac <gpioInit>
	gpioInit(D2, GPIO_OUTPUT);
1a001da6:	2101      	movs	r1, #1
1a001da8:	f99a 0000 	ldrsb.w	r0, [sl]
1a001dac:	f001 f8fe 	bl	1a002fac <gpioInit>
	gpioInit(D3, GPIO_OUTPUT);
1a001db0:	2101      	movs	r1, #1
1a001db2:	f999 0000 	ldrsb.w	r0, [r9]
1a001db6:	f001 f8f9 	bl	1a002fac <gpioInit>
	gpioInit(D4, GPIO_OUTPUT);
1a001dba:	2101      	movs	r1, #1
1a001dbc:	f998 0000 	ldrsb.w	r0, [r8]
1a001dc0:	f001 f8f4 	bl	1a002fac <gpioInit>
	gpioInit(D5, GPIO_OUTPUT);
1a001dc4:	2101      	movs	r1, #1
1a001dc6:	4a2c      	ldr	r2, [pc, #176]	; (1a001e78 <inicio+0x188>)
1a001dc8:	f992 0000 	ldrsb.w	r0, [r2]
1a001dcc:	f001 f8ee 	bl	1a002fac <gpioInit>
	gpioInit(D6, GPIO_OUTPUT);
1a001dd0:	2101      	movs	r1, #1
1a001dd2:	4b2a      	ldr	r3, [pc, #168]	; (1a001e7c <inicio+0x18c>)
1a001dd4:	f993 0000 	ldrsb.w	r0, [r3]
1a001dd8:	f001 f8e8 	bl	1a002fac <gpioInit>
	gpioInit(D7, GPIO_OUTPUT);
1a001ddc:	2101      	movs	r1, #1
1a001dde:	4b28      	ldr	r3, [pc, #160]	; (1a001e80 <inicio+0x190>)
1a001de0:	f993 0000 	ldrsb.w	r0, [r3]
1a001de4:	f001 f8e2 	bl	1a002fac <gpioInit>
	gpioInit(D8, GPIO_OUTPUT);
1a001de8:	2101      	movs	r1, #1
1a001dea:	4b26      	ldr	r3, [pc, #152]	; (1a001e84 <inicio+0x194>)
1a001dec:	f993 0000 	ldrsb.w	r0, [r3]
1a001df0:	f001 f8dc 	bl	1a002fac <gpioInit>
	gpioInit(D9, GPIO_OUTPUT);
1a001df4:	2101      	movs	r1, #1
1a001df6:	4b24      	ldr	r3, [pc, #144]	; (1a001e88 <inicio+0x198>)
1a001df8:	f993 0000 	ldrsb.w	r0, [r3]
1a001dfc:	f001 f8d6 	bl	1a002fac <gpioInit>
	gpioInit(D10, GPIO_OUTPUT);
1a001e00:	2101      	movs	r1, #1
1a001e02:	4b22      	ldr	r3, [pc, #136]	; (1a001e8c <inicio+0x19c>)
1a001e04:	f993 0000 	ldrsb.w	r0, [r3]
1a001e08:	f001 f8d0 	bl	1a002fac <gpioInit>
	gpioInit(D11, GPIO_OUTPUT);
1a001e0c:	2101      	movs	r1, #1
1a001e0e:	4b20      	ldr	r3, [pc, #128]	; (1a001e90 <inicio+0x1a0>)
1a001e10:	f993 0000 	ldrsb.w	r0, [r3]
1a001e14:	f001 f8ca 	bl	1a002fac <gpioInit>
	gpioInit(D12, GPIO_OUTPUT);
1a001e18:	2101      	movs	r1, #1
1a001e1a:	4b1e      	ldr	r3, [pc, #120]	; (1a001e94 <inicio+0x1a4>)
1a001e1c:	f993 0000 	ldrsb.w	r0, [r3]
1a001e20:	f001 f8c4 	bl	1a002fac <gpioInit>
	gpioInit(D13, GPIO_OUTPUT);
1a001e24:	2101      	movs	r1, #1
1a001e26:	4b1c      	ldr	r3, [pc, #112]	; (1a001e98 <inicio+0x1a8>)
1a001e28:	f993 0000 	ldrsb.w	r0, [r3]
1a001e2c:	f001 f8be 	bl	1a002fac <gpioInit>
	gpioInit(D14, GPIO_OUTPUT);
1a001e30:	2101      	movs	r1, #1
1a001e32:	4b1a      	ldr	r3, [pc, #104]	; (1a001e9c <inicio+0x1ac>)
1a001e34:	f993 0000 	ldrsb.w	r0, [r3]
1a001e38:	f001 f8b8 	bl	1a002fac <gpioInit>
	gpioInit(D15, GPIO_OUTPUT);
1a001e3c:	2101      	movs	r1, #1
1a001e3e:	4b18      	ldr	r3, [pc, #96]	; (1a001ea0 <inicio+0x1b0>)
1a001e40:	f993 0000 	ldrsb.w	r0, [r3]
1a001e44:	f001 f8b2 	bl	1a002fac <gpioInit>
	gpioInit(RS, GPIO_OUTPUT);
1a001e48:	2101      	movs	r1, #1
1a001e4a:	f997 0000 	ldrsb.w	r0, [r7]
1a001e4e:	f001 f8ad 	bl	1a002fac <gpioInit>
	gpioInit(WR, GPIO_OUTPUT);
1a001e52:	2101      	movs	r1, #1
1a001e54:	f996 0000 	ldrsb.w	r0, [r6]
1a001e58:	f001 f8a8 	bl	1a002fac <gpioInit>
	gpioInit(CS, GPIO_OUTPUT);
1a001e5c:	2101      	movs	r1, #1
1a001e5e:	f995 0000 	ldrsb.w	r0, [r5]
1a001e62:	f001 f8a3 	bl	1a002fac <gpioInit>
	gpioInit(REST, GPIO_OUTPUT);
1a001e66:	2101      	movs	r1, #1
1a001e68:	f994 0000 	ldrsb.w	r0, [r4]
1a001e6c:	f001 f89e 	bl	1a002fac <gpioInit>
	//gpioMap_t pin

	/*Inicializacion de variables  */

}
1a001e70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001e74:	10000cf5 	.word	0x10000cf5
1a001e78:	10000d2a 	.word	0x10000d2a
1a001e7c:	10000d64 	.word	0x10000d64
1a001e80:	10000d5b 	.word	0x10000d5b
1a001e84:	10000d31 	.word	0x10000d31
1a001e88:	10000ce8 	.word	0x10000ce8
1a001e8c:	10000d1c 	.word	0x10000d1c
1a001e90:	10000d00 	.word	0x10000d00
1a001e94:	10000d1e 	.word	0x10000d1e
1a001e98:	10000d51 	.word	0x10000d51
1a001e9c:	10000d50 	.word	0x10000d50
1a001ea0:	10000d52 	.word	0x10000d52
1a001ea4:	10000d5c 	.word	0x10000d5c
1a001ea8:	10000ce1 	.word	0x10000ce1
1a001eac:	10000d5d 	.word	0x10000d5d
1a001eb0:	10000d65 	.word	0x10000d65
1a001eb4:	10000d58 	.word	0x10000d58
1a001eb8:	10000d2b 	.word	0x10000d2b
1a001ebc:	10000cd8 	.word	0x10000cd8
1a001ec0:	10000d49 	.word	0x10000d49

1a001ec4 <initialise_monitor_handles>:
}
1a001ec4:	4770      	bx	lr
1a001ec6:	Address 0x000000001a001ec6 is out of bounds.


1a001ec8 <Reset_Handler>:
void Reset_Handler(void) {
1a001ec8:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a001eca:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001ecc:	4b19      	ldr	r3, [pc, #100]	; (1a001f34 <Reset_Handler+0x6c>)
1a001ece:	4a1a      	ldr	r2, [pc, #104]	; (1a001f38 <Reset_Handler+0x70>)
1a001ed0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001ed2:	3304      	adds	r3, #4
1a001ed4:	4a19      	ldr	r2, [pc, #100]	; (1a001f3c <Reset_Handler+0x74>)
1a001ed6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001ed8:	2300      	movs	r3, #0
1a001eda:	e005      	b.n	1a001ee8 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001edc:	4a18      	ldr	r2, [pc, #96]	; (1a001f40 <Reset_Handler+0x78>)
1a001ede:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a001ee2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001ee6:	3301      	adds	r3, #1
1a001ee8:	2b07      	cmp	r3, #7
1a001eea:	d9f7      	bls.n	1a001edc <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a001eec:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a001eee:	4b15      	ldr	r3, [pc, #84]	; (1a001f44 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001ef0:	e007      	b.n	1a001f02 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a001ef2:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001ef6:	689a      	ldr	r2, [r3, #8]
1a001ef8:	6859      	ldr	r1, [r3, #4]
1a001efa:	6818      	ldr	r0, [r3, #0]
1a001efc:	f7fe f945 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a001f00:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a001f02:	4a11      	ldr	r2, [pc, #68]	; (1a001f48 <Reset_Handler+0x80>)
1a001f04:	4293      	cmp	r3, r2
1a001f06:	d3f4      	bcc.n	1a001ef2 <Reset_Handler+0x2a>
1a001f08:	e006      	b.n	1a001f18 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a001f0a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001f0c:	6859      	ldr	r1, [r3, #4]
1a001f0e:	f854 0b08 	ldr.w	r0, [r4], #8
1a001f12:	f7fe f949 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a001f16:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001f18:	4a0c      	ldr	r2, [pc, #48]	; (1a001f4c <Reset_Handler+0x84>)
1a001f1a:	4293      	cmp	r3, r2
1a001f1c:	d3f5      	bcc.n	1a001f0a <Reset_Handler+0x42>
    SystemInit();
1a001f1e:	f000 ff01 	bl	1a002d24 <SystemInit>
    __libc_init_array();
1a001f22:	f003 f9d3 	bl	1a0052cc <__libc_init_array>
    initialise_monitor_handles();
1a001f26:	f7ff ffcd 	bl	1a001ec4 <initialise_monitor_handles>
    main();
1a001f2a:	f7ff fe01 	bl	1a001b30 <main>
        __asm__ volatile("wfi");
1a001f2e:	bf30      	wfi
1a001f30:	e7fd      	b.n	1a001f2e <Reset_Handler+0x66>
1a001f32:	bf00      	nop
1a001f34:	40053100 	.word	0x40053100
1a001f38:	10df1000 	.word	0x10df1000
1a001f3c:	01dff7ff 	.word	0x01dff7ff
1a001f40:	e000e280 	.word	0xe000e280
1a001f44:	1a000114 	.word	0x1a000114
1a001f48:	1a000150 	.word	0x1a000150
1a001f4c:	1a000178 	.word	0x1a000178

1a001f50 <_fini>:
void _fini(void) {}
1a001f50:	4770      	bx	lr

1a001f52 <_init>:
void _init(void) {}
1a001f52:	4770      	bx	lr

1a001f54 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a001f54:	4b05      	ldr	r3, [pc, #20]	; (1a001f6c <_sbrk_r+0x18>)
1a001f56:	681b      	ldr	r3, [r3, #0]
1a001f58:	b123      	cbz	r3, 1a001f64 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a001f5a:	4b04      	ldr	r3, [pc, #16]	; (1a001f6c <_sbrk_r+0x18>)
1a001f5c:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a001f5e:	4401      	add	r1, r0
1a001f60:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a001f62:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a001f64:	4b01      	ldr	r3, [pc, #4]	; (1a001f6c <_sbrk_r+0x18>)
1a001f66:	4a02      	ldr	r2, [pc, #8]	; (1a001f70 <_sbrk_r+0x1c>)
1a001f68:	601a      	str	r2, [r3, #0]
1a001f6a:	e7f6      	b.n	1a001f5a <_sbrk_r+0x6>
1a001f6c:	10000cac 	.word	0x10000cac
1a001f70:	10000d80 	.word	0x10000d80

1a001f74 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001f74:	2200      	movs	r2, #0
1a001f76:	2a05      	cmp	r2, #5
1a001f78:	d819      	bhi.n	1a001fae <Board_LED_Init+0x3a>
{
1a001f7a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a001f7c:	490c      	ldr	r1, [pc, #48]	; (1a001fb0 <Board_LED_Init+0x3c>)
1a001f7e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a001f82:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a001f86:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a001f88:	4b0a      	ldr	r3, [pc, #40]	; (1a001fb4 <Board_LED_Init+0x40>)
1a001f8a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a001f8e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a001f92:	2001      	movs	r0, #1
1a001f94:	40a0      	lsls	r0, r4
1a001f96:	4301      	orrs	r1, r0
1a001f98:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a001f9c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a001fa0:	2100      	movs	r1, #0
1a001fa2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001fa4:	3201      	adds	r2, #1
1a001fa6:	2a05      	cmp	r2, #5
1a001fa8:	d9e8      	bls.n	1a001f7c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a001faa:	bc70      	pop	{r4, r5, r6}
1a001fac:	4770      	bx	lr
1a001fae:	4770      	bx	lr
1a001fb0:	1a005d30 	.word	0x1a005d30
1a001fb4:	400f4000 	.word	0x400f4000

1a001fb8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001fb8:	2300      	movs	r3, #0
1a001fba:	2b03      	cmp	r3, #3
1a001fbc:	d816      	bhi.n	1a001fec <Board_TEC_Init+0x34>
{
1a001fbe:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001fc0:	490b      	ldr	r1, [pc, #44]	; (1a001ff0 <Board_TEC_Init+0x38>)
1a001fc2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001fc6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001fca:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001fcc:	4c09      	ldr	r4, [pc, #36]	; (1a001ff4 <Board_TEC_Init+0x3c>)
1a001fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001fd2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a001fd6:	2001      	movs	r0, #1
1a001fd8:	40a8      	lsls	r0, r5
1a001fda:	ea21 0100 	bic.w	r1, r1, r0
1a001fde:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001fe2:	3301      	adds	r3, #1
1a001fe4:	2b03      	cmp	r3, #3
1a001fe6:	d9eb      	bls.n	1a001fc0 <Board_TEC_Init+0x8>
   }
}
1a001fe8:	bc30      	pop	{r4, r5}
1a001fea:	4770      	bx	lr
1a001fec:	4770      	bx	lr
1a001fee:	bf00      	nop
1a001ff0:	1a005d28 	.word	0x1a005d28
1a001ff4:	400f4000 	.word	0x400f4000

1a001ff8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001ff8:	2300      	movs	r3, #0
1a001ffa:	2b08      	cmp	r3, #8
1a001ffc:	d816      	bhi.n	1a00202c <Board_GPIO_Init+0x34>
{
1a001ffe:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002000:	490b      	ldr	r1, [pc, #44]	; (1a002030 <Board_GPIO_Init+0x38>)
1a002002:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002006:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00200a:	784d      	ldrb	r5, [r1, #1]
1a00200c:	4c09      	ldr	r4, [pc, #36]	; (1a002034 <Board_GPIO_Init+0x3c>)
1a00200e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002012:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002016:	2001      	movs	r0, #1
1a002018:	40a8      	lsls	r0, r5
1a00201a:	ea21 0100 	bic.w	r1, r1, r0
1a00201e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002022:	3301      	adds	r3, #1
1a002024:	2b08      	cmp	r3, #8
1a002026:	d9eb      	bls.n	1a002000 <Board_GPIO_Init+0x8>
   }
}
1a002028:	bc30      	pop	{r4, r5}
1a00202a:	4770      	bx	lr
1a00202c:	4770      	bx	lr
1a00202e:	bf00      	nop
1a002030:	1a005d3c 	.word	0x1a005d3c
1a002034:	400f4000 	.word	0x400f4000

1a002038 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002038:	b510      	push	{r4, lr}
1a00203a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00203c:	4c08      	ldr	r4, [pc, #32]	; (1a002060 <Board_ADC_Init+0x28>)
1a00203e:	4669      	mov	r1, sp
1a002040:	4620      	mov	r0, r4
1a002042:	f000 f9bd 	bl	1a0023c0 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002046:	4a07      	ldr	r2, [pc, #28]	; (1a002064 <Board_ADC_Init+0x2c>)
1a002048:	4669      	mov	r1, sp
1a00204a:	4620      	mov	r0, r4
1a00204c:	f000 f9f4 	bl	1a002438 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002050:	2200      	movs	r2, #0
1a002052:	4669      	mov	r1, sp
1a002054:	4620      	mov	r0, r4
1a002056:	f000 fa08 	bl	1a00246a <Chip_ADC_SetResolution>
}
1a00205a:	b002      	add	sp, #8
1a00205c:	bd10      	pop	{r4, pc}
1a00205e:	bf00      	nop
1a002060:	400e3000 	.word	0x400e3000
1a002064:	00061a80 	.word	0x00061a80

1a002068 <Board_SPI_Init>:
{
1a002068:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00206a:	4c0b      	ldr	r4, [pc, #44]	; (1a002098 <Board_SPI_Init+0x30>)
1a00206c:	4620      	mov	r0, r4
1a00206e:	f000 fe3d 	bl	1a002cec <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002072:	6863      	ldr	r3, [r4, #4]
1a002074:	f023 0304 	bic.w	r3, r3, #4
1a002078:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00207a:	6823      	ldr	r3, [r4, #0]
1a00207c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002080:	f043 0307 	orr.w	r3, r3, #7
1a002084:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002086:	4905      	ldr	r1, [pc, #20]	; (1a00209c <Board_SPI_Init+0x34>)
1a002088:	4620      	mov	r0, r4
1a00208a:	f000 fe10 	bl	1a002cae <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00208e:	6863      	ldr	r3, [r4, #4]
1a002090:	f043 0302 	orr.w	r3, r3, #2
1a002094:	6063      	str	r3, [r4, #4]
}
1a002096:	bd10      	pop	{r4, pc}
1a002098:	400c5000 	.word	0x400c5000
1a00209c:	000186a0 	.word	0x000186a0

1a0020a0 <Board_I2C_Init>:
{
1a0020a0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0020a2:	2000      	movs	r0, #0
1a0020a4:	f000 fdb6 	bl	1a002c14 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0020a8:	4b04      	ldr	r3, [pc, #16]	; (1a0020bc <Board_I2C_Init+0x1c>)
1a0020aa:	f640 0208 	movw	r2, #2056	; 0x808
1a0020ae:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0020b2:	4903      	ldr	r1, [pc, #12]	; (1a0020c0 <Board_I2C_Init+0x20>)
1a0020b4:	2000      	movs	r0, #0
1a0020b6:	f000 fdbf 	bl	1a002c38 <Chip_I2C_SetClockRate>
}
1a0020ba:	bd08      	pop	{r3, pc}
1a0020bc:	40086000 	.word	0x40086000
1a0020c0:	000f4240 	.word	0x000f4240

1a0020c4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0020c4:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0020c6:	4c07      	ldr	r4, [pc, #28]	; (1a0020e4 <Board_Debug_Init+0x20>)
1a0020c8:	4620      	mov	r0, r4
1a0020ca:	f000 f897 	bl	1a0021fc <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0020ce:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0020d2:	4620      	mov	r0, r4
1a0020d4:	f000 f8dc 	bl	1a002290 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0020d8:	2303      	movs	r3, #3
1a0020da:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0020dc:	2301      	movs	r3, #1
1a0020de:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0020e0:	bd10      	pop	{r4, pc}
1a0020e2:	bf00      	nop
1a0020e4:	400c1000 	.word	0x400c1000

1a0020e8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0020e8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0020ea:	f7ff ffeb 	bl	1a0020c4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0020ee:	4809      	ldr	r0, [pc, #36]	; (1a002114 <Board_Init+0x2c>)
1a0020f0:	f000 fd7e 	bl	1a002bf0 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0020f4:	f7ff ff80 	bl	1a001ff8 <Board_GPIO_Init>
   Board_ADC_Init();
1a0020f8:	f7ff ff9e 	bl	1a002038 <Board_ADC_Init>
   Board_SPI_Init();
1a0020fc:	f7ff ffb4 	bl	1a002068 <Board_SPI_Init>
   Board_I2C_Init();
1a002100:	f7ff ffce 	bl	1a0020a0 <Board_I2C_Init>

   Board_LED_Init();
1a002104:	f7ff ff36 	bl	1a001f74 <Board_LED_Init>
   Board_TEC_Init();
1a002108:	f7ff ff56 	bl	1a001fb8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00210c:	f000 f9da 	bl	1a0024c4 <SystemCoreClockUpdate>
}
1a002110:	bd08      	pop	{r3, pc}
1a002112:	bf00      	nop
1a002114:	400f4000 	.word	0x400f4000

1a002118 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a002118:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00211a:	f7ff ffd3 	bl	1a0020c4 <Board_Debug_Init>
1a00211e:	bd08      	pop	{r3, pc}

1a002120 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002120:	2300      	movs	r3, #0
1a002122:	2b1c      	cmp	r3, #28
1a002124:	d812      	bhi.n	1a00214c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002126:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002128:	4a09      	ldr	r2, [pc, #36]	; (1a002150 <Board_SetupMuxing+0x30>)
1a00212a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00212e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002132:	784a      	ldrb	r2, [r1, #1]
1a002134:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002136:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00213a:	4906      	ldr	r1, [pc, #24]	; (1a002154 <Board_SetupMuxing+0x34>)
1a00213c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002140:	3301      	adds	r3, #1
1a002142:	2b1c      	cmp	r3, #28
1a002144:	d9f0      	bls.n	1a002128 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002146:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00214a:	4770      	bx	lr
1a00214c:	4770      	bx	lr
1a00214e:	bf00      	nop
1a002150:	1a005d58 	.word	0x1a005d58
1a002154:	40086000 	.word	0x40086000

1a002158 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002158:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00215a:	4a17      	ldr	r2, [pc, #92]	; (1a0021b8 <Board_SetupClocking+0x60>)
1a00215c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002164:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002168:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00216c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002174:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002178:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00217c:	2201      	movs	r2, #1
1a00217e:	490f      	ldr	r1, [pc, #60]	; (1a0021bc <Board_SetupClocking+0x64>)
1a002180:	2006      	movs	r0, #6
1a002182:	f000 fc89 	bl	1a002a98 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002186:	2400      	movs	r4, #0
1a002188:	b14c      	cbz	r4, 1a00219e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00218a:	4b0b      	ldr	r3, [pc, #44]	; (1a0021b8 <Board_SetupClocking+0x60>)
1a00218c:	685a      	ldr	r2, [r3, #4]
1a00218e:	f022 020c 	bic.w	r2, r2, #12
1a002192:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002194:	685a      	ldr	r2, [r3, #4]
1a002196:	f042 0203 	orr.w	r2, r2, #3
1a00219a:	605a      	str	r2, [r3, #4]
}
1a00219c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00219e:	4808      	ldr	r0, [pc, #32]	; (1a0021c0 <Board_SetupClocking+0x68>)
1a0021a0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0021a4:	2301      	movs	r3, #1
1a0021a6:	788a      	ldrb	r2, [r1, #2]
1a0021a8:	7849      	ldrb	r1, [r1, #1]
1a0021aa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0021ae:	f000 fbb5 	bl	1a00291c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0021b2:	3401      	adds	r4, #1
1a0021b4:	e7e8      	b.n	1a002188 <Board_SetupClocking+0x30>
1a0021b6:	bf00      	nop
1a0021b8:	40043000 	.word	0x40043000
1a0021bc:	0c28cb00 	.word	0x0c28cb00
1a0021c0:	1a005d54 	.word	0x1a005d54

1a0021c4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0021c4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0021c6:	f7ff ffab 	bl	1a002120 <Board_SetupMuxing>
    Board_SetupClocking();
1a0021ca:	f7ff ffc5 	bl	1a002158 <Board_SetupClocking>
}
1a0021ce:	bd08      	pop	{r3, pc}

1a0021d0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0021d0:	4b09      	ldr	r3, [pc, #36]	; (1a0021f8 <Chip_UART_GetIndex+0x28>)
1a0021d2:	4298      	cmp	r0, r3
1a0021d4:	d009      	beq.n	1a0021ea <Chip_UART_GetIndex+0x1a>
1a0021d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0021da:	4298      	cmp	r0, r3
1a0021dc:	d007      	beq.n	1a0021ee <Chip_UART_GetIndex+0x1e>
1a0021de:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0021e2:	4298      	cmp	r0, r3
1a0021e4:	d005      	beq.n	1a0021f2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0021e6:	2000      	movs	r0, #0
1a0021e8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0021ea:	2002      	movs	r0, #2
1a0021ec:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0021ee:	2003      	movs	r0, #3
1a0021f0:	4770      	bx	lr
			return 1;
1a0021f2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0021f4:	4770      	bx	lr
1a0021f6:	bf00      	nop
1a0021f8:	400c1000 	.word	0x400c1000

1a0021fc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0021fc:	b530      	push	{r4, r5, lr}
1a0021fe:	b083      	sub	sp, #12
1a002200:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002202:	f7ff ffe5 	bl	1a0021d0 <Chip_UART_GetIndex>
1a002206:	2301      	movs	r3, #1
1a002208:	461a      	mov	r2, r3
1a00220a:	4619      	mov	r1, r3
1a00220c:	4d0e      	ldr	r5, [pc, #56]	; (1a002248 <Chip_UART_Init+0x4c>)
1a00220e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002212:	f000 fbc9 	bl	1a0029a8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002216:	2307      	movs	r3, #7
1a002218:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00221a:	2300      	movs	r3, #0
1a00221c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00221e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002220:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002222:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002224:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002226:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002228:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00222a:	4b08      	ldr	r3, [pc, #32]	; (1a00224c <Chip_UART_Init+0x50>)
1a00222c:	429c      	cmp	r4, r3
1a00222e:	d006      	beq.n	1a00223e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002230:	2303      	movs	r3, #3
1a002232:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002234:	2310      	movs	r3, #16
1a002236:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002238:	9b01      	ldr	r3, [sp, #4]
}
1a00223a:	b003      	add	sp, #12
1a00223c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00223e:	2300      	movs	r3, #0
1a002240:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002242:	69a3      	ldr	r3, [r4, #24]
1a002244:	9301      	str	r3, [sp, #4]
1a002246:	e7f3      	b.n	1a002230 <Chip_UART_Init+0x34>
1a002248:	1a005dd4 	.word	0x1a005dd4
1a00224c:	40082000 	.word	0x40082000

1a002250 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002250:	b538      	push	{r3, r4, r5, lr}
1a002252:	4605      	mov	r5, r0
1a002254:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002256:	f7ff ffbb 	bl	1a0021d0 <Chip_UART_GetIndex>
1a00225a:	4b0c      	ldr	r3, [pc, #48]	; (1a00228c <Chip_UART_SetBaud+0x3c>)
1a00225c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002260:	f000 fbf4 	bl	1a002a4c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002264:	0123      	lsls	r3, r4, #4
1a002266:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00226a:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00226c:	68ea      	ldr	r2, [r5, #12]
1a00226e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002272:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a002274:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a002276:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00227a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00227c:	68ea      	ldr	r2, [r5, #12]
1a00227e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002282:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002284:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002288:	0900      	lsrs	r0, r0, #4
1a00228a:	bd38      	pop	{r3, r4, r5, pc}
1a00228c:	1a005dcc 	.word	0x1a005dcc

1a002290 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002294:	b083      	sub	sp, #12
1a002296:	9001      	str	r0, [sp, #4]
1a002298:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00229a:	f7ff ff99 	bl	1a0021d0 <Chip_UART_GetIndex>
1a00229e:	4b32      	ldr	r3, [pc, #200]	; (1a002368 <Chip_UART_SetBaudFDR+0xd8>)
1a0022a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0022a4:	f000 fbd2 	bl	1a002a4c <Chip_Clock_GetRate>
1a0022a8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0022aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0022ae:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0022b0:	f04f 0b00 	mov.w	fp, #0
1a0022b4:	46a2      	mov	sl, r4
1a0022b6:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0022b8:	e02a      	b.n	1a002310 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0022ba:	4242      	negs	r2, r0
				div ++;
1a0022bc:	1c4b      	adds	r3, r1, #1
1a0022be:	e017      	b.n	1a0022f0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0022c0:	b30a      	cbz	r2, 1a002306 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0022c2:	4617      	mov	r7, r2
			sd = d;
1a0022c4:	46ab      	mov	fp, r5
			sm = m;
1a0022c6:	46a2      	mov	sl, r4
			sdiv = div;
1a0022c8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0022ca:	3501      	adds	r5, #1
1a0022cc:	42ac      	cmp	r4, r5
1a0022ce:	d91e      	bls.n	1a00230e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0022d0:	0933      	lsrs	r3, r6, #4
1a0022d2:	0730      	lsls	r0, r6, #28
1a0022d4:	fba4 0100 	umull	r0, r1, r4, r0
1a0022d8:	fb04 1103 	mla	r1, r4, r3, r1
1a0022dc:	1962      	adds	r2, r4, r5
1a0022de:	fb08 f202 	mul.w	r2, r8, r2
1a0022e2:	2300      	movs	r3, #0
1a0022e4:	f002 fe70 	bl	1a004fc8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0022e8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0022ea:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0022ec:	2800      	cmp	r0, #0
1a0022ee:	dbe4      	blt.n	1a0022ba <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0022f0:	4297      	cmp	r7, r2
1a0022f2:	d3ea      	bcc.n	1a0022ca <Chip_UART_SetBaudFDR+0x3a>
1a0022f4:	2b00      	cmp	r3, #0
1a0022f6:	d0e8      	beq.n	1a0022ca <Chip_UART_SetBaudFDR+0x3a>
1a0022f8:	0c19      	lsrs	r1, r3, #16
1a0022fa:	d1e6      	bne.n	1a0022ca <Chip_UART_SetBaudFDR+0x3a>
1a0022fc:	2b02      	cmp	r3, #2
1a0022fe:	d8df      	bhi.n	1a0022c0 <Chip_UART_SetBaudFDR+0x30>
1a002300:	2d00      	cmp	r5, #0
1a002302:	d0dd      	beq.n	1a0022c0 <Chip_UART_SetBaudFDR+0x30>
1a002304:	e7e1      	b.n	1a0022ca <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002306:	4617      	mov	r7, r2
			sd = d;
1a002308:	46ab      	mov	fp, r5
			sm = m;
1a00230a:	46a2      	mov	sl, r4
			sdiv = div;
1a00230c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00230e:	3401      	adds	r4, #1
1a002310:	b11f      	cbz	r7, 1a00231a <Chip_UART_SetBaudFDR+0x8a>
1a002312:	2c0f      	cmp	r4, #15
1a002314:	d801      	bhi.n	1a00231a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002316:	2500      	movs	r5, #0
1a002318:	e7d8      	b.n	1a0022cc <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00231a:	f1b9 0f00 	cmp.w	r9, #0
1a00231e:	d01e      	beq.n	1a00235e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002320:	9a01      	ldr	r2, [sp, #4]
1a002322:	4611      	mov	r1, r2
1a002324:	68d3      	ldr	r3, [r2, #12]
1a002326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00232a:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a00232c:	fa5f f389 	uxtb.w	r3, r9
1a002330:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a002332:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a002336:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002338:	68d3      	ldr	r3, [r2, #12]
1a00233a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00233e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002340:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002344:	b2db      	uxtb	r3, r3
1a002346:	f00b 020f 	and.w	r2, fp, #15
1a00234a:	4313      	orrs	r3, r2
1a00234c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00234e:	0933      	lsrs	r3, r6, #4
1a002350:	fb0a f303 	mul.w	r3, sl, r3
1a002354:	44da      	add	sl, fp
1a002356:	fb09 f90a 	mul.w	r9, r9, sl
1a00235a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00235e:	4648      	mov	r0, r9
1a002360:	b003      	add	sp, #12
1a002362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002366:	bf00      	nop
1a002368:	1a005dcc 	.word	0x1a005dcc

1a00236c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00236c:	4b03      	ldr	r3, [pc, #12]	; (1a00237c <Chip_ADC_GetClockIndex+0x10>)
1a00236e:	4298      	cmp	r0, r3
1a002370:	d001      	beq.n	1a002376 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002372:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002374:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002376:	2004      	movs	r0, #4
1a002378:	4770      	bx	lr
1a00237a:	bf00      	nop
1a00237c:	400e4000 	.word	0x400e4000

1a002380 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002380:	b570      	push	{r4, r5, r6, lr}
1a002382:	460d      	mov	r5, r1
1a002384:	4614      	mov	r4, r2
1a002386:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002388:	f7ff fff0 	bl	1a00236c <Chip_ADC_GetClockIndex>
1a00238c:	f000 fb5e 	bl	1a002a4c <Chip_Clock_GetRate>
	if (burstMode) {
1a002390:	b155      	cbz	r5, 1a0023a8 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a002392:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002396:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00239a:	0064      	lsls	r4, r4, #1
1a00239c:	fbb0 f0f4 	udiv	r0, r0, r4
1a0023a0:	b2c0      	uxtb	r0, r0
1a0023a2:	3801      	subs	r0, #1
	return div;
}
1a0023a4:	b2c0      	uxtb	r0, r0
1a0023a6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0023a8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0023ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0023b0:	e7f1      	b.n	1a002396 <getClkDiv+0x16>

1a0023b2 <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a0023b2:	6803      	ldr	r3, [r0, #0]
1a0023b4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a0023b8:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a0023bc:	6001      	str	r1, [r0, #0]
}
1a0023be:	4770      	bx	lr

1a0023c0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0023c0:	b538      	push	{r3, r4, r5, lr}
1a0023c2:	4605      	mov	r5, r0
1a0023c4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0023c6:	f7ff ffd1 	bl	1a00236c <Chip_ADC_GetClockIndex>
1a0023ca:	2301      	movs	r3, #1
1a0023cc:	461a      	mov	r2, r3
1a0023ce:	4619      	mov	r1, r3
1a0023d0:	f000 faea 	bl	1a0029a8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0023d4:	2100      	movs	r1, #0
1a0023d6:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0023d8:	4a08      	ldr	r2, [pc, #32]	; (1a0023fc <Chip_ADC_Init+0x3c>)
1a0023da:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0023dc:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0023de:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0023e0:	230b      	movs	r3, #11
1a0023e2:	4628      	mov	r0, r5
1a0023e4:	f7ff ffcc 	bl	1a002380 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0023e8:	0200      	lsls	r0, r0, #8
1a0023ea:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0023ee:	7920      	ldrb	r0, [r4, #4]
1a0023f0:	0440      	lsls	r0, r0, #17
1a0023f2:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0023f6:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0023f8:	6028      	str	r0, [r5, #0]
}
1a0023fa:	bd38      	pop	{r3, r4, r5, pc}
1a0023fc:	00061a80 	.word	0x00061a80

1a002400 <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a002400:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a002402:	f44f 7280 	mov.w	r2, #256	; 0x100
1a002406:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a002408:	2200      	movs	r2, #0
1a00240a:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a00240c:	f7ff ffae 	bl	1a00236c <Chip_ADC_GetClockIndex>
1a002410:	f000 fb02 	bl	1a002a18 <Chip_Clock_Disable>
}
1a002414:	bd08      	pop	{r3, pc}

1a002416 <Chip_ADC_Int_SetChannelCmd>:
}

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002416:	2a01      	cmp	r2, #1
1a002418:	d006      	beq.n	1a002428 <Chip_ADC_Int_SetChannelCmd+0x12>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a00241a:	68c3      	ldr	r3, [r0, #12]
1a00241c:	2201      	movs	r2, #1
1a00241e:	408a      	lsls	r2, r1
1a002420:	ea23 0302 	bic.w	r3, r3, r2
1a002424:	60c3      	str	r3, [r0, #12]
1a002426:	4770      	bx	lr
{
1a002428:	b410      	push	{r4}
		pADC->INTEN |= (1UL << channel);
1a00242a:	68c4      	ldr	r4, [r0, #12]
1a00242c:	408a      	lsls	r2, r1
1a00242e:	4314      	orrs	r4, r2
1a002430:	60c4      	str	r4, [r0, #12]
	}
}
1a002432:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002436:	4770      	bx	lr

1a002438 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002438:	b570      	push	{r4, r5, r6, lr}
1a00243a:	4605      	mov	r5, r0
1a00243c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00243e:	6804      	ldr	r4, [r0, #0]
1a002440:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002444:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002448:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00244a:	790b      	ldrb	r3, [r1, #4]
1a00244c:	f1c3 030b 	rsb	r3, r3, #11
1a002450:	b2db      	uxtb	r3, r3
1a002452:	7949      	ldrb	r1, [r1, #5]
1a002454:	f7ff ff94 	bl	1a002380 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002458:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00245c:	7933      	ldrb	r3, [r6, #4]
1a00245e:	045b      	lsls	r3, r3, #17
1a002460:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a002464:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a002466:	602b      	str	r3, [r5, #0]
}
1a002468:	bd70      	pop	{r4, r5, r6, pc}

1a00246a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00246a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00246c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00246e:	680a      	ldr	r2, [r1, #0]
1a002470:	f7ff ffe2 	bl	1a002438 <Chip_ADC_SetSampleRate>
}
1a002474:	bd08      	pop	{r3, pc}

1a002476 <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002476:	2a01      	cmp	r2, #1
1a002478:	d00a      	beq.n	1a002490 <Chip_ADC_EnableChannel+0x1a>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a00247a:	6802      	ldr	r2, [r0, #0]
1a00247c:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
1a002480:	6002      	str	r2, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a002482:	6803      	ldr	r3, [r0, #0]
1a002484:	2201      	movs	r2, #1
1a002486:	408a      	lsls	r2, r1
1a002488:	ea23 0302 	bic.w	r3, r3, r2
1a00248c:	6003      	str	r3, [r0, #0]
1a00248e:	4770      	bx	lr
{
1a002490:	b410      	push	{r4}
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a002492:	6804      	ldr	r4, [r0, #0]
1a002494:	408a      	lsls	r2, r1
1a002496:	4314      	orrs	r4, r2
1a002498:	6004      	str	r4, [r0, #0]
	}
}
1a00249a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00249e:	4770      	bx	lr

1a0024a0 <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a0024a0:	b538      	push	{r3, r4, r5, lr}
1a0024a2:	4604      	mov	r4, r0
1a0024a4:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a0024a6:	2100      	movs	r1, #0
1a0024a8:	f7ff ff83 	bl	1a0023b2 <setStartMode>
	
    if (NewState == DISABLE) {
1a0024ac:	b925      	cbnz	r5, 1a0024b8 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a0024ae:	6823      	ldr	r3, [r4, #0]
1a0024b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a0024b4:	6023      	str	r3, [r4, #0]
	}
	else {
		pADC->CR |= ADC_CR_BURST;
	}
}
1a0024b6:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR |= ADC_CR_BURST;
1a0024b8:	6823      	ldr	r3, [r4, #0]
1a0024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a0024be:	6023      	str	r3, [r4, #0]
}
1a0024c0:	e7f9      	b.n	1a0024b6 <Chip_ADC_SetBurstCmd+0x16>
1a0024c2:	Address 0x000000001a0024c2 is out of bounds.


1a0024c4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0024c4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0024c6:	2069      	movs	r0, #105	; 0x69
1a0024c8:	f000 fac0 	bl	1a002a4c <Chip_Clock_GetRate>
1a0024cc:	4b01      	ldr	r3, [pc, #4]	; (1a0024d4 <SystemCoreClockUpdate+0x10>)
1a0024ce:	6018      	str	r0, [r3, #0]
}
1a0024d0:	bd08      	pop	{r3, pc}
1a0024d2:	bf00      	nop
1a0024d4:	10000d6c 	.word	0x10000d6c

1a0024d8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0024d8:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0024da:	680b      	ldr	r3, [r1, #0]
1a0024dc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0024e0:	d002      	beq.n	1a0024e8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0024e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0024e6:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0024e8:	4607      	mov	r7, r0
1a0024ea:	2501      	movs	r5, #1
1a0024ec:	e03a      	b.n	1a002564 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0024ee:	694b      	ldr	r3, [r1, #20]
1a0024f0:	fb03 f302 	mul.w	r3, r3, r2
1a0024f4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0024f8:	e01c      	b.n	1a002534 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0024fa:	461c      	mov	r4, r3
	if (val < 0)
1a0024fc:	ebb0 0c04 	subs.w	ip, r0, r4
1a002500:	d427      	bmi.n	1a002552 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002502:	4567      	cmp	r7, ip
1a002504:	d906      	bls.n	1a002514 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a002506:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002508:	1c77      	adds	r7, r6, #1
1a00250a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00250c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00250e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002510:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002512:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a002514:	3201      	adds	r2, #1
1a002516:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00251a:	dc1d      	bgt.n	1a002558 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a00251c:	680c      	ldr	r4, [r1, #0]
1a00251e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002522:	d0e4      	beq.n	1a0024ee <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002524:	1c73      	adds	r3, r6, #1
1a002526:	fa02 fc03 	lsl.w	ip, r2, r3
1a00252a:	694b      	ldr	r3, [r1, #20]
1a00252c:	fb03 f30c 	mul.w	r3, r3, ip
1a002530:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002534:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a002570 <pll_calc_divs+0x98>
1a002538:	4563      	cmp	r3, ip
1a00253a:	d9eb      	bls.n	1a002514 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a00253c:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a002574 <pll_calc_divs+0x9c>
1a002540:	4563      	cmp	r3, ip
1a002542:	d809      	bhi.n	1a002558 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a002544:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002548:	d1d7      	bne.n	1a0024fa <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00254a:	1c74      	adds	r4, r6, #1
1a00254c:	fa23 f404 	lsr.w	r4, r3, r4
1a002550:	e7d4      	b.n	1a0024fc <pll_calc_divs+0x24>
		return -val;
1a002552:	f1cc 0c00 	rsb	ip, ip, #0
1a002556:	e7d4      	b.n	1a002502 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a002558:	3601      	adds	r6, #1
1a00255a:	2e03      	cmp	r6, #3
1a00255c:	dc01      	bgt.n	1a002562 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00255e:	2201      	movs	r2, #1
1a002560:	e7d9      	b.n	1a002516 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a002562:	3501      	adds	r5, #1
1a002564:	2d04      	cmp	r5, #4
1a002566:	dc01      	bgt.n	1a00256c <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a002568:	2600      	movs	r6, #0
1a00256a:	e7f6      	b.n	1a00255a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a00256c:	bcf0      	pop	{r4, r5, r6, r7}
1a00256e:	4770      	bx	lr
1a002570:	094c5eff 	.word	0x094c5eff
1a002574:	1312d000 	.word	0x1312d000

1a002578 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002578:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00257a:	b099      	sub	sp, #100	; 0x64
1a00257c:	4605      	mov	r5, r0
1a00257e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002580:	225c      	movs	r2, #92	; 0x5c
1a002582:	2100      	movs	r1, #0
1a002584:	a801      	add	r0, sp, #4
1a002586:	f002 fed5 	bl	1a005334 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00258a:	2380      	movs	r3, #128	; 0x80
1a00258c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00258e:	6963      	ldr	r3, [r4, #20]
1a002590:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002592:	7923      	ldrb	r3, [r4, #4]
1a002594:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002598:	4669      	mov	r1, sp
1a00259a:	4628      	mov	r0, r5
1a00259c:	f7ff ff9c 	bl	1a0024d8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0025a0:	9b06      	ldr	r3, [sp, #24]
1a0025a2:	42ab      	cmp	r3, r5
1a0025a4:	d027      	beq.n	1a0025f6 <pll_get_frac+0x7e>
	if (val < 0)
1a0025a6:	1aeb      	subs	r3, r5, r3
1a0025a8:	d42e      	bmi.n	1a002608 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0025aa:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0025ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0025ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0025b2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0025b4:	6963      	ldr	r3, [r4, #20]
1a0025b6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0025b8:	7923      	ldrb	r3, [r4, #4]
1a0025ba:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0025be:	a910      	add	r1, sp, #64	; 0x40
1a0025c0:	4628      	mov	r0, r5
1a0025c2:	f7ff ff89 	bl	1a0024d8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0025c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0025c8:	42ab      	cmp	r3, r5
1a0025ca:	d01f      	beq.n	1a00260c <pll_get_frac+0x94>
	if (val < 0)
1a0025cc:	1aeb      	subs	r3, r5, r3
1a0025ce:	d425      	bmi.n	1a00261c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0025d0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0025d2:	4b2b      	ldr	r3, [pc, #172]	; (1a002680 <pll_get_frac+0x108>)
1a0025d4:	429d      	cmp	r5, r3
1a0025d6:	d923      	bls.n	1a002620 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0025d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0025da:	1aed      	subs	r5, r5, r3
1a0025dc:	d433      	bmi.n	1a002646 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0025de:	42ae      	cmp	r6, r5
1a0025e0:	dc3b      	bgt.n	1a00265a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0025e2:	42be      	cmp	r6, r7
1a0025e4:	dc31      	bgt.n	1a00264a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0025e6:	466d      	mov	r5, sp
1a0025e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0025ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0025ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0025f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0025f4:	e006      	b.n	1a002604 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0025f6:	466d      	mov	r5, sp
1a0025f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0025fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0025fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002604:	b019      	add	sp, #100	; 0x64
1a002606:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002608:	425b      	negs	r3, r3
1a00260a:	e7ce      	b.n	1a0025aa <pll_get_frac+0x32>
		*ppll = pll[2];
1a00260c:	ad10      	add	r5, sp, #64	; 0x40
1a00260e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002612:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002616:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00261a:	e7f3      	b.n	1a002604 <pll_get_frac+0x8c>
		return -val;
1a00261c:	425b      	negs	r3, r3
1a00261e:	e7d7      	b.n	1a0025d0 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002620:	2340      	movs	r3, #64	; 0x40
1a002622:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002624:	6963      	ldr	r3, [r4, #20]
1a002626:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002628:	a908      	add	r1, sp, #32
1a00262a:	4628      	mov	r0, r5
1a00262c:	f7ff ff54 	bl	1a0024d8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002632:	42ab      	cmp	r3, r5
1a002634:	d1d0      	bne.n	1a0025d8 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002636:	ad08      	add	r5, sp, #32
1a002638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00263a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00263c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002644:	e7de      	b.n	1a002604 <pll_get_frac+0x8c>
		return -val;
1a002646:	426d      	negs	r5, r5
1a002648:	e7c9      	b.n	1a0025de <pll_get_frac+0x66>
			*ppll = pll[2];
1a00264a:	ad10      	add	r5, sp, #64	; 0x40
1a00264c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00264e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002650:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002658:	e7d4      	b.n	1a002604 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00265a:	42af      	cmp	r7, r5
1a00265c:	db07      	blt.n	1a00266e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00265e:	ad08      	add	r5, sp, #32
1a002660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002664:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002668:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00266c:	e7ca      	b.n	1a002604 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00266e:	ad10      	add	r5, sp, #64	; 0x40
1a002670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002674:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00267c:	e7c2      	b.n	1a002604 <pll_get_frac+0x8c>
1a00267e:	bf00      	nop
1a002680:	068e7780 	.word	0x068e7780

1a002684 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002684:	b430      	push	{r4, r5}
1a002686:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002688:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00268a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00268c:	e000      	b.n	1a002690 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00268e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002690:	281c      	cmp	r0, #28
1a002692:	d118      	bne.n	1a0026c6 <Chip_Clock_FindBaseClock+0x42>
1a002694:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002698:	0051      	lsls	r1, r2, #1
1a00269a:	4a0c      	ldr	r2, [pc, #48]	; (1a0026cc <Chip_Clock_FindBaseClock+0x48>)
1a00269c:	440a      	add	r2, r1
1a00269e:	7914      	ldrb	r4, [r2, #4]
1a0026a0:	4284      	cmp	r4, r0
1a0026a2:	d010      	beq.n	1a0026c6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0026a4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0026a8:	004a      	lsls	r2, r1, #1
1a0026aa:	4908      	ldr	r1, [pc, #32]	; (1a0026cc <Chip_Clock_FindBaseClock+0x48>)
1a0026ac:	5a8a      	ldrh	r2, [r1, r2]
1a0026ae:	42aa      	cmp	r2, r5
1a0026b0:	d8ed      	bhi.n	1a00268e <Chip_Clock_FindBaseClock+0xa>
1a0026b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0026b6:	0051      	lsls	r1, r2, #1
1a0026b8:	4a04      	ldr	r2, [pc, #16]	; (1a0026cc <Chip_Clock_FindBaseClock+0x48>)
1a0026ba:	440a      	add	r2, r1
1a0026bc:	8852      	ldrh	r2, [r2, #2]
1a0026be:	42aa      	cmp	r2, r5
1a0026c0:	d3e5      	bcc.n	1a00268e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0026c2:	4620      	mov	r0, r4
1a0026c4:	e7e4      	b.n	1a002690 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0026c6:	bc30      	pop	{r4, r5}
1a0026c8:	4770      	bx	lr
1a0026ca:	bf00      	nop
1a0026cc:	1a005de8 	.word	0x1a005de8

1a0026d0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0026d0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0026d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0026d6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0026d8:	4a0d      	ldr	r2, [pc, #52]	; (1a002710 <Chip_Clock_EnableCrystal+0x40>)
1a0026da:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0026dc:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0026e0:	6992      	ldr	r2, [r2, #24]
1a0026e2:	428a      	cmp	r2, r1
1a0026e4:	d001      	beq.n	1a0026ea <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0026e6:	4a0a      	ldr	r2, [pc, #40]	; (1a002710 <Chip_Clock_EnableCrystal+0x40>)
1a0026e8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0026ea:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0026ee:	4a09      	ldr	r2, [pc, #36]	; (1a002714 <Chip_Clock_EnableCrystal+0x44>)
1a0026f0:	6811      	ldr	r1, [r2, #0]
1a0026f2:	4a09      	ldr	r2, [pc, #36]	; (1a002718 <Chip_Clock_EnableCrystal+0x48>)
1a0026f4:	4291      	cmp	r1, r2
1a0026f6:	d901      	bls.n	1a0026fc <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0026f8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0026fc:	4a04      	ldr	r2, [pc, #16]	; (1a002710 <Chip_Clock_EnableCrystal+0x40>)
1a0026fe:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002700:	9b01      	ldr	r3, [sp, #4]
1a002702:	1e5a      	subs	r2, r3, #1
1a002704:	9201      	str	r2, [sp, #4]
1a002706:	2b00      	cmp	r3, #0
1a002708:	d1fa      	bne.n	1a002700 <Chip_Clock_EnableCrystal+0x30>
}
1a00270a:	b002      	add	sp, #8
1a00270c:	4770      	bx	lr
1a00270e:	bf00      	nop
1a002710:	40050000 	.word	0x40050000
1a002714:	1a005d50 	.word	0x1a005d50
1a002718:	01312cff 	.word	0x01312cff

1a00271c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00271c:	3012      	adds	r0, #18
1a00271e:	4b05      	ldr	r3, [pc, #20]	; (1a002734 <Chip_Clock_GetDividerSource+0x18>)
1a002720:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002724:	f010 0f01 	tst.w	r0, #1
1a002728:	d102      	bne.n	1a002730 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00272a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00272e:	4770      	bx	lr
		return CLKINPUT_PD;
1a002730:	2011      	movs	r0, #17
}
1a002732:	4770      	bx	lr
1a002734:	40050000 	.word	0x40050000

1a002738 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002738:	f100 0212 	add.w	r2, r0, #18
1a00273c:	4b03      	ldr	r3, [pc, #12]	; (1a00274c <Chip_Clock_GetDividerDivisor+0x14>)
1a00273e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002742:	4b03      	ldr	r3, [pc, #12]	; (1a002750 <Chip_Clock_GetDividerDivisor+0x18>)
1a002744:	5c18      	ldrb	r0, [r3, r0]
}
1a002746:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00274a:	4770      	bx	lr
1a00274c:	40050000 	.word	0x40050000
1a002750:	1a005de0 	.word	0x1a005de0

1a002754 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002754:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002756:	2810      	cmp	r0, #16
1a002758:	d80a      	bhi.n	1a002770 <Chip_Clock_GetClockInputHz+0x1c>
1a00275a:	e8df f000 	tbb	[pc, r0]
1a00275e:	0b44      	.short	0x0b44
1a002760:	0921180d 	.word	0x0921180d
1a002764:	2d2a2724 	.word	0x2d2a2724
1a002768:	34300909 	.word	0x34300909
1a00276c:	3c38      	.short	0x3c38
1a00276e:	40          	.byte	0x40
1a00276f:	00          	.byte	0x00
	uint32_t rate = 0;
1a002770:	2000      	movs	r0, #0
1a002772:	e03a      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002774:	481e      	ldr	r0, [pc, #120]	; (1a0027f0 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002776:	e038      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002778:	4b1e      	ldr	r3, [pc, #120]	; (1a0027f4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00277a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00277e:	f003 0307 	and.w	r3, r3, #7
1a002782:	2b04      	cmp	r3, #4
1a002784:	d001      	beq.n	1a00278a <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002786:	481c      	ldr	r0, [pc, #112]	; (1a0027f8 <Chip_Clock_GetClockInputHz+0xa4>)
1a002788:	e02f      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a00278a:	2000      	movs	r0, #0
1a00278c:	e02d      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00278e:	4b19      	ldr	r3, [pc, #100]	; (1a0027f4 <Chip_Clock_GetClockInputHz+0xa0>)
1a002790:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002794:	f003 0307 	and.w	r3, r3, #7
1a002798:	2b04      	cmp	r3, #4
1a00279a:	d027      	beq.n	1a0027ec <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a00279c:	4816      	ldr	r0, [pc, #88]	; (1a0027f8 <Chip_Clock_GetClockInputHz+0xa4>)
1a00279e:	e024      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0027a0:	4b16      	ldr	r3, [pc, #88]	; (1a0027fc <Chip_Clock_GetClockInputHz+0xa8>)
1a0027a2:	6818      	ldr	r0, [r3, #0]
		break;
1a0027a4:	e021      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0027a6:	4b16      	ldr	r3, [pc, #88]	; (1a002800 <Chip_Clock_GetClockInputHz+0xac>)
1a0027a8:	6818      	ldr	r0, [r3, #0]
		break;
1a0027aa:	e01e      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0027ac:	4b15      	ldr	r3, [pc, #84]	; (1a002804 <Chip_Clock_GetClockInputHz+0xb0>)
1a0027ae:	6818      	ldr	r0, [r3, #0]
		break;
1a0027b0:	e01b      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0027b2:	4b14      	ldr	r3, [pc, #80]	; (1a002804 <Chip_Clock_GetClockInputHz+0xb0>)
1a0027b4:	6858      	ldr	r0, [r3, #4]
		break;
1a0027b6:	e018      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0027b8:	f000 f868 	bl	1a00288c <Chip_Clock_GetMainPLLHz>
		break;
1a0027bc:	e015      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0027be:	2100      	movs	r1, #0
1a0027c0:	f000 f89a 	bl	1a0028f8 <Chip_Clock_GetDivRate>
		break;
1a0027c4:	e011      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0027c6:	2101      	movs	r1, #1
1a0027c8:	f000 f896 	bl	1a0028f8 <Chip_Clock_GetDivRate>
		break;
1a0027cc:	e00d      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0027ce:	2102      	movs	r1, #2
1a0027d0:	f000 f892 	bl	1a0028f8 <Chip_Clock_GetDivRate>
		break;
1a0027d4:	e009      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0027d6:	2103      	movs	r1, #3
1a0027d8:	f000 f88e 	bl	1a0028f8 <Chip_Clock_GetDivRate>
		break;
1a0027dc:	e005      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0027de:	2104      	movs	r1, #4
1a0027e0:	f000 f88a 	bl	1a0028f8 <Chip_Clock_GetDivRate>
		break;
1a0027e4:	e001      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a0027e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0027ea:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a0027ec:	4806      	ldr	r0, [pc, #24]	; (1a002808 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0027ee:	e7fc      	b.n	1a0027ea <Chip_Clock_GetClockInputHz+0x96>
1a0027f0:	00b71b00 	.word	0x00b71b00
1a0027f4:	40043000 	.word	0x40043000
1a0027f8:	017d7840 	.word	0x017d7840
1a0027fc:	1a005d24 	.word	0x1a005d24
1a002800:	1a005d50 	.word	0x1a005d50
1a002804:	10000cb0 	.word	0x10000cb0
1a002808:	02faf080 	.word	0x02faf080

1a00280c <Chip_Clock_CalcMainPLLValue>:
{
1a00280c:	b538      	push	{r3, r4, r5, lr}
1a00280e:	4605      	mov	r5, r0
1a002810:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002812:	7908      	ldrb	r0, [r1, #4]
1a002814:	f7ff ff9e 	bl	1a002754 <Chip_Clock_GetClockInputHz>
1a002818:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00281a:	4b19      	ldr	r3, [pc, #100]	; (1a002880 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00281c:	442b      	add	r3, r5
1a00281e:	4a19      	ldr	r2, [pc, #100]	; (1a002884 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002820:	4293      	cmp	r3, r2
1a002822:	d821      	bhi.n	1a002868 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002824:	b318      	cbz	r0, 1a00286e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002826:	2380      	movs	r3, #128	; 0x80
1a002828:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00282a:	2300      	movs	r3, #0
1a00282c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00282e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002830:	fbb5 f3f0 	udiv	r3, r5, r0
1a002834:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002836:	4a14      	ldr	r2, [pc, #80]	; (1a002888 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002838:	4295      	cmp	r5, r2
1a00283a:	d903      	bls.n	1a002844 <Chip_Clock_CalcMainPLLValue+0x38>
1a00283c:	fb03 f000 	mul.w	r0, r3, r0
1a002840:	42a8      	cmp	r0, r5
1a002842:	d007      	beq.n	1a002854 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002844:	4621      	mov	r1, r4
1a002846:	4628      	mov	r0, r5
1a002848:	f7ff fe96 	bl	1a002578 <pll_get_frac>
		if (!ppll->nsel) {
1a00284c:	68a3      	ldr	r3, [r4, #8]
1a00284e:	b18b      	cbz	r3, 1a002874 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002850:	3b01      	subs	r3, #1
1a002852:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002854:	6923      	ldr	r3, [r4, #16]
1a002856:	b183      	cbz	r3, 1a00287a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002858:	68e2      	ldr	r2, [r4, #12]
1a00285a:	b10a      	cbz	r2, 1a002860 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00285c:	3a01      	subs	r2, #1
1a00285e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002860:	3b01      	subs	r3, #1
1a002862:	6123      	str	r3, [r4, #16]
	return 0;
1a002864:	2000      	movs	r0, #0
}
1a002866:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00286c:	e7fb      	b.n	1a002866 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00286e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002872:	e7f8      	b.n	1a002866 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002878:	e7f5      	b.n	1a002866 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00287a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00287e:	e7f2      	b.n	1a002866 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002880:	ff6b3a10 	.word	0xff6b3a10
1a002884:	0b940510 	.word	0x0b940510
1a002888:	094c5eff 	.word	0x094c5eff

1a00288c <Chip_Clock_GetMainPLLHz>:
{
1a00288c:	b530      	push	{r4, r5, lr}
1a00288e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002890:	4d17      	ldr	r5, [pc, #92]	; (1a0028f0 <Chip_Clock_GetMainPLLHz+0x64>)
1a002892:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002894:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002898:	f7ff ff5c 	bl	1a002754 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00289c:	4b15      	ldr	r3, [pc, #84]	; (1a0028f4 <Chip_Clock_GetMainPLLHz+0x68>)
1a00289e:	681b      	ldr	r3, [r3, #0]
1a0028a0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0028a2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0028a4:	f013 0f01 	tst.w	r3, #1
1a0028a8:	d020      	beq.n	1a0028ec <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a0028aa:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0028ae:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0028b2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0028b6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0028ba:	3301      	adds	r3, #1
	n = nsel + 1;
1a0028bc:	3201      	adds	r2, #1
	p = ptab[psel];
1a0028be:	f10d 0c08 	add.w	ip, sp, #8
1a0028c2:	4461      	add	r1, ip
1a0028c4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0028c8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0028cc:	d108      	bne.n	1a0028e0 <Chip_Clock_GetMainPLLHz+0x54>
1a0028ce:	b93d      	cbnz	r5, 1a0028e0 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0028d0:	0049      	lsls	r1, r1, #1
1a0028d2:	fbb3 f3f1 	udiv	r3, r3, r1
1a0028d6:	fbb0 f0f2 	udiv	r0, r0, r2
1a0028da:	fb00 f003 	mul.w	r0, r0, r3
1a0028de:	e003      	b.n	1a0028e8 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a0028e0:	fbb0 f0f2 	udiv	r0, r0, r2
1a0028e4:	fb03 f000 	mul.w	r0, r3, r0
}
1a0028e8:	b003      	add	sp, #12
1a0028ea:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0028ec:	2000      	movs	r0, #0
1a0028ee:	e7fb      	b.n	1a0028e8 <Chip_Clock_GetMainPLLHz+0x5c>
1a0028f0:	40050000 	.word	0x40050000
1a0028f4:	1a005ddc 	.word	0x1a005ddc

1a0028f8 <Chip_Clock_GetDivRate>:
{
1a0028f8:	b538      	push	{r3, r4, r5, lr}
1a0028fa:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0028fc:	4608      	mov	r0, r1
1a0028fe:	f7ff ff0d 	bl	1a00271c <Chip_Clock_GetDividerSource>
1a002902:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002904:	4620      	mov	r0, r4
1a002906:	f7ff ff17 	bl	1a002738 <Chip_Clock_GetDividerDivisor>
1a00290a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00290c:	4628      	mov	r0, r5
1a00290e:	f7ff ff21 	bl	1a002754 <Chip_Clock_GetClockInputHz>
1a002912:	3401      	adds	r4, #1
}
1a002914:	fbb0 f0f4 	udiv	r0, r0, r4
1a002918:	bd38      	pop	{r3, r4, r5, pc}
1a00291a:	Address 0x000000001a00291a is out of bounds.


1a00291c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00291c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00291e:	f100 0416 	add.w	r4, r0, #22
1a002922:	00a4      	lsls	r4, r4, #2
1a002924:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002928:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a00292c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00292e:	281b      	cmp	r0, #27
1a002930:	d813      	bhi.n	1a00295a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002932:	2911      	cmp	r1, #17
1a002934:	d01a      	beq.n	1a00296c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002936:	4d0e      	ldr	r5, [pc, #56]	; (1a002970 <Chip_Clock_SetBaseClock+0x54>)
1a002938:	4025      	ands	r5, r4

			if (autoblocken) {
1a00293a:	b10a      	cbz	r2, 1a002940 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a00293c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002940:	b10b      	cbz	r3, 1a002946 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002942:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002946:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00294a:	3016      	adds	r0, #22
1a00294c:	0080      	lsls	r0, r0, #2
1a00294e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002952:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002956:	6045      	str	r5, [r0, #4]
1a002958:	e008      	b.n	1a00296c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00295a:	f044 0401 	orr.w	r4, r4, #1
1a00295e:	3016      	adds	r0, #22
1a002960:	0080      	lsls	r0, r0, #2
1a002962:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002966:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00296a:	6044      	str	r4, [r0, #4]
	}
}
1a00296c:	bc30      	pop	{r4, r5}
1a00296e:	4770      	bx	lr
1a002970:	e0fff7fe 	.word	0xe0fff7fe

1a002974 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002974:	281b      	cmp	r0, #27
1a002976:	d80c      	bhi.n	1a002992 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002978:	3016      	adds	r0, #22
1a00297a:	0080      	lsls	r0, r0, #2
1a00297c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002980:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002984:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002986:	f010 0f01 	tst.w	r0, #1
1a00298a:	d104      	bne.n	1a002996 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00298c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002990:	4770      	bx	lr
		return CLKINPUT_PD;
1a002992:	2011      	movs	r0, #17
1a002994:	4770      	bx	lr
		return CLKINPUT_PD;
1a002996:	2011      	movs	r0, #17
}
1a002998:	4770      	bx	lr

1a00299a <Chip_Clock_GetBaseClocktHz>:
{
1a00299a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00299c:	f7ff ffea 	bl	1a002974 <Chip_Clock_GetBaseClock>
1a0029a0:	f7ff fed8 	bl	1a002754 <Chip_Clock_GetClockInputHz>
}
1a0029a4:	bd08      	pop	{r3, pc}
1a0029a6:	Address 0x000000001a0029a6 is out of bounds.


1a0029a8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0029a8:	b971      	cbnz	r1, 1a0029c8 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0029aa:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0029ac:	b10a      	cbz	r2, 1a0029b2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0029ae:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0029b2:	2b02      	cmp	r3, #2
1a0029b4:	d00a      	beq.n	1a0029cc <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0029b6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0029ba:	d30a      	bcc.n	1a0029d2 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0029bc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0029c0:	4b06      	ldr	r3, [pc, #24]	; (1a0029dc <Chip_Clock_EnableOpts+0x34>)
1a0029c2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0029c6:	4770      	bx	lr
		reg |= (1 << 1);
1a0029c8:	2103      	movs	r1, #3
1a0029ca:	e7ef      	b.n	1a0029ac <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0029cc:	f041 0120 	orr.w	r1, r1, #32
1a0029d0:	e7f1      	b.n	1a0029b6 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0029d2:	3020      	adds	r0, #32
1a0029d4:	4b02      	ldr	r3, [pc, #8]	; (1a0029e0 <Chip_Clock_EnableOpts+0x38>)
1a0029d6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0029da:	4770      	bx	lr
1a0029dc:	40052000 	.word	0x40052000
1a0029e0:	40051000 	.word	0x40051000

1a0029e4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0029e4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0029e8:	d309      	bcc.n	1a0029fe <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0029ea:	4a09      	ldr	r2, [pc, #36]	; (1a002a10 <Chip_Clock_Enable+0x2c>)
1a0029ec:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0029f0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0029f4:	f043 0301 	orr.w	r3, r3, #1
1a0029f8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0029fc:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0029fe:	4a05      	ldr	r2, [pc, #20]	; (1a002a14 <Chip_Clock_Enable+0x30>)
1a002a00:	3020      	adds	r0, #32
1a002a02:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002a06:	f043 0301 	orr.w	r3, r3, #1
1a002a0a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002a0e:	4770      	bx	lr
1a002a10:	40052000 	.word	0x40052000
1a002a14:	40051000 	.word	0x40051000

1a002a18 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a002a18:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002a1c:	d309      	bcc.n	1a002a32 <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a002a1e:	4a09      	ldr	r2, [pc, #36]	; (1a002a44 <Chip_Clock_Disable+0x2c>)
1a002a20:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002a24:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002a28:	f023 0301 	bic.w	r3, r3, #1
1a002a2c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002a30:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a002a32:	4a05      	ldr	r2, [pc, #20]	; (1a002a48 <Chip_Clock_Disable+0x30>)
1a002a34:	3020      	adds	r0, #32
1a002a36:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002a3a:	f023 0301 	bic.w	r3, r3, #1
1a002a3e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002a42:	4770      	bx	lr
1a002a44:	40052000 	.word	0x40052000
1a002a48:	40051000 	.word	0x40051000

1a002a4c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002a4c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002a4e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002a52:	d309      	bcc.n	1a002a68 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002a54:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002a58:	4a0d      	ldr	r2, [pc, #52]	; (1a002a90 <Chip_Clock_GetRate+0x44>)
1a002a5a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002a5e:	f014 0f01 	tst.w	r4, #1
1a002a62:	d107      	bne.n	1a002a74 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002a64:	2000      	movs	r0, #0
	}

	return rate;
}
1a002a66:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002a68:	f100 0320 	add.w	r3, r0, #32
1a002a6c:	4a09      	ldr	r2, [pc, #36]	; (1a002a94 <Chip_Clock_GetRate+0x48>)
1a002a6e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002a72:	e7f4      	b.n	1a002a5e <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002a74:	f7ff fe06 	bl	1a002684 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002a78:	f7ff ff8f 	bl	1a00299a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002a7c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002a80:	d103      	bne.n	1a002a8a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002a82:	2301      	movs	r3, #1
		rate = rate / div;
1a002a84:	fbb0 f0f3 	udiv	r0, r0, r3
1a002a88:	e7ed      	b.n	1a002a66 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002a8a:	2302      	movs	r3, #2
1a002a8c:	e7fa      	b.n	1a002a84 <Chip_Clock_GetRate+0x38>
1a002a8e:	bf00      	nop
1a002a90:	40052000 	.word	0x40052000
1a002a94:	40051000 	.word	0x40051000

1a002a98 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002a98:	b570      	push	{r4, r5, r6, lr}
1a002a9a:	b08a      	sub	sp, #40	; 0x28
1a002a9c:	4605      	mov	r5, r0
1a002a9e:	460e      	mov	r6, r1
1a002aa0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002aa2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002aa6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002aa8:	2806      	cmp	r0, #6
1a002aaa:	d018      	beq.n	1a002ade <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002aac:	2300      	movs	r3, #0
1a002aae:	2201      	movs	r2, #1
1a002ab0:	4629      	mov	r1, r5
1a002ab2:	2004      	movs	r0, #4
1a002ab4:	f7ff ff32 	bl	1a00291c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002ab8:	4a4a      	ldr	r2, [pc, #296]	; (1a002be4 <Chip_SetupCoreClock+0x14c>)
1a002aba:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002abc:	f043 0301 	orr.w	r3, r3, #1
1a002ac0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002ac2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002ac6:	a901      	add	r1, sp, #4
1a002ac8:	4630      	mov	r0, r6
1a002aca:	f7ff fe9f 	bl	1a00280c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002ace:	4b46      	ldr	r3, [pc, #280]	; (1a002be8 <Chip_SetupCoreClock+0x150>)
1a002ad0:	429e      	cmp	r6, r3
1a002ad2:	d916      	bls.n	1a002b02 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002ad4:	9b01      	ldr	r3, [sp, #4]
1a002ad6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002ada:	d003      	beq.n	1a002ae4 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002adc:	e7fe      	b.n	1a002adc <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a002ade:	f7ff fdf7 	bl	1a0026d0 <Chip_Clock_EnableCrystal>
1a002ae2:	e7e3      	b.n	1a002aac <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a002ae4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002ae8:	d005      	beq.n	1a002af6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002aee:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002af0:	2500      	movs	r5, #0
			direct = 1;
1a002af2:	2601      	movs	r6, #1
1a002af4:	e007      	b.n	1a002b06 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002af6:	9b04      	ldr	r3, [sp, #16]
1a002af8:	3301      	adds	r3, #1
1a002afa:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002afc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002afe:	2600      	movs	r6, #0
1a002b00:	e001      	b.n	1a002b06 <Chip_SetupCoreClock+0x6e>
1a002b02:	2500      	movs	r5, #0
1a002b04:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002b06:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002b0a:	9b01      	ldr	r3, [sp, #4]
1a002b0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002b10:	9a05      	ldr	r2, [sp, #20]
1a002b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002b16:	9a03      	ldr	r2, [sp, #12]
1a002b18:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002b1c:	9a04      	ldr	r2, [sp, #16]
1a002b1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002b22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002b26:	4a2f      	ldr	r2, [pc, #188]	; (1a002be4 <Chip_SetupCoreClock+0x14c>)
1a002b28:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002b2a:	4b2e      	ldr	r3, [pc, #184]	; (1a002be4 <Chip_SetupCoreClock+0x14c>)
1a002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002b2e:	f013 0f01 	tst.w	r3, #1
1a002b32:	d0fa      	beq.n	1a002b2a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002b34:	2300      	movs	r3, #0
1a002b36:	2201      	movs	r2, #1
1a002b38:	2109      	movs	r1, #9
1a002b3a:	2004      	movs	r0, #4
1a002b3c:	f7ff feee 	bl	1a00291c <Chip_Clock_SetBaseClock>

	if (direct) {
1a002b40:	b306      	cbz	r6, 1a002b84 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002b42:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002b46:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002b4a:	1e5a      	subs	r2, r3, #1
1a002b4c:	9209      	str	r2, [sp, #36]	; 0x24
1a002b4e:	2b00      	cmp	r3, #0
1a002b50:	d1fa      	bne.n	1a002b48 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002b52:	9b01      	ldr	r3, [sp, #4]
1a002b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002b58:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002b5a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002b5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002b62:	9a05      	ldr	r2, [sp, #20]
1a002b64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002b68:	9a03      	ldr	r2, [sp, #12]
1a002b6a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002b6e:	9a04      	ldr	r2, [sp, #16]
1a002b70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002b74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002b78:	4a1a      	ldr	r2, [pc, #104]	; (1a002be4 <Chip_SetupCoreClock+0x14c>)
1a002b7a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002b7c:	2c00      	cmp	r4, #0
1a002b7e:	d12e      	bne.n	1a002bde <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002b80:	b00a      	add	sp, #40	; 0x28
1a002b82:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a002b84:	2d00      	cmp	r5, #0
1a002b86:	d0f9      	beq.n	1a002b7c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002b88:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002b8c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002b90:	1e5a      	subs	r2, r3, #1
1a002b92:	9209      	str	r2, [sp, #36]	; 0x24
1a002b94:	2b00      	cmp	r3, #0
1a002b96:	d1fa      	bne.n	1a002b8e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a002b98:	9b04      	ldr	r3, [sp, #16]
1a002b9a:	1e5a      	subs	r2, r3, #1
1a002b9c:	9204      	str	r2, [sp, #16]
1a002b9e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002ba2:	9b01      	ldr	r3, [sp, #4]
1a002ba4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002ba8:	9905      	ldr	r1, [sp, #20]
1a002baa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002bae:	9903      	ldr	r1, [sp, #12]
1a002bb0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002bb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002bbc:	4a09      	ldr	r2, [pc, #36]	; (1a002be4 <Chip_SetupCoreClock+0x14c>)
1a002bbe:	6453      	str	r3, [r2, #68]	; 0x44
1a002bc0:	e7dc      	b.n	1a002b7c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002bc2:	480a      	ldr	r0, [pc, #40]	; (1a002bec <Chip_SetupCoreClock+0x154>)
1a002bc4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002bc8:	78cb      	ldrb	r3, [r1, #3]
1a002bca:	788a      	ldrb	r2, [r1, #2]
1a002bcc:	7849      	ldrb	r1, [r1, #1]
1a002bce:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002bd2:	f7ff fea3 	bl	1a00291c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002bd6:	3401      	adds	r4, #1
1a002bd8:	2c11      	cmp	r4, #17
1a002bda:	d9f2      	bls.n	1a002bc2 <Chip_SetupCoreClock+0x12a>
1a002bdc:	e7d0      	b.n	1a002b80 <Chip_SetupCoreClock+0xe8>
1a002bde:	2400      	movs	r4, #0
1a002be0:	e7fa      	b.n	1a002bd8 <Chip_SetupCoreClock+0x140>
1a002be2:	bf00      	nop
1a002be4:	40050000 	.word	0x40050000
1a002be8:	068e7780 	.word	0x068e7780
1a002bec:	1a005e54 	.word	0x1a005e54

1a002bf0 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002bf0:	4770      	bx	lr
1a002bf2:	Address 0x000000001a002bf2 is out of bounds.


1a002bf4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002bf4:	2901      	cmp	r1, #1
1a002bf6:	d109      	bne.n	1a002c0c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002bf8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002bfc:	0082      	lsls	r2, r0, #2
1a002bfe:	4b04      	ldr	r3, [pc, #16]	; (1a002c10 <Chip_I2C_EventHandler+0x1c>)
1a002c00:	4413      	add	r3, r2
1a002c02:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002c04:	7d13      	ldrb	r3, [r2, #20]
1a002c06:	b2db      	uxtb	r3, r3
1a002c08:	2b04      	cmp	r3, #4
1a002c0a:	d0fb      	beq.n	1a002c04 <Chip_I2C_EventHandler+0x10>
}
1a002c0c:	4770      	bx	lr
1a002c0e:	bf00      	nop
1a002c10:	10000bfc 	.word	0x10000bfc

1a002c14 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002c14:	b570      	push	{r4, r5, r6, lr}
1a002c16:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002c18:	4e06      	ldr	r6, [pc, #24]	; (1a002c34 <Chip_I2C_Init+0x20>)
1a002c1a:	00c4      	lsls	r4, r0, #3
1a002c1c:	1a22      	subs	r2, r4, r0
1a002c1e:	0093      	lsls	r3, r2, #2
1a002c20:	4433      	add	r3, r6
1a002c22:	8898      	ldrh	r0, [r3, #4]
1a002c24:	f7ff fede 	bl	1a0029e4 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002c28:	1b64      	subs	r4, r4, r5
1a002c2a:	00a3      	lsls	r3, r4, #2
1a002c2c:	58f3      	ldr	r3, [r6, r3]
1a002c2e:	226c      	movs	r2, #108	; 0x6c
1a002c30:	619a      	str	r2, [r3, #24]
}
1a002c32:	bd70      	pop	{r4, r5, r6, pc}
1a002c34:	10000bfc 	.word	0x10000bfc

1a002c38 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002c3c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a002c3e:	4e0b      	ldr	r6, [pc, #44]	; (1a002c6c <Chip_I2C_SetClockRate+0x34>)
1a002c40:	00c5      	lsls	r5, r0, #3
1a002c42:	1a2b      	subs	r3, r5, r0
1a002c44:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002c48:	eb06 0308 	add.w	r3, r6, r8
1a002c4c:	8898      	ldrh	r0, [r3, #4]
1a002c4e:	f7ff fefd 	bl	1a002a4c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002c52:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002c56:	f856 3008 	ldr.w	r3, [r6, r8]
1a002c5a:	0842      	lsrs	r2, r0, #1
1a002c5c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002c5e:	f856 3008 	ldr.w	r3, [r6, r8]
1a002c62:	691a      	ldr	r2, [r3, #16]
1a002c64:	1a80      	subs	r0, r0, r2
1a002c66:	6158      	str	r0, [r3, #20]
}
1a002c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002c6c:	10000bfc 	.word	0x10000bfc

1a002c70 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002c70:	4b03      	ldr	r3, [pc, #12]	; (1a002c80 <Chip_SSP_GetClockIndex+0x10>)
1a002c72:	4298      	cmp	r0, r3
1a002c74:	d001      	beq.n	1a002c7a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002c76:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002c78:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002c7a:	20a5      	movs	r0, #165	; 0xa5
1a002c7c:	4770      	bx	lr
1a002c7e:	bf00      	nop
1a002c80:	400c5000 	.word	0x400c5000

1a002c84 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002c84:	4b04      	ldr	r3, [pc, #16]	; (1a002c98 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a002c86:	4298      	cmp	r0, r3
1a002c88:	d002      	beq.n	1a002c90 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002c8a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a002c8e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a002c90:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002c94:	4770      	bx	lr
1a002c96:	bf00      	nop
1a002c98:	400c5000 	.word	0x400c5000

1a002c9c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002c9c:	6803      	ldr	r3, [r0, #0]
1a002c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a002ca2:	0209      	lsls	r1, r1, #8
1a002ca4:	b289      	uxth	r1, r1
1a002ca6:	4319      	orrs	r1, r3
1a002ca8:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a002caa:	6102      	str	r2, [r0, #16]
}
1a002cac:	4770      	bx	lr

1a002cae <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a002cae:	b570      	push	{r4, r5, r6, lr}
1a002cb0:	4606      	mov	r6, r0
1a002cb2:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002cb4:	f7ff ffe6 	bl	1a002c84 <Chip_SSP_GetPeriphClockIndex>
1a002cb8:	f7ff fec8 	bl	1a002a4c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002cbc:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a002cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a002cc2:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a002cc4:	e000      	b.n	1a002cc8 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002cc6:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a002cc8:	42ab      	cmp	r3, r5
1a002cca:	d90b      	bls.n	1a002ce4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002ccc:	1c4c      	adds	r4, r1, #1
1a002cce:	fb02 f304 	mul.w	r3, r2, r4
1a002cd2:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002cd6:	429d      	cmp	r5, r3
1a002cd8:	d2f6      	bcs.n	1a002cc8 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a002cda:	2cff      	cmp	r4, #255	; 0xff
1a002cdc:	d9f3      	bls.n	1a002cc6 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a002cde:	3202      	adds	r2, #2
				cr0_div = 0;
1a002ce0:	2100      	movs	r1, #0
1a002ce2:	e7f1      	b.n	1a002cc8 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002ce4:	4630      	mov	r0, r6
1a002ce6:	f7ff ffd9 	bl	1a002c9c <Chip_SSP_SetClockRate>
}
1a002cea:	bd70      	pop	{r4, r5, r6, pc}

1a002cec <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002cec:	b510      	push	{r4, lr}
1a002cee:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002cf0:	f7ff ffbe 	bl	1a002c70 <Chip_SSP_GetClockIndex>
1a002cf4:	f7ff fe76 	bl	1a0029e4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002cf8:	4620      	mov	r0, r4
1a002cfa:	f7ff ffc3 	bl	1a002c84 <Chip_SSP_GetPeriphClockIndex>
1a002cfe:	f7ff fe71 	bl	1a0029e4 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002d02:	6863      	ldr	r3, [r4, #4]
1a002d04:	f023 0304 	bic.w	r3, r3, #4
1a002d08:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002d0a:	6823      	ldr	r3, [r4, #0]
1a002d0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002d10:	f043 0307 	orr.w	r3, r3, #7
1a002d14:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002d16:	4902      	ldr	r1, [pc, #8]	; (1a002d20 <Chip_SSP_Init+0x34>)
1a002d18:	4620      	mov	r0, r4
1a002d1a:	f7ff ffc8 	bl	1a002cae <Chip_SSP_SetBitRate>
}
1a002d1e:	bd10      	pop	{r4, pc}
1a002d20:	000186a0 	.word	0x000186a0

1a002d24 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a002d24:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a002d26:	4a0b      	ldr	r2, [pc, #44]	; (1a002d54 <SystemInit+0x30>)
1a002d28:	4b0b      	ldr	r3, [pc, #44]	; (1a002d58 <SystemInit+0x34>)
1a002d2a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002d2c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a002d30:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a002d32:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a002d36:	2b20      	cmp	r3, #32
1a002d38:	d004      	beq.n	1a002d44 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a002d3a:	f7ff fa43 	bl	1a0021c4 <Board_SystemInit>
   Board_Init();
1a002d3e:	f7ff f9d3 	bl	1a0020e8 <Board_Init>
}
1a002d42:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002d44:	4a04      	ldr	r2, [pc, #16]	; (1a002d58 <SystemInit+0x34>)
1a002d46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a002d4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002d4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a002d52:	e7f2      	b.n	1a002d3a <SystemInit+0x16>
1a002d54:	1a000000 	.word	0x1a000000
1a002d58:	e000ed00 	.word	0xe000ed00

1a002d5c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002d5c:	4b04      	ldr	r3, [pc, #16]	; (1a002d70 <cyclesCounterInit+0x14>)
1a002d5e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a002d60:	4a04      	ldr	r2, [pc, #16]	; (1a002d74 <cyclesCounterInit+0x18>)
1a002d62:	6813      	ldr	r3, [r2, #0]
1a002d64:	f043 0301 	orr.w	r3, r3, #1
1a002d68:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002d6a:	2001      	movs	r0, #1
1a002d6c:	4770      	bx	lr
1a002d6e:	bf00      	nop
1a002d70:	10000c34 	.word	0x10000c34
1a002d74:	e0001000 	.word	0xe0001000

1a002d78 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a002d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002d7c:	4680      	mov	r8, r0
1a002d7e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a002d80:	4c19      	ldr	r4, [pc, #100]	; (1a002de8 <uartInit+0x70>)
1a002d82:	0045      	lsls	r5, r0, #1
1a002d84:	182a      	adds	r2, r5, r0
1a002d86:	0093      	lsls	r3, r2, #2
1a002d88:	18e6      	adds	r6, r4, r3
1a002d8a:	58e7      	ldr	r7, [r4, r3]
1a002d8c:	4638      	mov	r0, r7
1a002d8e:	f7ff fa35 	bl	1a0021fc <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a002d92:	4649      	mov	r1, r9
1a002d94:	4638      	mov	r0, r7
1a002d96:	f7ff fa5b 	bl	1a002250 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a002d9a:	2307      	movs	r3, #7
1a002d9c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002d9e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a002da0:	2301      	movs	r3, #1
1a002da2:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a002da4:	7930      	ldrb	r0, [r6, #4]
1a002da6:	7973      	ldrb	r3, [r6, #5]
1a002da8:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002daa:	f042 0218 	orr.w	r2, r2, #24
1a002dae:	490f      	ldr	r1, [pc, #60]	; (1a002dec <uartInit+0x74>)
1a002db0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002db8:	79f0      	ldrb	r0, [r6, #7]
1a002dba:	7a33      	ldrb	r3, [r6, #8]
1a002dbc:	7a72      	ldrb	r2, [r6, #9]
1a002dbe:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002dc2:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a002dca:	f1b8 0f01 	cmp.w	r8, #1
1a002dce:	d001      	beq.n	1a002dd4 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a002dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002dd4:	4a06      	ldr	r2, [pc, #24]	; (1a002df0 <uartInit+0x78>)
1a002dd6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002dd8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002dde:	221a      	movs	r2, #26
1a002de0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a002de4:	e7f4      	b.n	1a002dd0 <uartInit+0x58>
1a002de6:	bf00      	nop
1a002de8:	1a005e9c 	.word	0x1a005e9c
1a002dec:	40086000 	.word	0x40086000
1a002df0:	40081000 	.word	0x40081000

1a002df4 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a002df4:	4b01      	ldr	r3, [pc, #4]	; (1a002dfc <tickRead+0x8>)
1a002df6:	e9d3 0100 	ldrd	r0, r1, [r3]
1a002dfa:	4770      	bx	lr
1a002dfc:	10000cc0 	.word	0x10000cc0

1a002e00 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a002e00:	b118      	cbz	r0, 1a002e0a <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a002e02:	4b04      	ldr	r3, [pc, #16]	; (1a002e14 <tickPowerSet+0x14>)
1a002e04:	2207      	movs	r2, #7
1a002e06:	601a      	str	r2, [r3, #0]
1a002e08:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a002e0a:	4b02      	ldr	r3, [pc, #8]	; (1a002e14 <tickPowerSet+0x14>)
1a002e0c:	2200      	movs	r2, #0
1a002e0e:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a002e10:	4770      	bx	lr
1a002e12:	bf00      	nop
1a002e14:	e000e010 	.word	0xe000e010

1a002e18 <tickInit>:
{
1a002e18:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a002e1a:	ea50 0401 	orrs.w	r4, r0, r1
1a002e1e:	d02a      	beq.n	1a002e76 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a002e20:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a002e24:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a002e28:	2b00      	cmp	r3, #0
1a002e2a:	bf08      	it	eq
1a002e2c:	2a32      	cmpeq	r2, #50	; 0x32
1a002e2e:	d227      	bcs.n	1a002e80 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a002e30:	4b14      	ldr	r3, [pc, #80]	; (1a002e84 <tickInit+0x6c>)
1a002e32:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a002e36:	4b14      	ldr	r3, [pc, #80]	; (1a002e88 <tickInit+0x70>)
1a002e38:	681b      	ldr	r3, [r3, #0]
1a002e3a:	fba3 4500 	umull	r4, r5, r3, r0
1a002e3e:	fb03 5501 	mla	r5, r3, r1, r5
1a002e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a002e46:	2300      	movs	r3, #0
1a002e48:	4620      	mov	r0, r4
1a002e4a:	4629      	mov	r1, r5
1a002e4c:	f002 f8bc 	bl	1a004fc8 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a002e50:	3801      	subs	r0, #1
1a002e52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a002e56:	d209      	bcs.n	1a002e6c <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a002e58:	4b0c      	ldr	r3, [pc, #48]	; (1a002e8c <tickInit+0x74>)
1a002e5a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a002e5c:	4a0c      	ldr	r2, [pc, #48]	; (1a002e90 <tickInit+0x78>)
1a002e5e:	21e0      	movs	r1, #224	; 0xe0
1a002e60:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a002e64:	2200      	movs	r2, #0
1a002e66:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a002e68:	2207      	movs	r2, #7
1a002e6a:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a002e6c:	2001      	movs	r0, #1
1a002e6e:	f7ff ffc7 	bl	1a002e00 <tickPowerSet>
      bool_t ret_val = 1;
1a002e72:	2001      	movs	r0, #1
}
1a002e74:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a002e76:	2000      	movs	r0, #0
1a002e78:	f7ff ffc2 	bl	1a002e00 <tickPowerSet>
         ret_val = 0;
1a002e7c:	2000      	movs	r0, #0
1a002e7e:	e7f9      	b.n	1a002e74 <tickInit+0x5c>
            ret_val = 0;
1a002e80:	2000      	movs	r0, #0
1a002e82:	e7f7      	b.n	1a002e74 <tickInit+0x5c>
1a002e84:	10000c38 	.word	0x10000c38
1a002e88:	10000d6c 	.word	0x10000d6c
1a002e8c:	e000e010 	.word	0xe000e010
1a002e90:	e000ed00 	.word	0xe000ed00

1a002e94 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a002e94:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a002e96:	4a07      	ldr	r2, [pc, #28]	; (1a002eb4 <SysTick_Handler+0x20>)
1a002e98:	6813      	ldr	r3, [r2, #0]
1a002e9a:	6851      	ldr	r1, [r2, #4]
1a002e9c:	3301      	adds	r3, #1
1a002e9e:	f141 0100 	adc.w	r1, r1, #0
1a002ea2:	6013      	str	r3, [r2, #0]
1a002ea4:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002ea6:	4b04      	ldr	r3, [pc, #16]	; (1a002eb8 <SysTick_Handler+0x24>)
1a002ea8:	681b      	ldr	r3, [r3, #0]
1a002eaa:	b113      	cbz	r3, 1a002eb2 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a002eac:	4a03      	ldr	r2, [pc, #12]	; (1a002ebc <SysTick_Handler+0x28>)
1a002eae:	6810      	ldr	r0, [r2, #0]
1a002eb0:	4798      	blx	r3
   }
}
1a002eb2:	bd08      	pop	{r3, pc}
1a002eb4:	10000cc0 	.word	0x10000cc0
1a002eb8:	10000cc8 	.word	0x10000cc8
1a002ebc:	10000cb8 	.word	0x10000cb8

1a002ec0 <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a002ec0:	b530      	push	{r4, r5, lr}
1a002ec2:	b083      	sub	sp, #12
   T_FIL3  ---- 7   ADC0_0 (ANALOG_SEL)
   T_COL1  ---- 132 ADC0_4 (ANALOG_SEL)
   ENET_MDC --- 140 ADC1_6 (ANALOG_SEL)
   */
   
   switch(config) {
1a002ec4:	b118      	cbz	r0, 1a002ece <adcInit+0xe>
1a002ec6:	2801      	cmp	r0, #1
1a002ec8:	d04a      	beq.n	1a002f60 <adcInit+0xa0>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a002eca:	b003      	add	sp, #12
1a002ecc:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a002ece:	4b26      	ldr	r3, [pc, #152]	; (1a002f68 <adcInit+0xa8>)
1a002ed0:	466d      	mov	r5, sp
1a002ed2:	e893 0003 	ldmia.w	r3, {r0, r1}
1a002ed6:	e885 0003 	stmia.w	r5, {r0, r1}
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a002eda:	4c24      	ldr	r4, [pc, #144]	; (1a002f6c <adcInit+0xac>)
1a002edc:	4629      	mov	r1, r5
1a002ede:	4620      	mov	r0, r4
1a002ee0:	f7ff fa6e 	bl	1a0023c0 <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a002ee4:	2100      	movs	r1, #0
1a002ee6:	4620      	mov	r0, r4
1a002ee8:	f7ff fada 	bl	1a0024a0 <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a002eec:	4a20      	ldr	r2, [pc, #128]	; (1a002f70 <adcInit+0xb0>)
1a002eee:	4629      	mov	r1, r5
1a002ef0:	4620      	mov	r0, r4
1a002ef2:	f7ff faa1 	bl	1a002438 <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH1, DISABLE );
1a002ef6:	2200      	movs	r2, #0
1a002ef8:	2101      	movs	r1, #1
1a002efa:	4620      	mov	r0, r4
1a002efc:	f7ff fabb 	bl	1a002476 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a002f00:	2200      	movs	r2, #0
1a002f02:	2101      	movs	r1, #1
1a002f04:	4620      	mov	r0, r4
1a002f06:	f7ff fa86 	bl	1a002416 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a002f0a:	2200      	movs	r2, #0
1a002f0c:	2102      	movs	r1, #2
1a002f0e:	4620      	mov	r0, r4
1a002f10:	f7ff fab1 	bl	1a002476 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a002f14:	2200      	movs	r2, #0
1a002f16:	2102      	movs	r1, #2
1a002f18:	4620      	mov	r0, r4
1a002f1a:	f7ff fa7c 	bl	1a002416 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a002f1e:	2200      	movs	r2, #0
1a002f20:	2103      	movs	r1, #3
1a002f22:	4620      	mov	r0, r4
1a002f24:	f7ff faa7 	bl	1a002476 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a002f28:	2200      	movs	r2, #0
1a002f2a:	2103      	movs	r1, #3
1a002f2c:	4620      	mov	r0, r4
1a002f2e:	f7ff fa72 	bl	1a002416 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a002f32:	2200      	movs	r2, #0
1a002f34:	2104      	movs	r1, #4
1a002f36:	4620      	mov	r0, r4
1a002f38:	f7ff fa9d 	bl	1a002476 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a002f3c:	2200      	movs	r2, #0
1a002f3e:	2104      	movs	r1, #4
1a002f40:	4620      	mov	r0, r4
1a002f42:	f7ff fa68 	bl	1a002416 <Chip_ADC_Int_SetChannelCmd>
	LPC_SCU->ENAIO[ADC_ID] |= 1UL << channel;
1a002f46:	4a0b      	ldr	r2, [pc, #44]	; (1a002f74 <adcInit+0xb4>)
1a002f48:	f8d2 3c88 	ldr.w	r3, [r2, #3208]	; 0xc88
1a002f4c:	f043 0310 	orr.w	r3, r3, #16
1a002f50:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH5, DISABLE ); // Revisar codigo
1a002f54:	2200      	movs	r2, #0
1a002f56:	2105      	movs	r1, #5
1a002f58:	4620      	mov	r0, r4
1a002f5a:	f7ff fa5c 	bl	1a002416 <Chip_ADC_Int_SetChannelCmd>
      break;
1a002f5e:	e7b4      	b.n	1a002eca <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a002f60:	4802      	ldr	r0, [pc, #8]	; (1a002f6c <adcInit+0xac>)
1a002f62:	f7ff fa4d 	bl	1a002400 <Chip_ADC_DeInit>
}
1a002f66:	e7b0      	b.n	1a002eca <adcInit+0xa>
1a002f68:	1a005ee4 	.word	0x1a005ee4
1a002f6c:	400e3000 	.word	0x400e3000
1a002f70:	00030d40 	.word	0x00030d40
1a002f74:	40086000 	.word	0x40086000

1a002f78 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002f78:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002f7a:	4d0b      	ldr	r5, [pc, #44]	; (1a002fa8 <gpioObtainPinInit+0x30>)
1a002f7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002f80:	182c      	adds	r4, r5, r0
1a002f82:	5628      	ldrsb	r0, [r5, r0]
1a002f84:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002f86:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002f8a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002f8c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002f90:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002f92:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002f96:	9b02      	ldr	r3, [sp, #8]
1a002f98:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002f9a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002f9e:	9b03      	ldr	r3, [sp, #12]
1a002fa0:	701a      	strb	r2, [r3, #0]
}
1a002fa2:	bc30      	pop	{r4, r5}
1a002fa4:	4770      	bx	lr
1a002fa6:	bf00      	nop
1a002fa8:	1a005eec 	.word	0x1a005eec

1a002fac <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a002fac:	f110 0f02 	cmn.w	r0, #2
1a002fb0:	f000 80c7 	beq.w	1a003142 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a002fb4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002fb8:	f000 80c5 	beq.w	1a003146 <gpioInit+0x19a>
{
1a002fbc:	b570      	push	{r4, r5, r6, lr}
1a002fbe:	b084      	sub	sp, #16
1a002fc0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002fc2:	2300      	movs	r3, #0
1a002fc4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002fc8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002fcc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002fd0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002fd4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002fd8:	f10d 030b 	add.w	r3, sp, #11
1a002fdc:	9301      	str	r3, [sp, #4]
1a002fde:	ab03      	add	r3, sp, #12
1a002fe0:	9300      	str	r3, [sp, #0]
1a002fe2:	f10d 030d 	add.w	r3, sp, #13
1a002fe6:	f10d 020e 	add.w	r2, sp, #14
1a002fea:	f10d 010f 	add.w	r1, sp, #15
1a002fee:	f7ff ffc3 	bl	1a002f78 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002ff2:	2c05      	cmp	r4, #5
1a002ff4:	f200 80a9 	bhi.w	1a00314a <gpioInit+0x19e>
1a002ff8:	e8df f004 	tbb	[pc, r4]
1a002ffc:	45278109 	.word	0x45278109
1a003000:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003002:	4853      	ldr	r0, [pc, #332]	; (1a003150 <gpioInit+0x1a4>)
1a003004:	f7ff fdf4 	bl	1a002bf0 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003008:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00300a:	b004      	add	sp, #16
1a00300c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00300e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003012:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003016:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00301a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00301e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003022:	494c      	ldr	r1, [pc, #304]	; (1a003154 <gpioInit+0x1a8>)
1a003024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003028:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00302c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003030:	2001      	movs	r0, #1
1a003032:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003036:	4c46      	ldr	r4, [pc, #280]	; (1a003150 <gpioInit+0x1a4>)
1a003038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00303c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003040:	ea22 0201 	bic.w	r2, r2, r1
1a003044:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003048:	e7df      	b.n	1a00300a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00304a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00304e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003052:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003056:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00305a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00305e:	493d      	ldr	r1, [pc, #244]	; (1a003154 <gpioInit+0x1a8>)
1a003060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003064:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003068:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00306c:	2001      	movs	r0, #1
1a00306e:	fa00 f102 	lsl.w	r1, r0, r2
1a003072:	4c37      	ldr	r4, [pc, #220]	; (1a003150 <gpioInit+0x1a4>)
1a003074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003078:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00307c:	ea22 0201 	bic.w	r2, r2, r1
1a003080:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003084:	e7c1      	b.n	1a00300a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003086:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00308a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00308e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003092:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003096:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00309a:	492e      	ldr	r1, [pc, #184]	; (1a003154 <gpioInit+0x1a8>)
1a00309c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0030a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0030a4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0030a8:	2001      	movs	r0, #1
1a0030aa:	fa00 f102 	lsl.w	r1, r0, r2
1a0030ae:	4c28      	ldr	r4, [pc, #160]	; (1a003150 <gpioInit+0x1a4>)
1a0030b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0030b4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0030b8:	ea22 0201 	bic.w	r2, r2, r1
1a0030bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0030c0:	e7a3      	b.n	1a00300a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0030c2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0030c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0030ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0030ce:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0030d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0030d6:	491f      	ldr	r1, [pc, #124]	; (1a003154 <gpioInit+0x1a8>)
1a0030d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0030dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0030e0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0030e4:	2001      	movs	r0, #1
1a0030e6:	fa00 f102 	lsl.w	r1, r0, r2
1a0030ea:	4c19      	ldr	r4, [pc, #100]	; (1a003150 <gpioInit+0x1a4>)
1a0030ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0030f0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0030f4:	ea22 0201 	bic.w	r2, r2, r1
1a0030f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0030fc:	e785      	b.n	1a00300a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0030fe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003102:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003106:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00310a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00310e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003112:	4910      	ldr	r1, [pc, #64]	; (1a003154 <gpioInit+0x1a8>)
1a003114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003118:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00311c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003120:	2001      	movs	r0, #1
1a003122:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003126:	4b0a      	ldr	r3, [pc, #40]	; (1a003150 <gpioInit+0x1a4>)
1a003128:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00312c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003130:	4331      	orrs	r1, r6
1a003132:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003136:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003138:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00313c:	2100      	movs	r1, #0
1a00313e:	5499      	strb	r1, [r3, r2]
1a003140:	e763      	b.n	1a00300a <gpioInit+0x5e>
	  return FALSE;
1a003142:	2000      	movs	r0, #0
1a003144:	4770      	bx	lr
	  return FALSE;
1a003146:	2000      	movs	r0, #0
}
1a003148:	4770      	bx	lr
      ret_val = 0;
1a00314a:	2000      	movs	r0, #0
1a00314c:	e75d      	b.n	1a00300a <gpioInit+0x5e>
1a00314e:	bf00      	nop
1a003150:	400f4000 	.word	0x400f4000
1a003154:	40086000 	.word	0x40086000

1a003158 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a003158:	f110 0f02 	cmn.w	r0, #2
1a00315c:	d02d      	beq.n	1a0031ba <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a00315e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003162:	d02c      	beq.n	1a0031be <gpioWrite+0x66>
{
1a003164:	b510      	push	{r4, lr}
1a003166:	b084      	sub	sp, #16
1a003168:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00316a:	2300      	movs	r3, #0
1a00316c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003170:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003174:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003178:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00317c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003180:	f10d 030b 	add.w	r3, sp, #11
1a003184:	9301      	str	r3, [sp, #4]
1a003186:	ab03      	add	r3, sp, #12
1a003188:	9300      	str	r3, [sp, #0]
1a00318a:	f10d 030d 	add.w	r3, sp, #13
1a00318e:	f10d 020e 	add.w	r2, sp, #14
1a003192:	f10d 010f 	add.w	r1, sp, #15
1a003196:	f7ff feef 	bl	1a002f78 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00319a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00319e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0031a2:	1c21      	adds	r1, r4, #0
1a0031a4:	bf18      	it	ne
1a0031a6:	2101      	movne	r1, #1
1a0031a8:	015b      	lsls	r3, r3, #5
1a0031aa:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0031ae:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0031b2:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a0031b4:	2001      	movs	r0, #1
}
1a0031b6:	b004      	add	sp, #16
1a0031b8:	bd10      	pop	{r4, pc}
	  return FALSE;
1a0031ba:	2000      	movs	r0, #0
1a0031bc:	4770      	bx	lr
	  return FALSE;
1a0031be:	2000      	movs	r0, #0
}
1a0031c0:	4770      	bx	lr
1a0031c2:	Address 0x000000001a0031c2 is out of bounds.


1a0031c4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0031c4:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0031c6:	4b04      	ldr	r3, [pc, #16]	; (1a0031d8 <USB0_IRQHandler+0x14>)
1a0031c8:	681b      	ldr	r3, [r3, #0]
1a0031ca:	681b      	ldr	r3, [r3, #0]
1a0031cc:	68db      	ldr	r3, [r3, #12]
1a0031ce:	4a03      	ldr	r2, [pc, #12]	; (1a0031dc <USB0_IRQHandler+0x18>)
1a0031d0:	6810      	ldr	r0, [r2, #0]
1a0031d2:	4798      	blx	r3
}
1a0031d4:	bd08      	pop	{r3, pc}
1a0031d6:	bf00      	nop
1a0031d8:	10000d70 	.word	0x10000d70
1a0031dc:	10000ccc 	.word	0x10000ccc

1a0031e0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0031e0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0031e2:	f7ff f96f 	bl	1a0024c4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0031e6:	4b1a      	ldr	r3, [pc, #104]	; (1a003250 <boardInit+0x70>)
1a0031e8:	6818      	ldr	r0, [r3, #0]
1a0031ea:	f7ff fdb7 	bl	1a002d5c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a0031ee:	2001      	movs	r0, #1
1a0031f0:	2100      	movs	r1, #0
1a0031f2:	f7ff fe11 	bl	1a002e18 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0031f6:	2105      	movs	r1, #5
1a0031f8:	2000      	movs	r0, #0
1a0031fa:	f7ff fed7 	bl	1a002fac <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0031fe:	2100      	movs	r1, #0
1a003200:	2024      	movs	r0, #36	; 0x24
1a003202:	f7ff fed3 	bl	1a002fac <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a003206:	2100      	movs	r1, #0
1a003208:	2025      	movs	r0, #37	; 0x25
1a00320a:	f7ff fecf 	bl	1a002fac <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00320e:	2100      	movs	r1, #0
1a003210:	2026      	movs	r0, #38	; 0x26
1a003212:	f7ff fecb 	bl	1a002fac <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a003216:	2100      	movs	r1, #0
1a003218:	2027      	movs	r0, #39	; 0x27
1a00321a:	f7ff fec7 	bl	1a002fac <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00321e:	2101      	movs	r1, #1
1a003220:	2028      	movs	r0, #40	; 0x28
1a003222:	f7ff fec3 	bl	1a002fac <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a003226:	2101      	movs	r1, #1
1a003228:	2029      	movs	r0, #41	; 0x29
1a00322a:	f7ff febf 	bl	1a002fac <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00322e:	2101      	movs	r1, #1
1a003230:	202a      	movs	r0, #42	; 0x2a
1a003232:	f7ff febb 	bl	1a002fac <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a003236:	2101      	movs	r1, #1
1a003238:	202b      	movs	r0, #43	; 0x2b
1a00323a:	f7ff feb7 	bl	1a002fac <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00323e:	2101      	movs	r1, #1
1a003240:	202c      	movs	r0, #44	; 0x2c
1a003242:	f7ff feb3 	bl	1a002fac <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a003246:	2101      	movs	r1, #1
1a003248:	202d      	movs	r0, #45	; 0x2d
1a00324a:	f7ff feaf 	bl	1a002fac <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00324e:	bd08      	pop	{r3, pc}
1a003250:	10000d6c 	.word	0x10000d6c

1a003254 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a003254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003258:	4680      	mov	r8, r0
1a00325a:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a00325c:	f7ff fdca 	bl	1a002df4 <tickRead>
1a003260:	4606      	mov	r6, r0
1a003262:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a003264:	f7ff fdc6 	bl	1a002df4 <tickRead>
1a003268:	1b84      	subs	r4, r0, r6
1a00326a:	eb61 0507 	sbc.w	r5, r1, r7
1a00326e:	4b06      	ldr	r3, [pc, #24]	; (1a003288 <delay+0x34>)
1a003270:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003274:	4640      	mov	r0, r8
1a003276:	4649      	mov	r1, r9
1a003278:	f001 fea6 	bl	1a004fc8 <__aeabi_uldivmod>
1a00327c:	428d      	cmp	r5, r1
1a00327e:	bf08      	it	eq
1a003280:	4284      	cmpeq	r4, r0
1a003282:	d3ef      	bcc.n	1a003264 <delay+0x10>
}
1a003284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003288:	10000c38 	.word	0x10000c38
1a00328c:	ffffffff 	.word	0xffffffff

1a003290 <cos>:
1a003290:	b500      	push	{lr}
1a003292:	ec51 0b10 	vmov	r0, r1, d0
1a003296:	4a2c      	ldr	r2, [pc, #176]	; (1a003348 <cos+0xb8>)
1a003298:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a00329c:	4293      	cmp	r3, r2
1a00329e:	b085      	sub	sp, #20
1a0032a0:	dd20      	ble.n	1a0032e4 <cos+0x54>
1a0032a2:	4a2a      	ldr	r2, [pc, #168]	; (1a00334c <cos+0xbc>)
1a0032a4:	4293      	cmp	r3, r2
1a0032a6:	dd09      	ble.n	1a0032bc <cos+0x2c>
1a0032a8:	ee10 2a10 	vmov	r2, s0
1a0032ac:	460b      	mov	r3, r1
1a0032ae:	f001 fa11 	bl	1a0046d4 <__aeabi_dsub>
1a0032b2:	ec41 0b10 	vmov	d0, r0, r1
1a0032b6:	b005      	add	sp, #20
1a0032b8:	f85d fb04 	ldr.w	pc, [sp], #4
1a0032bc:	4668      	mov	r0, sp
1a0032be:	f000 f8a7 	bl	1a003410 <__ieee754_rem_pio2>
1a0032c2:	f000 0003 	and.w	r0, r0, #3
1a0032c6:	2801      	cmp	r0, #1
1a0032c8:	d017      	beq.n	1a0032fa <cos+0x6a>
1a0032ca:	2802      	cmp	r0, #2
1a0032cc:	d02f      	beq.n	1a00332e <cos+0x9e>
1a0032ce:	b328      	cbz	r0, 1a00331c <cos+0x8c>
1a0032d0:	2001      	movs	r0, #1
1a0032d2:	ed9d 1b02 	vldr	d1, [sp, #8]
1a0032d6:	ed9d 0b00 	vldr	d0, [sp]
1a0032da:	f001 f80d 	bl	1a0042f8 <__kernel_sin>
1a0032de:	ec51 0b10 	vmov	r0, r1, d0
1a0032e2:	e7e6      	b.n	1a0032b2 <cos+0x22>
1a0032e4:	ed9f 1b16 	vldr	d1, [pc, #88]	; 1a003340 <cos+0xb0>
1a0032e8:	f000 faaa 	bl	1a003840 <__kernel_cos>
1a0032ec:	ec51 0b10 	vmov	r0, r1, d0
1a0032f0:	ec41 0b10 	vmov	d0, r0, r1
1a0032f4:	b005      	add	sp, #20
1a0032f6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0032fa:	ed9d 1b02 	vldr	d1, [sp, #8]
1a0032fe:	ed9d 0b00 	vldr	d0, [sp]
1a003302:	f000 fff9 	bl	1a0042f8 <__kernel_sin>
1a003306:	ec53 2b10 	vmov	r2, r3, d0
1a00330a:	ee10 0a10 	vmov	r0, s0
1a00330e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
1a003312:	ec41 0b10 	vmov	d0, r0, r1
1a003316:	b005      	add	sp, #20
1a003318:	f85d fb04 	ldr.w	pc, [sp], #4
1a00331c:	ed9d 1b02 	vldr	d1, [sp, #8]
1a003320:	ed9d 0b00 	vldr	d0, [sp]
1a003324:	f000 fa8c 	bl	1a003840 <__kernel_cos>
1a003328:	ec51 0b10 	vmov	r0, r1, d0
1a00332c:	e7c1      	b.n	1a0032b2 <cos+0x22>
1a00332e:	ed9d 1b02 	vldr	d1, [sp, #8]
1a003332:	ed9d 0b00 	vldr	d0, [sp]
1a003336:	f000 fa83 	bl	1a003840 <__kernel_cos>
1a00333a:	e7e4      	b.n	1a003306 <cos+0x76>
1a00333c:	f3af 8000 	nop.w
	...
1a003348:	3fe921fb 	.word	0x3fe921fb
1a00334c:	7fefffff 	.word	0x7fefffff

1a003350 <sin>:
1a003350:	b500      	push	{lr}
1a003352:	ec51 0b10 	vmov	r0, r1, d0
1a003356:	4a2c      	ldr	r2, [pc, #176]	; (1a003408 <sin+0xb8>)
1a003358:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a00335c:	4293      	cmp	r3, r2
1a00335e:	b085      	sub	sp, #20
1a003360:	dd27      	ble.n	1a0033b2 <sin+0x62>
1a003362:	4a2a      	ldr	r2, [pc, #168]	; (1a00340c <sin+0xbc>)
1a003364:	4293      	cmp	r3, r2
1a003366:	dd09      	ble.n	1a00337c <sin+0x2c>
1a003368:	ee10 2a10 	vmov	r2, s0
1a00336c:	460b      	mov	r3, r1
1a00336e:	f001 f9b1 	bl	1a0046d4 <__aeabi_dsub>
1a003372:	ec41 0b10 	vmov	d0, r0, r1
1a003376:	b005      	add	sp, #20
1a003378:	f85d fb04 	ldr.w	pc, [sp], #4
1a00337c:	4668      	mov	r0, sp
1a00337e:	f000 f847 	bl	1a003410 <__ieee754_rem_pio2>
1a003382:	f000 0003 	and.w	r0, r0, #3
1a003386:	2801      	cmp	r0, #1
1a003388:	d01f      	beq.n	1a0033ca <sin+0x7a>
1a00338a:	2802      	cmp	r0, #2
1a00338c:	d030      	beq.n	1a0033f0 <sin+0xa0>
1a00338e:	b328      	cbz	r0, 1a0033dc <sin+0x8c>
1a003390:	ed9d 1b02 	vldr	d1, [sp, #8]
1a003394:	ed9d 0b00 	vldr	d0, [sp]
1a003398:	f000 fa52 	bl	1a003840 <__kernel_cos>
1a00339c:	ec53 2b10 	vmov	r2, r3, d0
1a0033a0:	ee10 0a10 	vmov	r0, s0
1a0033a4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
1a0033a8:	ec41 0b10 	vmov	d0, r0, r1
1a0033ac:	b005      	add	sp, #20
1a0033ae:	f85d fb04 	ldr.w	pc, [sp], #4
1a0033b2:	2000      	movs	r0, #0
1a0033b4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 1a003400 <sin+0xb0>
1a0033b8:	f000 ff9e 	bl	1a0042f8 <__kernel_sin>
1a0033bc:	ec51 0b10 	vmov	r0, r1, d0
1a0033c0:	ec41 0b10 	vmov	d0, r0, r1
1a0033c4:	b005      	add	sp, #20
1a0033c6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0033ca:	ed9d 1b02 	vldr	d1, [sp, #8]
1a0033ce:	ed9d 0b00 	vldr	d0, [sp]
1a0033d2:	f000 fa35 	bl	1a003840 <__kernel_cos>
1a0033d6:	ec51 0b10 	vmov	r0, r1, d0
1a0033da:	e7ca      	b.n	1a003372 <sin+0x22>
1a0033dc:	2001      	movs	r0, #1
1a0033de:	ed9d 1b02 	vldr	d1, [sp, #8]
1a0033e2:	ed9d 0b00 	vldr	d0, [sp]
1a0033e6:	f000 ff87 	bl	1a0042f8 <__kernel_sin>
1a0033ea:	ec51 0b10 	vmov	r0, r1, d0
1a0033ee:	e7c0      	b.n	1a003372 <sin+0x22>
1a0033f0:	2001      	movs	r0, #1
1a0033f2:	ed9d 1b02 	vldr	d1, [sp, #8]
1a0033f6:	ed9d 0b00 	vldr	d0, [sp]
1a0033fa:	f000 ff7d 	bl	1a0042f8 <__kernel_sin>
1a0033fe:	e7cd      	b.n	1a00339c <sin+0x4c>
	...
1a003408:	3fe921fb 	.word	0x3fe921fb
1a00340c:	7fefffff 	.word	0x7fefffff

1a003410 <__ieee754_rem_pio2>:
1a003410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003414:	ec53 2b10 	vmov	r2, r3, d0
1a003418:	4997      	ldr	r1, [pc, #604]	; (1a003678 <__ieee754_rem_pio2+0x268>)
1a00341a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
1a00341e:	428d      	cmp	r5, r1
1a003420:	b08f      	sub	sp, #60	; 0x3c
1a003422:	f340 8087 	ble.w	1a003534 <__ieee754_rem_pio2+0x124>
1a003426:	4995      	ldr	r1, [pc, #596]	; (1a00367c <__ieee754_rem_pio2+0x26c>)
1a003428:	428d      	cmp	r5, r1
1a00342a:	461e      	mov	r6, r3
1a00342c:	4604      	mov	r4, r0
1a00342e:	dc29      	bgt.n	1a003484 <__ieee754_rem_pio2+0x74>
1a003430:	2e00      	cmp	r6, #0
1a003432:	4619      	mov	r1, r3
1a003434:	ee10 0a10 	vmov	r0, s0
1a003438:	a385      	add	r3, pc, #532	; (adr r3, 1a003650 <__ieee754_rem_pio2+0x240>)
1a00343a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00343e:	f340 81aa 	ble.w	1a003796 <__ieee754_rem_pio2+0x386>
1a003442:	f001 f947 	bl	1a0046d4 <__aeabi_dsub>
1a003446:	4b8e      	ldr	r3, [pc, #568]	; (1a003680 <__ieee754_rem_pio2+0x270>)
1a003448:	429d      	cmp	r5, r3
1a00344a:	4606      	mov	r6, r0
1a00344c:	460f      	mov	r7, r1
1a00344e:	f000 8087 	beq.w	1a003560 <__ieee754_rem_pio2+0x150>
1a003452:	a381      	add	r3, pc, #516	; (adr r3, 1a003658 <__ieee754_rem_pio2+0x248>)
1a003454:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003458:	f001 f93c 	bl	1a0046d4 <__aeabi_dsub>
1a00345c:	4602      	mov	r2, r0
1a00345e:	460b      	mov	r3, r1
1a003460:	e9c4 2300 	strd	r2, r3, [r4]
1a003464:	4639      	mov	r1, r7
1a003466:	4630      	mov	r0, r6
1a003468:	f001 f934 	bl	1a0046d4 <__aeabi_dsub>
1a00346c:	a37a      	add	r3, pc, #488	; (adr r3, 1a003658 <__ieee754_rem_pio2+0x248>)
1a00346e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003472:	f001 f92f 	bl	1a0046d4 <__aeabi_dsub>
1a003476:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a00347a:	2701      	movs	r7, #1
1a00347c:	4638      	mov	r0, r7
1a00347e:	b00f      	add	sp, #60	; 0x3c
1a003480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003484:	497f      	ldr	r1, [pc, #508]	; (1a003684 <__ieee754_rem_pio2+0x274>)
1a003486:	428d      	cmp	r5, r1
1a003488:	f340 808a 	ble.w	1a0035a0 <__ieee754_rem_pio2+0x190>
1a00348c:	497e      	ldr	r1, [pc, #504]	; (1a003688 <__ieee754_rem_pio2+0x278>)
1a00348e:	428d      	cmp	r5, r1
1a003490:	dc5b      	bgt.n	1a00354a <__ieee754_rem_pio2+0x13a>
1a003492:	152f      	asrs	r7, r5, #20
1a003494:	f2a7 4716 	subw	r7, r7, #1046	; 0x416
1a003498:	ee10 0a10 	vmov	r0, s0
1a00349c:	eba5 5107 	sub.w	r1, r5, r7, lsl #20
1a0034a0:	4690      	mov	r8, r2
1a0034a2:	4689      	mov	r9, r1
1a0034a4:	f001 fd68 	bl	1a004f78 <__aeabi_d2iz>
1a0034a8:	f001 fa62 	bl	1a004970 <__aeabi_i2d>
1a0034ac:	4682      	mov	sl, r0
1a0034ae:	468b      	mov	fp, r1
1a0034b0:	4640      	mov	r0, r8
1a0034b2:	4649      	mov	r1, r9
1a0034b4:	4652      	mov	r2, sl
1a0034b6:	465b      	mov	r3, fp
1a0034b8:	e9cd ab08 	strd	sl, fp, [sp, #32]
1a0034bc:	f001 f90a 	bl	1a0046d4 <__aeabi_dsub>
1a0034c0:	2200      	movs	r2, #0
1a0034c2:	4b72      	ldr	r3, [pc, #456]	; (1a00368c <__ieee754_rem_pio2+0x27c>)
1a0034c4:	f001 fabe 	bl	1a004a44 <__aeabi_dmul>
1a0034c8:	4689      	mov	r9, r1
1a0034ca:	4680      	mov	r8, r0
1a0034cc:	f001 fd54 	bl	1a004f78 <__aeabi_d2iz>
1a0034d0:	4605      	mov	r5, r0
1a0034d2:	f001 fa4d 	bl	1a004970 <__aeabi_i2d>
1a0034d6:	4602      	mov	r2, r0
1a0034d8:	460b      	mov	r3, r1
1a0034da:	4640      	mov	r0, r8
1a0034dc:	4649      	mov	r1, r9
1a0034de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
1a0034e2:	f001 f8f7 	bl	1a0046d4 <__aeabi_dsub>
1a0034e6:	2200      	movs	r2, #0
1a0034e8:	4b68      	ldr	r3, [pc, #416]	; (1a00368c <__ieee754_rem_pio2+0x27c>)
1a0034ea:	f001 faab 	bl	1a004a44 <__aeabi_dmul>
1a0034ee:	2200      	movs	r2, #0
1a0034f0:	2300      	movs	r3, #0
1a0034f2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0034f6:	f001 fd0d 	bl	1a004f14 <__aeabi_dcmpeq>
1a0034fa:	2800      	cmp	r0, #0
1a0034fc:	f000 8149 	beq.w	1a003792 <__ieee754_rem_pio2+0x382>
1a003500:	2d00      	cmp	r5, #0
1a003502:	bf0c      	ite	eq
1a003504:	2301      	moveq	r3, #1
1a003506:	2302      	movne	r3, #2
1a003508:	4a61      	ldr	r2, [pc, #388]	; (1a003690 <__ieee754_rem_pio2+0x280>)
1a00350a:	9201      	str	r2, [sp, #4]
1a00350c:	2102      	movs	r1, #2
1a00350e:	463a      	mov	r2, r7
1a003510:	9100      	str	r1, [sp, #0]
1a003512:	a808      	add	r0, sp, #32
1a003514:	4621      	mov	r1, r4
1a003516:	f000 fad7 	bl	1a003ac8 <__kernel_rem_pio2>
1a00351a:	2e00      	cmp	r6, #0
1a00351c:	4607      	mov	r7, r0
1a00351e:	daad      	bge.n	1a00347c <__ieee754_rem_pio2+0x6c>
1a003520:	6862      	ldr	r2, [r4, #4]
1a003522:	68e3      	ldr	r3, [r4, #12]
1a003524:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
1a003528:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
1a00352c:	4247      	negs	r7, r0
1a00352e:	6062      	str	r2, [r4, #4]
1a003530:	60e3      	str	r3, [r4, #12]
1a003532:	e7a3      	b.n	1a00347c <__ieee754_rem_pio2+0x6c>
1a003534:	2400      	movs	r4, #0
1a003536:	2500      	movs	r5, #0
1a003538:	2700      	movs	r7, #0
1a00353a:	ed80 0b00 	vstr	d0, [r0]
1a00353e:	e9c0 4502 	strd	r4, r5, [r0, #8]
1a003542:	4638      	mov	r0, r7
1a003544:	b00f      	add	sp, #60	; 0x3c
1a003546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00354a:	ee10 0a10 	vmov	r0, s0
1a00354e:	4619      	mov	r1, r3
1a003550:	f001 f8c0 	bl	1a0046d4 <__aeabi_dsub>
1a003554:	2700      	movs	r7, #0
1a003556:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a00355a:	e9c4 0100 	strd	r0, r1, [r4]
1a00355e:	e78d      	b.n	1a00347c <__ieee754_rem_pio2+0x6c>
1a003560:	a33f      	add	r3, pc, #252	; (adr r3, 1a003660 <__ieee754_rem_pio2+0x250>)
1a003562:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003566:	f001 f8b5 	bl	1a0046d4 <__aeabi_dsub>
1a00356a:	a33f      	add	r3, pc, #252	; (adr r3, 1a003668 <__ieee754_rem_pio2+0x258>)
1a00356c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003570:	4606      	mov	r6, r0
1a003572:	460f      	mov	r7, r1
1a003574:	f001 f8ae 	bl	1a0046d4 <__aeabi_dsub>
1a003578:	4602      	mov	r2, r0
1a00357a:	460b      	mov	r3, r1
1a00357c:	e9c4 2300 	strd	r2, r3, [r4]
1a003580:	4630      	mov	r0, r6
1a003582:	4639      	mov	r1, r7
1a003584:	f001 f8a6 	bl	1a0046d4 <__aeabi_dsub>
1a003588:	a337      	add	r3, pc, #220	; (adr r3, 1a003668 <__ieee754_rem_pio2+0x258>)
1a00358a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00358e:	f001 f8a1 	bl	1a0046d4 <__aeabi_dsub>
1a003592:	2701      	movs	r7, #1
1a003594:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a003598:	4638      	mov	r0, r7
1a00359a:	b00f      	add	sp, #60	; 0x3c
1a00359c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0035a0:	f000 ff74 	bl	1a00448c <fabs>
1a0035a4:	ec59 8b10 	vmov	r8, r9, d0
1a0035a8:	ee10 0a10 	vmov	r0, s0
1a0035ac:	a330      	add	r3, pc, #192	; (adr r3, 1a003670 <__ieee754_rem_pio2+0x260>)
1a0035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0035b2:	4649      	mov	r1, r9
1a0035b4:	f001 fa46 	bl	1a004a44 <__aeabi_dmul>
1a0035b8:	2200      	movs	r2, #0
1a0035ba:	4b36      	ldr	r3, [pc, #216]	; (1a003694 <__ieee754_rem_pio2+0x284>)
1a0035bc:	f001 f88c 	bl	1a0046d8 <__adddf3>
1a0035c0:	f001 fcda 	bl	1a004f78 <__aeabi_d2iz>
1a0035c4:	4607      	mov	r7, r0
1a0035c6:	f001 f9d3 	bl	1a004970 <__aeabi_i2d>
1a0035ca:	a321      	add	r3, pc, #132	; (adr r3, 1a003650 <__ieee754_rem_pio2+0x240>)
1a0035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0035d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a0035d4:	f001 fa36 	bl	1a004a44 <__aeabi_dmul>
1a0035d8:	4602      	mov	r2, r0
1a0035da:	460b      	mov	r3, r1
1a0035dc:	4640      	mov	r0, r8
1a0035de:	4649      	mov	r1, r9
1a0035e0:	f001 f878 	bl	1a0046d4 <__aeabi_dsub>
1a0035e4:	a31c      	add	r3, pc, #112	; (adr r3, 1a003658 <__ieee754_rem_pio2+0x248>)
1a0035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0035ea:	4682      	mov	sl, r0
1a0035ec:	468b      	mov	fp, r1
1a0035ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0035f2:	f001 fa27 	bl	1a004a44 <__aeabi_dmul>
1a0035f6:	2f1f      	cmp	r7, #31
1a0035f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a0035fc:	dc4e      	bgt.n	1a00369c <__ieee754_rem_pio2+0x28c>
1a0035fe:	4602      	mov	r2, r0
1a003600:	460b      	mov	r3, r1
1a003602:	4650      	mov	r0, sl
1a003604:	4659      	mov	r1, fp
1a003606:	f001 f865 	bl	1a0046d4 <__aeabi_dsub>
1a00360a:	4b23      	ldr	r3, [pc, #140]	; (1a003698 <__ieee754_rem_pio2+0x288>)
1a00360c:	1e7a      	subs	r2, r7, #1
1a00360e:	4680      	mov	r8, r0
1a003610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a003614:	42ab      	cmp	r3, r5
1a003616:	4689      	mov	r9, r1
1a003618:	d048      	beq.n	1a0036ac <__ieee754_rem_pio2+0x29c>
1a00361a:	4642      	mov	r2, r8
1a00361c:	464b      	mov	r3, r9
1a00361e:	e9c4 8900 	strd	r8, r9, [r4]
1a003622:	4650      	mov	r0, sl
1a003624:	4659      	mov	r1, fp
1a003626:	f001 f855 	bl	1a0046d4 <__aeabi_dsub>
1a00362a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00362e:	f001 f851 	bl	1a0046d4 <__aeabi_dsub>
1a003632:	2e00      	cmp	r6, #0
1a003634:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a003638:	f6bf af20 	bge.w	1a00347c <__ieee754_rem_pio2+0x6c>
1a00363c:	f109 4500 	add.w	r5, r9, #2147483648	; 0x80000000
1a003640:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a003644:	427f      	negs	r7, r7
1a003646:	e9c4 8500 	strd	r8, r5, [r4]
1a00364a:	e9c4 0302 	strd	r0, r3, [r4, #8]
1a00364e:	e715      	b.n	1a00347c <__ieee754_rem_pio2+0x6c>
1a003650:	54400000 	.word	0x54400000
1a003654:	3ff921fb 	.word	0x3ff921fb
1a003658:	1a626331 	.word	0x1a626331
1a00365c:	3dd0b461 	.word	0x3dd0b461
1a003660:	1a600000 	.word	0x1a600000
1a003664:	3dd0b461 	.word	0x3dd0b461
1a003668:	2e037073 	.word	0x2e037073
1a00366c:	3ba3198a 	.word	0x3ba3198a
1a003670:	6dc9c883 	.word	0x6dc9c883
1a003674:	3fe45f30 	.word	0x3fe45f30
1a003678:	3fe921fb 	.word	0x3fe921fb
1a00367c:	4002d97b 	.word	0x4002d97b
1a003680:	3ff921fb 	.word	0x3ff921fb
1a003684:	413921fb 	.word	0x413921fb
1a003688:	7fefffff 	.word	0x7fefffff
1a00368c:	41700000 	.word	0x41700000
1a003690:	1a006054 	.word	0x1a006054
1a003694:	3fe00000 	.word	0x3fe00000
1a003698:	1a005fd4 	.word	0x1a005fd4
1a00369c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0036a0:	4650      	mov	r0, sl
1a0036a2:	4659      	mov	r1, fp
1a0036a4:	f001 f816 	bl	1a0046d4 <__aeabi_dsub>
1a0036a8:	4680      	mov	r8, r0
1a0036aa:	4689      	mov	r9, r1
1a0036ac:	152d      	asrs	r5, r5, #20
1a0036ae:	f3c9 530a 	ubfx	r3, r9, #20, #11
1a0036b2:	1aeb      	subs	r3, r5, r3
1a0036b4:	2b10      	cmp	r3, #16
1a0036b6:	ddb0      	ble.n	1a00361a <__ieee754_rem_pio2+0x20a>
1a0036b8:	a357      	add	r3, pc, #348	; (adr r3, 1a003818 <__ieee754_rem_pio2+0x408>)
1a0036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0036be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0036c2:	f001 f9bf 	bl	1a004a44 <__aeabi_dmul>
1a0036c6:	4680      	mov	r8, r0
1a0036c8:	4689      	mov	r9, r1
1a0036ca:	4602      	mov	r2, r0
1a0036cc:	460b      	mov	r3, r1
1a0036ce:	4650      	mov	r0, sl
1a0036d0:	4659      	mov	r1, fp
1a0036d2:	f000 ffff 	bl	1a0046d4 <__aeabi_dsub>
1a0036d6:	4602      	mov	r2, r0
1a0036d8:	460b      	mov	r3, r1
1a0036da:	4650      	mov	r0, sl
1a0036dc:	4659      	mov	r1, fp
1a0036de:	e9cd 2306 	strd	r2, r3, [sp, #24]
1a0036e2:	f000 fff7 	bl	1a0046d4 <__aeabi_dsub>
1a0036e6:	4642      	mov	r2, r8
1a0036e8:	464b      	mov	r3, r9
1a0036ea:	f000 fff3 	bl	1a0046d4 <__aeabi_dsub>
1a0036ee:	a34c      	add	r3, pc, #304	; (adr r3, 1a003820 <__ieee754_rem_pio2+0x410>)
1a0036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0036f4:	4680      	mov	r8, r0
1a0036f6:	4689      	mov	r9, r1
1a0036f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0036fc:	f001 f9a2 	bl	1a004a44 <__aeabi_dmul>
1a003700:	4642      	mov	r2, r8
1a003702:	464b      	mov	r3, r9
1a003704:	f000 ffe6 	bl	1a0046d4 <__aeabi_dsub>
1a003708:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
1a00370c:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a003710:	460b      	mov	r3, r1
1a003712:	4602      	mov	r2, r0
1a003714:	4659      	mov	r1, fp
1a003716:	4650      	mov	r0, sl
1a003718:	f000 ffdc 	bl	1a0046d4 <__aeabi_dsub>
1a00371c:	f3c1 530a 	ubfx	r3, r1, #20, #11
1a003720:	1aed      	subs	r5, r5, r3
1a003722:	2d31      	cmp	r5, #49	; 0x31
1a003724:	4680      	mov	r8, r0
1a003726:	4689      	mov	r9, r1
1a003728:	f77f af77 	ble.w	1a00361a <__ieee754_rem_pio2+0x20a>
1a00372c:	a33f      	add	r3, pc, #252	; (adr r3, 1a00382c <__ieee754_rem_pio2+0x41c>)
1a00372e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a003736:	f001 f985 	bl	1a004a44 <__aeabi_dmul>
1a00373a:	4680      	mov	r8, r0
1a00373c:	4689      	mov	r9, r1
1a00373e:	4602      	mov	r2, r0
1a003740:	460b      	mov	r3, r1
1a003742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a003746:	f000 ffc5 	bl	1a0046d4 <__aeabi_dsub>
1a00374a:	4602      	mov	r2, r0
1a00374c:	460b      	mov	r3, r1
1a00374e:	4682      	mov	sl, r0
1a003750:	468b      	mov	fp, r1
1a003752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a003756:	f000 ffbd 	bl	1a0046d4 <__aeabi_dsub>
1a00375a:	4642      	mov	r2, r8
1a00375c:	464b      	mov	r3, r9
1a00375e:	f000 ffb9 	bl	1a0046d4 <__aeabi_dsub>
1a003762:	a334      	add	r3, pc, #208	; (adr r3, 1a003834 <__ieee754_rem_pio2+0x424>)
1a003764:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003768:	4680      	mov	r8, r0
1a00376a:	4689      	mov	r9, r1
1a00376c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a003770:	f001 f968 	bl	1a004a44 <__aeabi_dmul>
1a003774:	4642      	mov	r2, r8
1a003776:	464b      	mov	r3, r9
1a003778:	f000 ffac 	bl	1a0046d4 <__aeabi_dsub>
1a00377c:	4602      	mov	r2, r0
1a00377e:	460b      	mov	r3, r1
1a003780:	4650      	mov	r0, sl
1a003782:	4659      	mov	r1, fp
1a003784:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a003788:	f000 ffa4 	bl	1a0046d4 <__aeabi_dsub>
1a00378c:	4680      	mov	r8, r0
1a00378e:	4689      	mov	r9, r1
1a003790:	e743      	b.n	1a00361a <__ieee754_rem_pio2+0x20a>
1a003792:	2303      	movs	r3, #3
1a003794:	e6b8      	b.n	1a003508 <__ieee754_rem_pio2+0xf8>
1a003796:	f000 ff9f 	bl	1a0046d8 <__adddf3>
1a00379a:	4b23      	ldr	r3, [pc, #140]	; (1a003828 <__ieee754_rem_pio2+0x418>)
1a00379c:	429d      	cmp	r5, r3
1a00379e:	4606      	mov	r6, r0
1a0037a0:	460f      	mov	r7, r1
1a0037a2:	d016      	beq.n	1a0037d2 <__ieee754_rem_pio2+0x3c2>
1a0037a4:	a31a      	add	r3, pc, #104	; (adr r3, 1a003810 <__ieee754_rem_pio2+0x400>)
1a0037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0037aa:	f000 ff95 	bl	1a0046d8 <__adddf3>
1a0037ae:	4602      	mov	r2, r0
1a0037b0:	460b      	mov	r3, r1
1a0037b2:	e9c4 2300 	strd	r2, r3, [r4]
1a0037b6:	4639      	mov	r1, r7
1a0037b8:	4630      	mov	r0, r6
1a0037ba:	f000 ff8b 	bl	1a0046d4 <__aeabi_dsub>
1a0037be:	a314      	add	r3, pc, #80	; (adr r3, 1a003810 <__ieee754_rem_pio2+0x400>)
1a0037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0037c4:	f000 ff88 	bl	1a0046d8 <__adddf3>
1a0037c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0037cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a0037d0:	e654      	b.n	1a00347c <__ieee754_rem_pio2+0x6c>
1a0037d2:	a311      	add	r3, pc, #68	; (adr r3, 1a003818 <__ieee754_rem_pio2+0x408>)
1a0037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0037d8:	f000 ff7e 	bl	1a0046d8 <__adddf3>
1a0037dc:	a310      	add	r3, pc, #64	; (adr r3, 1a003820 <__ieee754_rem_pio2+0x410>)
1a0037de:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0037e2:	460f      	mov	r7, r1
1a0037e4:	4606      	mov	r6, r0
1a0037e6:	f000 ff77 	bl	1a0046d8 <__adddf3>
1a0037ea:	4602      	mov	r2, r0
1a0037ec:	460b      	mov	r3, r1
1a0037ee:	e9c4 2300 	strd	r2, r3, [r4]
1a0037f2:	4639      	mov	r1, r7
1a0037f4:	4630      	mov	r0, r6
1a0037f6:	f000 ff6d 	bl	1a0046d4 <__aeabi_dsub>
1a0037fa:	a309      	add	r3, pc, #36	; (adr r3, 1a003820 <__ieee754_rem_pio2+0x410>)
1a0037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003800:	f000 ff6a 	bl	1a0046d8 <__adddf3>
1a003804:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a003808:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a00380c:	e636      	b.n	1a00347c <__ieee754_rem_pio2+0x6c>
1a00380e:	bf00      	nop
1a003810:	1a626331 	.word	0x1a626331
1a003814:	3dd0b461 	.word	0x3dd0b461
1a003818:	1a600000 	.word	0x1a600000
1a00381c:	3dd0b461 	.word	0x3dd0b461
1a003820:	2e037073 	.word	0x2e037073
1a003824:	3ba3198a 	.word	0x3ba3198a
1a003828:	3ff921fb 	.word	0x3ff921fb
1a00382c:	2e000000 	.word	0x2e000000
1a003830:	3ba3198a 	.word	0x3ba3198a
1a003834:	252049c1 	.word	0x252049c1
1a003838:	397b839a 	.word	0x397b839a
1a00383c:	ffffffff 	.word	0xffffffff

1a003840 <__kernel_cos>:
1a003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003844:	ec57 6b10 	vmov	r6, r7, d0
1a003848:	ed2d 8b02 	vpush	{d8}
1a00384c:	eeb0 8a41 	vmov.f32	s16, s2
1a003850:	eef0 8a61 	vmov.f32	s17, s3
1a003854:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
1a003858:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
1a00385c:	b083      	sub	sp, #12
1a00385e:	da72      	bge.n	1a003946 <__kernel_cos+0x106>
1a003860:	ee10 0a10 	vmov	r0, s0
1a003864:	4639      	mov	r1, r7
1a003866:	f001 fb87 	bl	1a004f78 <__aeabi_d2iz>
1a00386a:	2800      	cmp	r0, #0
1a00386c:	f000 80f6 	beq.w	1a003a5c <__kernel_cos+0x21c>
1a003870:	4632      	mov	r2, r6
1a003872:	463b      	mov	r3, r7
1a003874:	4630      	mov	r0, r6
1a003876:	4639      	mov	r1, r7
1a003878:	f001 f8e4 	bl	1a004a44 <__aeabi_dmul>
1a00387c:	a37c      	add	r3, pc, #496	; (adr r3, 1a003a70 <__kernel_cos+0x230>)
1a00387e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003882:	4604      	mov	r4, r0
1a003884:	460d      	mov	r5, r1
1a003886:	f001 f8dd 	bl	1a004a44 <__aeabi_dmul>
1a00388a:	a37b      	add	r3, pc, #492	; (adr r3, 1a003a78 <__kernel_cos+0x238>)
1a00388c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003890:	f000 ff22 	bl	1a0046d8 <__adddf3>
1a003894:	4622      	mov	r2, r4
1a003896:	462b      	mov	r3, r5
1a003898:	f001 f8d4 	bl	1a004a44 <__aeabi_dmul>
1a00389c:	a378      	add	r3, pc, #480	; (adr r3, 1a003a80 <__kernel_cos+0x240>)
1a00389e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0038a2:	f000 ff17 	bl	1a0046d4 <__aeabi_dsub>
1a0038a6:	4622      	mov	r2, r4
1a0038a8:	462b      	mov	r3, r5
1a0038aa:	f001 f8cb 	bl	1a004a44 <__aeabi_dmul>
1a0038ae:	a376      	add	r3, pc, #472	; (adr r3, 1a003a88 <__kernel_cos+0x248>)
1a0038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0038b4:	f000 ff10 	bl	1a0046d8 <__adddf3>
1a0038b8:	4622      	mov	r2, r4
1a0038ba:	462b      	mov	r3, r5
1a0038bc:	f001 f8c2 	bl	1a004a44 <__aeabi_dmul>
1a0038c0:	a373      	add	r3, pc, #460	; (adr r3, 1a003a90 <__kernel_cos+0x250>)
1a0038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0038c6:	f000 ff05 	bl	1a0046d4 <__aeabi_dsub>
1a0038ca:	4622      	mov	r2, r4
1a0038cc:	462b      	mov	r3, r5
1a0038ce:	f001 f8b9 	bl	1a004a44 <__aeabi_dmul>
1a0038d2:	a371      	add	r3, pc, #452	; (adr r3, 1a003a98 <__kernel_cos+0x258>)
1a0038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0038d8:	f000 fefe 	bl	1a0046d8 <__adddf3>
1a0038dc:	4622      	mov	r2, r4
1a0038de:	462b      	mov	r3, r5
1a0038e0:	f001 f8b0 	bl	1a004a44 <__aeabi_dmul>
1a0038e4:	4682      	mov	sl, r0
1a0038e6:	468b      	mov	fp, r1
1a0038e8:	2200      	movs	r2, #0
1a0038ea:	4b71      	ldr	r3, [pc, #452]	; (1a003ab0 <__kernel_cos+0x270>)
1a0038ec:	4620      	mov	r0, r4
1a0038ee:	4629      	mov	r1, r5
1a0038f0:	f001 f8a8 	bl	1a004a44 <__aeabi_dmul>
1a0038f4:	4652      	mov	r2, sl
1a0038f6:	4680      	mov	r8, r0
1a0038f8:	4689      	mov	r9, r1
1a0038fa:	465b      	mov	r3, fp
1a0038fc:	4620      	mov	r0, r4
1a0038fe:	4629      	mov	r1, r5
1a003900:	f001 f8a0 	bl	1a004a44 <__aeabi_dmul>
1a003904:	ec53 2b18 	vmov	r2, r3, d8
1a003908:	4604      	mov	r4, r0
1a00390a:	460d      	mov	r5, r1
1a00390c:	4630      	mov	r0, r6
1a00390e:	4639      	mov	r1, r7
1a003910:	f001 f898 	bl	1a004a44 <__aeabi_dmul>
1a003914:	4602      	mov	r2, r0
1a003916:	460b      	mov	r3, r1
1a003918:	4620      	mov	r0, r4
1a00391a:	4629      	mov	r1, r5
1a00391c:	f000 feda 	bl	1a0046d4 <__aeabi_dsub>
1a003920:	4602      	mov	r2, r0
1a003922:	460b      	mov	r3, r1
1a003924:	4640      	mov	r0, r8
1a003926:	4649      	mov	r1, r9
1a003928:	f000 fed4 	bl	1a0046d4 <__aeabi_dsub>
1a00392c:	4602      	mov	r2, r0
1a00392e:	460b      	mov	r3, r1
1a003930:	2000      	movs	r0, #0
1a003932:	4960      	ldr	r1, [pc, #384]	; (1a003ab4 <__kernel_cos+0x274>)
1a003934:	f000 fece 	bl	1a0046d4 <__aeabi_dsub>
1a003938:	ec41 0b10 	vmov	d0, r0, r1
1a00393c:	b003      	add	sp, #12
1a00393e:	ecbd 8b02 	vpop	{d8}
1a003942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003946:	ee10 2a10 	vmov	r2, s0
1a00394a:	ee10 0a10 	vmov	r0, s0
1a00394e:	463b      	mov	r3, r7
1a003950:	4639      	mov	r1, r7
1a003952:	f001 f877 	bl	1a004a44 <__aeabi_dmul>
1a003956:	a346      	add	r3, pc, #280	; (adr r3, 1a003a70 <__kernel_cos+0x230>)
1a003958:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00395c:	4604      	mov	r4, r0
1a00395e:	460d      	mov	r5, r1
1a003960:	f001 f870 	bl	1a004a44 <__aeabi_dmul>
1a003964:	a344      	add	r3, pc, #272	; (adr r3, 1a003a78 <__kernel_cos+0x238>)
1a003966:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00396a:	f000 feb5 	bl	1a0046d8 <__adddf3>
1a00396e:	4622      	mov	r2, r4
1a003970:	462b      	mov	r3, r5
1a003972:	f001 f867 	bl	1a004a44 <__aeabi_dmul>
1a003976:	a342      	add	r3, pc, #264	; (adr r3, 1a003a80 <__kernel_cos+0x240>)
1a003978:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00397c:	f000 feaa 	bl	1a0046d4 <__aeabi_dsub>
1a003980:	4622      	mov	r2, r4
1a003982:	462b      	mov	r3, r5
1a003984:	f001 f85e 	bl	1a004a44 <__aeabi_dmul>
1a003988:	a33f      	add	r3, pc, #252	; (adr r3, 1a003a88 <__kernel_cos+0x248>)
1a00398a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00398e:	f000 fea3 	bl	1a0046d8 <__adddf3>
1a003992:	4622      	mov	r2, r4
1a003994:	462b      	mov	r3, r5
1a003996:	f001 f855 	bl	1a004a44 <__aeabi_dmul>
1a00399a:	a33d      	add	r3, pc, #244	; (adr r3, 1a003a90 <__kernel_cos+0x250>)
1a00399c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0039a0:	f000 fe98 	bl	1a0046d4 <__aeabi_dsub>
1a0039a4:	4622      	mov	r2, r4
1a0039a6:	462b      	mov	r3, r5
1a0039a8:	f001 f84c 	bl	1a004a44 <__aeabi_dmul>
1a0039ac:	a33a      	add	r3, pc, #232	; (adr r3, 1a003a98 <__kernel_cos+0x258>)
1a0039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0039b2:	f000 fe91 	bl	1a0046d8 <__adddf3>
1a0039b6:	462b      	mov	r3, r5
1a0039b8:	4622      	mov	r2, r4
1a0039ba:	f001 f843 	bl	1a004a44 <__aeabi_dmul>
1a0039be:	4b3e      	ldr	r3, [pc, #248]	; (1a003ab8 <__kernel_cos+0x278>)
1a0039c0:	4599      	cmp	r9, r3
1a0039c2:	4682      	mov	sl, r0
1a0039c4:	468b      	mov	fp, r1
1a0039c6:	dd8f      	ble.n	1a0038e8 <__kernel_cos+0xa8>
1a0039c8:	4b3c      	ldr	r3, [pc, #240]	; (1a003abc <__kernel_cos+0x27c>)
1a0039ca:	4599      	cmp	r9, r3
1a0039cc:	dc3d      	bgt.n	1a003a4a <__kernel_cos+0x20a>
1a0039ce:	2200      	movs	r2, #0
1a0039d0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
1a0039d4:	2000      	movs	r0, #0
1a0039d6:	4937      	ldr	r1, [pc, #220]	; (1a003ab4 <__kernel_cos+0x274>)
1a0039d8:	4690      	mov	r8, r2
1a0039da:	4699      	mov	r9, r3
1a0039dc:	f000 fe7a 	bl	1a0046d4 <__aeabi_dsub>
1a0039e0:	e9cd 0100 	strd	r0, r1, [sp]
1a0039e4:	2200      	movs	r2, #0
1a0039e6:	4b32      	ldr	r3, [pc, #200]	; (1a003ab0 <__kernel_cos+0x270>)
1a0039e8:	4620      	mov	r0, r4
1a0039ea:	4629      	mov	r1, r5
1a0039ec:	f001 f82a 	bl	1a004a44 <__aeabi_dmul>
1a0039f0:	4642      	mov	r2, r8
1a0039f2:	464b      	mov	r3, r9
1a0039f4:	f000 fe6e 	bl	1a0046d4 <__aeabi_dsub>
1a0039f8:	4652      	mov	r2, sl
1a0039fa:	4680      	mov	r8, r0
1a0039fc:	4689      	mov	r9, r1
1a0039fe:	465b      	mov	r3, fp
1a003a00:	4620      	mov	r0, r4
1a003a02:	4629      	mov	r1, r5
1a003a04:	f001 f81e 	bl	1a004a44 <__aeabi_dmul>
1a003a08:	ec53 2b18 	vmov	r2, r3, d8
1a003a0c:	4604      	mov	r4, r0
1a003a0e:	460d      	mov	r5, r1
1a003a10:	4630      	mov	r0, r6
1a003a12:	4639      	mov	r1, r7
1a003a14:	f001 f816 	bl	1a004a44 <__aeabi_dmul>
1a003a18:	4602      	mov	r2, r0
1a003a1a:	460b      	mov	r3, r1
1a003a1c:	4620      	mov	r0, r4
1a003a1e:	4629      	mov	r1, r5
1a003a20:	f000 fe58 	bl	1a0046d4 <__aeabi_dsub>
1a003a24:	4602      	mov	r2, r0
1a003a26:	460b      	mov	r3, r1
1a003a28:	4640      	mov	r0, r8
1a003a2a:	4649      	mov	r1, r9
1a003a2c:	f000 fe52 	bl	1a0046d4 <__aeabi_dsub>
1a003a30:	4602      	mov	r2, r0
1a003a32:	460b      	mov	r3, r1
1a003a34:	e9dd 0100 	ldrd	r0, r1, [sp]
1a003a38:	f000 fe4c 	bl	1a0046d4 <__aeabi_dsub>
1a003a3c:	ec41 0b10 	vmov	d0, r0, r1
1a003a40:	b003      	add	sp, #12
1a003a42:	ecbd 8b02 	vpop	{d8}
1a003a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003a4a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 1a003aa0 <__kernel_cos+0x260>
1a003a4e:	f04f 0800 	mov.w	r8, #0
1a003a52:	ed8d 7b00 	vstr	d7, [sp]
1a003a56:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1a003ac0 <__kernel_cos+0x280>
1a003a5a:	e7c3      	b.n	1a0039e4 <__kernel_cos+0x1a4>
1a003a5c:	ed9f 0b12 	vldr	d0, [pc, #72]	; 1a003aa8 <__kernel_cos+0x268>
1a003a60:	b003      	add	sp, #12
1a003a62:	ecbd 8b02 	vpop	{d8}
1a003a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003a6a:	bf00      	nop
1a003a6c:	f3af 8000 	nop.w
1a003a70:	be8838d4 	.word	0xbe8838d4
1a003a74:	bda8fae9 	.word	0xbda8fae9
1a003a78:	bdb4b1c4 	.word	0xbdb4b1c4
1a003a7c:	3e21ee9e 	.word	0x3e21ee9e
1a003a80:	809c52ad 	.word	0x809c52ad
1a003a84:	3e927e4f 	.word	0x3e927e4f
1a003a88:	19cb1590 	.word	0x19cb1590
1a003a8c:	3efa01a0 	.word	0x3efa01a0
1a003a90:	16c15177 	.word	0x16c15177
1a003a94:	3f56c16c 	.word	0x3f56c16c
1a003a98:	5555554c 	.word	0x5555554c
1a003a9c:	3fa55555 	.word	0x3fa55555
1a003aa0:	00000000 	.word	0x00000000
1a003aa4:	3fe70000 	.word	0x3fe70000
1a003aa8:	00000000 	.word	0x00000000
1a003aac:	3ff00000 	.word	0x3ff00000
1a003ab0:	3fe00000 	.word	0x3fe00000
1a003ab4:	3ff00000 	.word	0x3ff00000
1a003ab8:	3fd33332 	.word	0x3fd33332
1a003abc:	3fe90000 	.word	0x3fe90000
1a003ac0:	3fd20000 	.word	0x3fd20000
1a003ac4:	ffffffff 	.word	0xffffffff

1a003ac8 <__kernel_rem_pio2>:
1a003ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003acc:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
1a003ad0:	4cb9      	ldr	r4, [pc, #740]	; (1a003db8 <__kernel_rem_pio2+0x2f0>)
1a003ad2:	9da2      	ldr	r5, [sp, #648]	; 0x288
1a003ad4:	9308      	str	r3, [sp, #32]
1a003ad6:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
1a003ada:	9405      	str	r4, [sp, #20]
1a003adc:	3b01      	subs	r3, #1
1a003ade:	f112 0f14 	cmn.w	r2, #20
1a003ae2:	9004      	str	r0, [sp, #16]
1a003ae4:	910b      	str	r1, [sp, #44]	; 0x2c
1a003ae6:	9303      	str	r3, [sp, #12]
1a003ae8:	f2c0 82b2 	blt.w	1a004050 <__kernel_rem_pio2+0x588>
1a003aec:	49b3      	ldr	r1, [pc, #716]	; (1a003dbc <__kernel_rem_pio2+0x2f4>)
1a003aee:	1ed3      	subs	r3, r2, #3
1a003af0:	fb81 0103 	smull	r0, r1, r1, r3
1a003af4:	17db      	asrs	r3, r3, #31
1a003af6:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a003afa:	9307      	str	r3, [sp, #28]
1a003afc:	3301      	adds	r3, #1
1a003afe:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
1a003b02:	00db      	lsls	r3, r3, #3
1a003b04:	18d3      	adds	r3, r2, r3
1a003b06:	9306      	str	r3, [sp, #24]
1a003b08:	9a07      	ldr	r2, [sp, #28]
1a003b0a:	9b03      	ldr	r3, [sp, #12]
1a003b0c:	1ad6      	subs	r6, r2, r3
1a003b0e:	9a05      	ldr	r2, [sp, #20]
1a003b10:	eb12 0803 	adds.w	r8, r2, r3
1a003b14:	d41a      	bmi.n	1a003b4c <__kernel_rem_pio2+0x84>
1a003b16:	f108 0801 	add.w	r8, r8, #1
1a003b1a:	2400      	movs	r4, #0
1a003b1c:	2500      	movs	r5, #0
1a003b1e:	44b0      	add	r8, r6
1a003b20:	af20      	add	r7, sp, #128	; 0x80
1a003b22:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
1a003b26:	e008      	b.n	1a003b3a <__kernel_rem_pio2+0x72>
1a003b28:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
1a003b2c:	f000 ff20 	bl	1a004970 <__aeabi_i2d>
1a003b30:	3601      	adds	r6, #1
1a003b32:	4546      	cmp	r6, r8
1a003b34:	e8e7 0102 	strd	r0, r1, [r7], #8
1a003b38:	d008      	beq.n	1a003b4c <__kernel_rem_pio2+0x84>
1a003b3a:	2e00      	cmp	r6, #0
1a003b3c:	daf4      	bge.n	1a003b28 <__kernel_rem_pio2+0x60>
1a003b3e:	3601      	adds	r6, #1
1a003b40:	4620      	mov	r0, r4
1a003b42:	4629      	mov	r1, r5
1a003b44:	4546      	cmp	r6, r8
1a003b46:	e8e7 0102 	strd	r0, r1, [r7], #8
1a003b4a:	d1f6      	bne.n	1a003b3a <__kernel_rem_pio2+0x72>
1a003b4c:	9b05      	ldr	r3, [sp, #20]
1a003b4e:	2b00      	cmp	r3, #0
1a003b50:	9b08      	ldr	r3, [sp, #32]
1a003b52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a003b56:	9301      	str	r3, [sp, #4]
1a003b58:	db2a      	blt.n	1a003bb0 <__kernel_rem_pio2+0xe8>
1a003b5a:	9a04      	ldr	r2, [sp, #16]
1a003b5c:	a920      	add	r1, sp, #128	; 0x80
1a003b5e:	eb02 0803 	add.w	r8, r2, r3
1a003b62:	eb01 0a03 	add.w	sl, r1, r3
1a003b66:	9b05      	ldr	r3, [sp, #20]
1a003b68:	aa72      	add	r2, sp, #456	; 0x1c8
1a003b6a:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
1a003b6e:	f50d 79e0 	add.w	r9, sp, #448	; 0x1c0
1a003b72:	9b03      	ldr	r3, [sp, #12]
1a003b74:	2b00      	cmp	r3, #0
1a003b76:	f04f 0600 	mov.w	r6, #0
1a003b7a:	f04f 0700 	mov.w	r7, #0
1a003b7e:	db11      	blt.n	1a003ba4 <__kernel_rem_pio2+0xdc>
1a003b80:	9c04      	ldr	r4, [sp, #16]
1a003b82:	4655      	mov	r5, sl
1a003b84:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a003b88:	e8f4 0102 	ldrd	r0, r1, [r4], #8
1a003b8c:	f000 ff5a 	bl	1a004a44 <__aeabi_dmul>
1a003b90:	4602      	mov	r2, r0
1a003b92:	460b      	mov	r3, r1
1a003b94:	4630      	mov	r0, r6
1a003b96:	4639      	mov	r1, r7
1a003b98:	f000 fd9e 	bl	1a0046d8 <__adddf3>
1a003b9c:	4544      	cmp	r4, r8
1a003b9e:	4606      	mov	r6, r0
1a003ba0:	460f      	mov	r7, r1
1a003ba2:	d1ef      	bne.n	1a003b84 <__kernel_rem_pio2+0xbc>
1a003ba4:	e8e9 6702 	strd	r6, r7, [r9], #8
1a003ba8:	45d9      	cmp	r9, fp
1a003baa:	f10a 0a08 	add.w	sl, sl, #8
1a003bae:	d1e0      	bne.n	1a003b72 <__kernel_rem_pio2+0xaa>
1a003bb0:	9801      	ldr	r0, [sp, #4]
1a003bb2:	9c04      	ldr	r4, [sp, #16]
1a003bb4:	9905      	ldr	r1, [sp, #20]
1a003bb6:	9101      	str	r1, [sp, #4]
1a003bb8:	4420      	add	r0, r4
1a003bba:	008b      	lsls	r3, r1, #2
1a003bbc:	4683      	mov	fp, r0
1a003bbe:	a80b      	add	r0, sp, #44	; 0x2c
1a003bc0:	f1a3 0208 	sub.w	r2, r3, #8
1a003bc4:	18c3      	adds	r3, r0, r3
1a003bc6:	930a      	str	r3, [sp, #40]	; 0x28
1a003bc8:	ab0c      	add	r3, sp, #48	; 0x30
1a003bca:	4413      	add	r3, r2
1a003bcc:	9309      	str	r3, [sp, #36]	; 0x24
1a003bce:	9a01      	ldr	r2, [sp, #4]
1a003bd0:	a998      	add	r1, sp, #608	; 0x260
1a003bd2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
1a003bd6:	2a00      	cmp	r2, #0
1a003bd8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
1a003bdc:	dd29      	ble.n	1a003c32 <__kernel_rem_pio2+0x16a>
1a003bde:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
1a003be2:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
1a003be6:	f10d 0930 	add.w	r9, sp, #48	; 0x30
1a003bea:	2200      	movs	r2, #0
1a003bec:	4b74      	ldr	r3, [pc, #464]	; (1a003dc0 <__kernel_rem_pio2+0x2f8>)
1a003bee:	4620      	mov	r0, r4
1a003bf0:	4629      	mov	r1, r5
1a003bf2:	f000 ff27 	bl	1a004a44 <__aeabi_dmul>
1a003bf6:	f001 f9bf 	bl	1a004f78 <__aeabi_d2iz>
1a003bfa:	f000 feb9 	bl	1a004970 <__aeabi_i2d>
1a003bfe:	2200      	movs	r2, #0
1a003c00:	4b70      	ldr	r3, [pc, #448]	; (1a003dc4 <__kernel_rem_pio2+0x2fc>)
1a003c02:	4606      	mov	r6, r0
1a003c04:	460f      	mov	r7, r1
1a003c06:	f000 ff1d 	bl	1a004a44 <__aeabi_dmul>
1a003c0a:	4602      	mov	r2, r0
1a003c0c:	460b      	mov	r3, r1
1a003c0e:	4620      	mov	r0, r4
1a003c10:	4629      	mov	r1, r5
1a003c12:	f000 fd5f 	bl	1a0046d4 <__aeabi_dsub>
1a003c16:	f001 f9af 	bl	1a004f78 <__aeabi_d2iz>
1a003c1a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
1a003c1e:	f849 0b04 	str.w	r0, [r9], #4
1a003c22:	4639      	mov	r1, r7
1a003c24:	4630      	mov	r0, r6
1a003c26:	f000 fd57 	bl	1a0046d8 <__adddf3>
1a003c2a:	45d0      	cmp	r8, sl
1a003c2c:	4604      	mov	r4, r0
1a003c2e:	460d      	mov	r5, r1
1a003c30:	d1db      	bne.n	1a003bea <__kernel_rem_pio2+0x122>
1a003c32:	f8dd 9018 	ldr.w	r9, [sp, #24]
1a003c36:	ec45 4b10 	vmov	d0, r4, r5
1a003c3a:	4648      	mov	r0, r9
1a003c3c:	f000 fcb4 	bl	1a0045a8 <scalbn>
1a003c40:	ec55 4b10 	vmov	r4, r5, d0
1a003c44:	2200      	movs	r2, #0
1a003c46:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a003c4a:	ee10 0a10 	vmov	r0, s0
1a003c4e:	4629      	mov	r1, r5
1a003c50:	f000 fef8 	bl	1a004a44 <__aeabi_dmul>
1a003c54:	ec41 0b10 	vmov	d0, r0, r1
1a003c58:	f000 fc22 	bl	1a0044a0 <floor>
1a003c5c:	2200      	movs	r2, #0
1a003c5e:	ec51 0b10 	vmov	r0, r1, d0
1a003c62:	4b59      	ldr	r3, [pc, #356]	; (1a003dc8 <__kernel_rem_pio2+0x300>)
1a003c64:	f000 feee 	bl	1a004a44 <__aeabi_dmul>
1a003c68:	4602      	mov	r2, r0
1a003c6a:	460b      	mov	r3, r1
1a003c6c:	4620      	mov	r0, r4
1a003c6e:	4629      	mov	r1, r5
1a003c70:	f000 fd30 	bl	1a0046d4 <__aeabi_dsub>
1a003c74:	460d      	mov	r5, r1
1a003c76:	4604      	mov	r4, r0
1a003c78:	f001 f97e 	bl	1a004f78 <__aeabi_d2iz>
1a003c7c:	4680      	mov	r8, r0
1a003c7e:	f000 fe77 	bl	1a004970 <__aeabi_i2d>
1a003c82:	460b      	mov	r3, r1
1a003c84:	4602      	mov	r2, r0
1a003c86:	4629      	mov	r1, r5
1a003c88:	4620      	mov	r0, r4
1a003c8a:	f000 fd23 	bl	1a0046d4 <__aeabi_dsub>
1a003c8e:	464b      	mov	r3, r9
1a003c90:	2b00      	cmp	r3, #0
1a003c92:	4606      	mov	r6, r0
1a003c94:	460f      	mov	r7, r1
1a003c96:	f340 8099 	ble.w	1a003dcc <__kernel_rem_pio2+0x304>
1a003c9a:	9a01      	ldr	r2, [sp, #4]
1a003c9c:	a90c      	add	r1, sp, #48	; 0x30
1a003c9e:	3a01      	subs	r2, #1
1a003ca0:	f1c9 0318 	rsb	r3, r9, #24
1a003ca4:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
1a003ca8:	fa45 f103 	asr.w	r1, r5, r3
1a003cac:	fa01 f303 	lsl.w	r3, r1, r3
1a003cb0:	1aeb      	subs	r3, r5, r3
1a003cb2:	f1c9 0517 	rsb	r5, r9, #23
1a003cb6:	a80c      	add	r0, sp, #48	; 0x30
1a003cb8:	fa43 f505 	asr.w	r5, r3, r5
1a003cbc:	2d00      	cmp	r5, #0
1a003cbe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
1a003cc2:	4488      	add	r8, r1
1a003cc4:	f300 808c 	bgt.w	1a003de0 <__kernel_rem_pio2+0x318>
1a003cc8:	2200      	movs	r2, #0
1a003cca:	2300      	movs	r3, #0
1a003ccc:	4630      	mov	r0, r6
1a003cce:	4639      	mov	r1, r7
1a003cd0:	f001 f920 	bl	1a004f14 <__aeabi_dcmpeq>
1a003cd4:	2800      	cmp	r0, #0
1a003cd6:	f000 8292 	beq.w	1a0041fe <__kernel_rem_pio2+0x736>
1a003cda:	9b01      	ldr	r3, [sp, #4]
1a003cdc:	9a05      	ldr	r2, [sp, #20]
1a003cde:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
1a003ce2:	454a      	cmp	r2, r9
1a003ce4:	dc10      	bgt.n	1a003d08 <__kernel_rem_pio2+0x240>
1a003ce6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a003cea:	aa0c      	add	r2, sp, #48	; 0x30
1a003cec:	3b01      	subs	r3, #1
1a003cee:	980a      	ldr	r0, [sp, #40]	; 0x28
1a003cf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1a003cf4:	2200      	movs	r2, #0
1a003cf6:	f853 1904 	ldr.w	r1, [r3], #-4
1a003cfa:	4283      	cmp	r3, r0
1a003cfc:	ea42 0201 	orr.w	r2, r2, r1
1a003d00:	d1f9      	bne.n	1a003cf6 <__kernel_rem_pio2+0x22e>
1a003d02:	2a00      	cmp	r2, #0
1a003d04:	f040 80db 	bne.w	1a003ebe <__kernel_rem_pio2+0x3f6>
1a003d08:	9b05      	ldr	r3, [sp, #20]
1a003d0a:	aa0c      	add	r2, sp, #48	; 0x30
1a003d0c:	3b01      	subs	r3, #1
1a003d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003d12:	2b00      	cmp	r3, #0
1a003d14:	f040 80ce 	bne.w	1a003eb4 <__kernel_rem_pio2+0x3ec>
1a003d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003d1a:	2301      	movs	r3, #1
1a003d1c:	f852 1904 	ldr.w	r1, [r2], #-4
1a003d20:	3301      	adds	r3, #1
1a003d22:	2900      	cmp	r1, #0
1a003d24:	d0fa      	beq.n	1a003d1c <__kernel_rem_pio2+0x254>
1a003d26:	9901      	ldr	r1, [sp, #4]
1a003d28:	1c4a      	adds	r2, r1, #1
1a003d2a:	18cb      	adds	r3, r1, r3
1a003d2c:	9302      	str	r3, [sp, #8]
1a003d2e:	4691      	mov	r9, r2
1a003d30:	9b07      	ldr	r3, [sp, #28]
1a003d32:	9908      	ldr	r1, [sp, #32]
1a003d34:	eb02 0a03 	add.w	sl, r2, r3
1a003d38:	9b01      	ldr	r3, [sp, #4]
1a003d3a:	440b      	add	r3, r1
1a003d3c:	461d      	mov	r5, r3
1a003d3e:	ab20      	add	r3, sp, #128	; 0x80
1a003d40:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
1a003d44:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
1a003d48:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
1a003d4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
1a003d4e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
1a003d52:	ab70      	add	r3, sp, #448	; 0x1c0
1a003d54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a003d58:	9301      	str	r3, [sp, #4]
1a003d5a:	f85a 0f04 	ldr.w	r0, [sl, #4]!
1a003d5e:	f000 fe07 	bl	1a004970 <__aeabi_i2d>
1a003d62:	460b      	mov	r3, r1
1a003d64:	9903      	ldr	r1, [sp, #12]
1a003d66:	4602      	mov	r2, r0
1a003d68:	46a8      	mov	r8, r5
1a003d6a:	2900      	cmp	r1, #0
1a003d6c:	e8e8 2302 	strd	r2, r3, [r8], #8
1a003d70:	f04f 0600 	mov.w	r6, #0
1a003d74:	f04f 0700 	mov.w	r7, #0
1a003d78:	db11      	blt.n	1a003d9e <__kernel_rem_pio2+0x2d6>
1a003d7a:	9c04      	ldr	r4, [sp, #16]
1a003d7c:	e001      	b.n	1a003d82 <__kernel_rem_pio2+0x2ba>
1a003d7e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a003d82:	e8f4 0102 	ldrd	r0, r1, [r4], #8
1a003d86:	f000 fe5d 	bl	1a004a44 <__aeabi_dmul>
1a003d8a:	4602      	mov	r2, r0
1a003d8c:	460b      	mov	r3, r1
1a003d8e:	4630      	mov	r0, r6
1a003d90:	4639      	mov	r1, r7
1a003d92:	f000 fca1 	bl	1a0046d8 <__adddf3>
1a003d96:	455c      	cmp	r4, fp
1a003d98:	4606      	mov	r6, r0
1a003d9a:	460f      	mov	r7, r1
1a003d9c:	d1ef      	bne.n	1a003d7e <__kernel_rem_pio2+0x2b6>
1a003d9e:	9b01      	ldr	r3, [sp, #4]
1a003da0:	e8e3 6702 	strd	r6, r7, [r3], #8
1a003da4:	9301      	str	r3, [sp, #4]
1a003da6:	9b02      	ldr	r3, [sp, #8]
1a003da8:	f109 0901 	add.w	r9, r9, #1
1a003dac:	4599      	cmp	r9, r3
1a003dae:	4645      	mov	r5, r8
1a003db0:	ddd3      	ble.n	1a003d5a <__kernel_rem_pio2+0x292>
1a003db2:	9301      	str	r3, [sp, #4]
1a003db4:	e70b      	b.n	1a003bce <__kernel_rem_pio2+0x106>
1a003db6:	bf00      	nop
1a003db8:	1a0061a0 	.word	0x1a0061a0
1a003dbc:	2aaaaaab 	.word	0x2aaaaaab
1a003dc0:	3e700000 	.word	0x3e700000
1a003dc4:	41700000 	.word	0x41700000
1a003dc8:	40200000 	.word	0x40200000
1a003dcc:	d169      	bne.n	1a003ea2 <__kernel_rem_pio2+0x3da>
1a003dce:	9b01      	ldr	r3, [sp, #4]
1a003dd0:	aa0c      	add	r2, sp, #48	; 0x30
1a003dd2:	3b01      	subs	r3, #1
1a003dd4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
1a003dd8:	15ed      	asrs	r5, r5, #23
1a003dda:	2d00      	cmp	r5, #0
1a003ddc:	f77f af74 	ble.w	1a003cc8 <__kernel_rem_pio2+0x200>
1a003de0:	9b01      	ldr	r3, [sp, #4]
1a003de2:	2b00      	cmp	r3, #0
1a003de4:	f108 0801 	add.w	r8, r8, #1
1a003de8:	f340 8207 	ble.w	1a0041fa <__kernel_rem_pio2+0x732>
1a003dec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
1a003dee:	2c00      	cmp	r4, #0
1a003df0:	d13a      	bne.n	1a003e68 <__kernel_rem_pio2+0x3a0>
1a003df2:	9b01      	ldr	r3, [sp, #4]
1a003df4:	2b01      	cmp	r3, #1
1a003df6:	d009      	beq.n	1a003e0c <__kernel_rem_pio2+0x344>
1a003df8:	a90c      	add	r1, sp, #48	; 0x30
1a003dfa:	2201      	movs	r2, #1
1a003dfc:	f851 4f04 	ldr.w	r4, [r1, #4]!
1a003e00:	1c53      	adds	r3, r2, #1
1a003e02:	bb9c      	cbnz	r4, 1a003e6c <__kernel_rem_pio2+0x3a4>
1a003e04:	461a      	mov	r2, r3
1a003e06:	9b01      	ldr	r3, [sp, #4]
1a003e08:	4293      	cmp	r3, r2
1a003e0a:	d1f7      	bne.n	1a003dfc <__kernel_rem_pio2+0x334>
1a003e0c:	9b06      	ldr	r3, [sp, #24]
1a003e0e:	2b00      	cmp	r3, #0
1a003e10:	dd0e      	ble.n	1a003e30 <__kernel_rem_pio2+0x368>
1a003e12:	2b01      	cmp	r3, #1
1a003e14:	f000 8111 	beq.w	1a00403a <__kernel_rem_pio2+0x572>
1a003e18:	2b02      	cmp	r3, #2
1a003e1a:	d109      	bne.n	1a003e30 <__kernel_rem_pio2+0x368>
1a003e1c:	9b01      	ldr	r3, [sp, #4]
1a003e1e:	1e5a      	subs	r2, r3, #1
1a003e20:	ab0c      	add	r3, sp, #48	; 0x30
1a003e22:	a90c      	add	r1, sp, #48	; 0x30
1a003e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a003e28:	f3c3 0315 	ubfx	r3, r3, #0, #22
1a003e2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a003e30:	2d02      	cmp	r5, #2
1a003e32:	f47f af49 	bne.w	1a003cc8 <__kernel_rem_pio2+0x200>
1a003e36:	4632      	mov	r2, r6
1a003e38:	463b      	mov	r3, r7
1a003e3a:	2000      	movs	r0, #0
1a003e3c:	4994      	ldr	r1, [pc, #592]	; (1a004090 <__kernel_rem_pio2+0x5c8>)
1a003e3e:	f000 fc49 	bl	1a0046d4 <__aeabi_dsub>
1a003e42:	4606      	mov	r6, r0
1a003e44:	460f      	mov	r7, r1
1a003e46:	2c00      	cmp	r4, #0
1a003e48:	f43f af3e 	beq.w	1a003cc8 <__kernel_rem_pio2+0x200>
1a003e4c:	9806      	ldr	r0, [sp, #24]
1a003e4e:	ed9f 0b8c 	vldr	d0, [pc, #560]	; 1a004080 <__kernel_rem_pio2+0x5b8>
1a003e52:	f000 fba9 	bl	1a0045a8 <scalbn>
1a003e56:	4630      	mov	r0, r6
1a003e58:	4639      	mov	r1, r7
1a003e5a:	ec53 2b10 	vmov	r2, r3, d0
1a003e5e:	f000 fc39 	bl	1a0046d4 <__aeabi_dsub>
1a003e62:	4606      	mov	r6, r0
1a003e64:	460f      	mov	r7, r1
1a003e66:	e72f      	b.n	1a003cc8 <__kernel_rem_pio2+0x200>
1a003e68:	2301      	movs	r3, #1
1a003e6a:	2200      	movs	r2, #0
1a003e6c:	a90c      	add	r1, sp, #48	; 0x30
1a003e6e:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
1a003e72:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
1a003e76:	9901      	ldr	r1, [sp, #4]
1a003e78:	4299      	cmp	r1, r3
1a003e7a:	dd10      	ble.n	1a003e9e <__kernel_rem_pio2+0x3d6>
1a003e7c:	aa0c      	add	r2, sp, #48	; 0x30
1a003e7e:	a80c      	add	r0, sp, #48	; 0x30
1a003e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a003e84:	eb00 0383 	add.w	r3, r0, r3, lsl #2
1a003e88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
1a003e8c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
1a003e90:	e000      	b.n	1a003e94 <__kernel_rem_pio2+0x3cc>
1a003e92:	681a      	ldr	r2, [r3, #0]
1a003e94:	1a8a      	subs	r2, r1, r2
1a003e96:	f843 2b04 	str.w	r2, [r3], #4
1a003e9a:	4283      	cmp	r3, r0
1a003e9c:	d1f9      	bne.n	1a003e92 <__kernel_rem_pio2+0x3ca>
1a003e9e:	2401      	movs	r4, #1
1a003ea0:	e7b4      	b.n	1a003e0c <__kernel_rem_pio2+0x344>
1a003ea2:	2200      	movs	r2, #0
1a003ea4:	4b7b      	ldr	r3, [pc, #492]	; (1a004094 <__kernel_rem_pio2+0x5cc>)
1a003ea6:	f001 f853 	bl	1a004f50 <__aeabi_dcmpge>
1a003eaa:	2800      	cmp	r0, #0
1a003eac:	f040 80d5 	bne.w	1a00405a <__kernel_rem_pio2+0x592>
1a003eb0:	4605      	mov	r5, r0
1a003eb2:	e709      	b.n	1a003cc8 <__kernel_rem_pio2+0x200>
1a003eb4:	9b01      	ldr	r3, [sp, #4]
1a003eb6:	1c5a      	adds	r2, r3, #1
1a003eb8:	4691      	mov	r9, r2
1a003eba:	9202      	str	r2, [sp, #8]
1a003ebc:	e738      	b.n	1a003d30 <__kernel_rem_pio2+0x268>
1a003ebe:	ab0c      	add	r3, sp, #48	; 0x30
1a003ec0:	9a06      	ldr	r2, [sp, #24]
1a003ec2:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
1a003ec6:	f8cd 801c 	str.w	r8, [sp, #28]
1a003eca:	3a18      	subs	r2, #24
1a003ecc:	9504      	str	r5, [sp, #16]
1a003ece:	9206      	str	r2, [sp, #24]
1a003ed0:	b973      	cbnz	r3, 1a003ef0 <__kernel_rem_pio2+0x428>
1a003ed2:	9b01      	ldr	r3, [sp, #4]
1a003ed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a003ed8:	3b02      	subs	r3, #2
1a003eda:	a90c      	add	r1, sp, #48	; 0x30
1a003edc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
1a003ee0:	f853 1904 	ldr.w	r1, [r3], #-4
1a003ee4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a003ee8:	3a18      	subs	r2, #24
1a003eea:	2900      	cmp	r1, #0
1a003eec:	d0f8      	beq.n	1a003ee0 <__kernel_rem_pio2+0x418>
1a003eee:	9206      	str	r2, [sp, #24]
1a003ef0:	9806      	ldr	r0, [sp, #24]
1a003ef2:	ed9f 0b63 	vldr	d0, [pc, #396]	; 1a004080 <__kernel_rem_pio2+0x5b8>
1a003ef6:	f000 fb57 	bl	1a0045a8 <scalbn>
1a003efa:	f1b9 0f00 	cmp.w	r9, #0
1a003efe:	ec55 4b10 	vmov	r4, r5, d0
1a003f02:	f2c0 81dd 	blt.w	1a0042c0 <__kernel_rem_pio2+0x7f8>
1a003f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
1a003f0a:	aa70      	add	r2, sp, #448	; 0x1c0
1a003f0c:	eb02 0803 	add.w	r8, r2, r3
1a003f10:	9306      	str	r3, [sp, #24]
1a003f12:	f109 0601 	add.w	r6, r9, #1
1a003f16:	ab0c      	add	r3, sp, #48	; 0x30
1a003f18:	f8df b17c 	ldr.w	fp, [pc, #380]	; 1a004098 <__kernel_rem_pio2+0x5d0>
1a003f1c:	f04f 0a00 	mov.w	sl, #0
1a003f20:	f108 0708 	add.w	r7, r8, #8
1a003f24:	eb03 0686 	add.w	r6, r3, r6, lsl #2
1a003f28:	f856 0d04 	ldr.w	r0, [r6, #-4]!
1a003f2c:	f000 fd20 	bl	1a004970 <__aeabi_i2d>
1a003f30:	4622      	mov	r2, r4
1a003f32:	462b      	mov	r3, r5
1a003f34:	f000 fd86 	bl	1a004a44 <__aeabi_dmul>
1a003f38:	465b      	mov	r3, fp
1a003f3a:	e967 0102 	strd	r0, r1, [r7, #-8]!
1a003f3e:	4652      	mov	r2, sl
1a003f40:	4620      	mov	r0, r4
1a003f42:	4629      	mov	r1, r5
1a003f44:	f000 fd7e 	bl	1a004a44 <__aeabi_dmul>
1a003f48:	ab0c      	add	r3, sp, #48	; 0x30
1a003f4a:	429e      	cmp	r6, r3
1a003f4c:	4604      	mov	r4, r0
1a003f4e:	460d      	mov	r5, r1
1a003f50:	d1ea      	bne.n	1a003f28 <__kernel_rem_pio2+0x460>
1a003f52:	f8cd 9008 	str.w	r9, [sp, #8]
1a003f56:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a003f5a:	ab48      	add	r3, sp, #288	; 0x120
1a003f5c:	f1b9 0f00 	cmp.w	r9, #0
1a003f60:	9303      	str	r3, [sp, #12]
1a003f62:	46c3      	mov	fp, r8
1a003f64:	9301      	str	r3, [sp, #4]
1a003f66:	f04f 0a00 	mov.w	sl, #0
1a003f6a:	db2b      	blt.n	1a003fc4 <__kernel_rem_pio2+0x4fc>
1a003f6c:	f8df 812c 	ldr.w	r8, [pc, #300]	; 1a00409c <__kernel_rem_pio2+0x5d4>
1a003f70:	465d      	mov	r5, fp
1a003f72:	a345      	add	r3, pc, #276	; (adr r3, 1a004088 <__kernel_rem_pio2+0x5c0>)
1a003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003f78:	2600      	movs	r6, #0
1a003f7a:	2700      	movs	r7, #0
1a003f7c:	2400      	movs	r4, #0
1a003f7e:	e003      	b.n	1a003f88 <__kernel_rem_pio2+0x4c0>
1a003f80:	4554      	cmp	r4, sl
1a003f82:	dc10      	bgt.n	1a003fa6 <__kernel_rem_pio2+0x4de>
1a003f84:	e8f8 2302 	ldrd	r2, r3, [r8], #8
1a003f88:	e8f5 0102 	ldrd	r0, r1, [r5], #8
1a003f8c:	f000 fd5a 	bl	1a004a44 <__aeabi_dmul>
1a003f90:	4602      	mov	r2, r0
1a003f92:	460b      	mov	r3, r1
1a003f94:	4630      	mov	r0, r6
1a003f96:	4639      	mov	r1, r7
1a003f98:	f000 fb9e 	bl	1a0046d8 <__adddf3>
1a003f9c:	3401      	adds	r4, #1
1a003f9e:	45a1      	cmp	r9, r4
1a003fa0:	4606      	mov	r6, r0
1a003fa2:	460f      	mov	r7, r1
1a003fa4:	daec      	bge.n	1a003f80 <__kernel_rem_pio2+0x4b8>
1a003fa6:	9b01      	ldr	r3, [sp, #4]
1a003fa8:	9a02      	ldr	r2, [sp, #8]
1a003faa:	e8e3 6702 	strd	r6, r7, [r3], #8
1a003fae:	4592      	cmp	sl, r2
1a003fb0:	9301      	str	r3, [sp, #4]
1a003fb2:	f1ab 0b08 	sub.w	fp, fp, #8
1a003fb6:	f10a 0301 	add.w	r3, sl, #1
1a003fba:	d006      	beq.n	1a003fca <__kernel_rem_pio2+0x502>
1a003fbc:	f1b9 0f00 	cmp.w	r9, #0
1a003fc0:	469a      	mov	sl, r3
1a003fc2:	dad3      	bge.n	1a003f6c <__kernel_rem_pio2+0x4a4>
1a003fc4:	2600      	movs	r6, #0
1a003fc6:	2700      	movs	r7, #0
1a003fc8:	e7ed      	b.n	1a003fa6 <__kernel_rem_pio2+0x4de>
1a003fca:	9ba2      	ldr	r3, [sp, #648]	; 0x288
1a003fcc:	f8dd 9008 	ldr.w	r9, [sp, #8]
1a003fd0:	2b03      	cmp	r3, #3
1a003fd2:	d82b      	bhi.n	1a00402c <__kernel_rem_pio2+0x564>
1a003fd4:	e8df f013 	tbh	[pc, r3, lsl #1]
1a003fd8:	00e500f6 	.word	0x00e500f6
1a003fdc:	006600e5 	.word	0x006600e5
1a003fe0:	ab48      	add	r3, sp, #288	; 0x120
1a003fe2:	2400      	movs	r4, #0
1a003fe4:	2500      	movs	r5, #0
1a003fe6:	9303      	str	r3, [sp, #12]
1a003fe8:	9903      	ldr	r1, [sp, #12]
1a003fea:	462b      	mov	r3, r5
1a003fec:	4622      	mov	r2, r4
1a003fee:	e9d1 0100 	ldrd	r0, r1, [r1]
1a003ff2:	f000 fb6f 	bl	1a0046d4 <__aeabi_dsub>
1a003ff6:	9b04      	ldr	r3, [sp, #16]
1a003ff8:	2b00      	cmp	r3, #0
1a003ffa:	f040 8140 	bne.w	1a00427e <__kernel_rem_pio2+0x7b6>
1a003ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004000:	f1b9 0f00 	cmp.w	r9, #0
1a004004:	e9c3 4500 	strd	r4, r5, [r3]
1a004008:	dd0d      	ble.n	1a004026 <__kernel_rem_pio2+0x55e>
1a00400a:	ad4a      	add	r5, sp, #296	; 0x128
1a00400c:	2401      	movs	r4, #1
1a00400e:	3401      	adds	r4, #1
1a004010:	e8f5 2302 	ldrd	r2, r3, [r5], #8
1a004014:	f000 fb60 	bl	1a0046d8 <__adddf3>
1a004018:	45a1      	cmp	r9, r4
1a00401a:	daf8      	bge.n	1a00400e <__kernel_rem_pio2+0x546>
1a00401c:	9b04      	ldr	r3, [sp, #16]
1a00401e:	b113      	cbz	r3, 1a004026 <__kernel_rem_pio2+0x55e>
1a004020:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a004024:	4619      	mov	r1, r3
1a004026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004028:	e9c3 0102 	strd	r0, r1, [r3, #8]
1a00402c:	9b07      	ldr	r3, [sp, #28]
1a00402e:	f003 0007 	and.w	r0, r3, #7
1a004032:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
1a004036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00403a:	9b01      	ldr	r3, [sp, #4]
1a00403c:	1e5a      	subs	r2, r3, #1
1a00403e:	ab0c      	add	r3, sp, #48	; 0x30
1a004040:	a90c      	add	r1, sp, #48	; 0x30
1a004042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a004046:	f3c3 0316 	ubfx	r3, r3, #0, #23
1a00404a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a00404e:	e6ef      	b.n	1a003e30 <__kernel_rem_pio2+0x368>
1a004050:	2100      	movs	r1, #0
1a004052:	f06f 0317 	mvn.w	r3, #23
1a004056:	9107      	str	r1, [sp, #28]
1a004058:	e554      	b.n	1a003b04 <__kernel_rem_pio2+0x3c>
1a00405a:	9b01      	ldr	r3, [sp, #4]
1a00405c:	2b00      	cmp	r3, #0
1a00405e:	f108 0801 	add.w	r8, r8, #1
1a004062:	bfc8      	it	gt
1a004064:	2502      	movgt	r5, #2
1a004066:	f73f aec1 	bgt.w	1a003dec <__kernel_rem_pio2+0x324>
1a00406a:	4632      	mov	r2, r6
1a00406c:	463b      	mov	r3, r7
1a00406e:	2000      	movs	r0, #0
1a004070:	4907      	ldr	r1, [pc, #28]	; (1a004090 <__kernel_rem_pio2+0x5c8>)
1a004072:	f000 fb2f 	bl	1a0046d4 <__aeabi_dsub>
1a004076:	2502      	movs	r5, #2
1a004078:	4606      	mov	r6, r0
1a00407a:	460f      	mov	r7, r1
1a00407c:	e624      	b.n	1a003cc8 <__kernel_rem_pio2+0x200>
1a00407e:	bf00      	nop
1a004080:	00000000 	.word	0x00000000
1a004084:	3ff00000 	.word	0x3ff00000
1a004088:	40000000 	.word	0x40000000
1a00408c:	3ff921fb 	.word	0x3ff921fb
1a004090:	3ff00000 	.word	0x3ff00000
1a004094:	3fe00000 	.word	0x3fe00000
1a004098:	3e700000 	.word	0x3e700000
1a00409c:	1a006168 	.word	0x1a006168
1a0040a0:	ab48      	add	r3, sp, #288	; 0x120
1a0040a2:	9303      	str	r3, [sp, #12]
1a0040a4:	f1b9 0f00 	cmp.w	r9, #0
1a0040a8:	f340 811d 	ble.w	1a0042e6 <__kernel_rem_pio2+0x81e>
1a0040ac:	9a03      	ldr	r2, [sp, #12]
1a0040ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
1a0040b2:	9301      	str	r3, [sp, #4]
1a0040b4:	18d3      	adds	r3, r2, r3
1a0040b6:	e9d3 ab00 	ldrd	sl, fp, [r3]
1a0040ba:	4698      	mov	r8, r3
1a0040bc:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
1a0040c0:	4652      	mov	r2, sl
1a0040c2:	465b      	mov	r3, fp
1a0040c4:	4630      	mov	r0, r6
1a0040c6:	4639      	mov	r1, r7
1a0040c8:	f000 fb06 	bl	1a0046d8 <__adddf3>
1a0040cc:	4604      	mov	r4, r0
1a0040ce:	460d      	mov	r5, r1
1a0040d0:	4602      	mov	r2, r0
1a0040d2:	460b      	mov	r3, r1
1a0040d4:	4630      	mov	r0, r6
1a0040d6:	4639      	mov	r1, r7
1a0040d8:	f000 fafc 	bl	1a0046d4 <__aeabi_dsub>
1a0040dc:	465b      	mov	r3, fp
1a0040de:	4652      	mov	r2, sl
1a0040e0:	f000 fafa 	bl	1a0046d8 <__adddf3>
1a0040e4:	9b03      	ldr	r3, [sp, #12]
1a0040e6:	4543      	cmp	r3, r8
1a0040e8:	46a2      	mov	sl, r4
1a0040ea:	46ab      	mov	fp, r5
1a0040ec:	e9c8 0102 	strd	r0, r1, [r8, #8]
1a0040f0:	e9c8 4500 	strd	r4, r5, [r8]
1a0040f4:	d1e2      	bne.n	1a0040bc <__kernel_rem_pio2+0x5f4>
1a0040f6:	f1b9 0f01 	cmp.w	r9, #1
1a0040fa:	f340 80f4 	ble.w	1a0042e6 <__kernel_rem_pio2+0x81e>
1a0040fe:	9b01      	ldr	r3, [sp, #4]
1a004100:	9a03      	ldr	r2, [sp, #12]
1a004102:	f109 5900 	add.w	r9, r9, #536870912	; 0x20000000
1a004106:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a00410a:	4413      	add	r3, r2
1a00410c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
1a004110:	e9d3 6700 	ldrd	r6, r7, [r3]
1a004114:	f101 0a08 	add.w	sl, r1, #8
1a004118:	9101      	str	r1, [sp, #4]
1a00411a:	4492      	add	sl, r2
1a00411c:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
1a004120:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
1a004124:	4632      	mov	r2, r6
1a004126:	463b      	mov	r3, r7
1a004128:	4640      	mov	r0, r8
1a00412a:	4649      	mov	r1, r9
1a00412c:	f000 fad4 	bl	1a0046d8 <__adddf3>
1a004130:	4604      	mov	r4, r0
1a004132:	460d      	mov	r5, r1
1a004134:	4602      	mov	r2, r0
1a004136:	460b      	mov	r3, r1
1a004138:	4640      	mov	r0, r8
1a00413a:	4649      	mov	r1, r9
1a00413c:	f000 faca 	bl	1a0046d4 <__aeabi_dsub>
1a004140:	4632      	mov	r2, r6
1a004142:	463b      	mov	r3, r7
1a004144:	f000 fac8 	bl	1a0046d8 <__adddf3>
1a004148:	45d3      	cmp	fp, sl
1a00414a:	4626      	mov	r6, r4
1a00414c:	462f      	mov	r7, r5
1a00414e:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a004152:	e9ca 4500 	strd	r4, r5, [sl]
1a004156:	d1e3      	bne.n	1a004120 <__kernel_rem_pio2+0x658>
1a004158:	9c01      	ldr	r4, [sp, #4]
1a00415a:	9b03      	ldr	r3, [sp, #12]
1a00415c:	3410      	adds	r4, #16
1a00415e:	2000      	movs	r0, #0
1a004160:	2100      	movs	r1, #0
1a004162:	441c      	add	r4, r3
1a004164:	f103 0510 	add.w	r5, r3, #16
1a004168:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
1a00416c:	f000 fab4 	bl	1a0046d8 <__adddf3>
1a004170:	42a5      	cmp	r5, r4
1a004172:	d1f9      	bne.n	1a004168 <__kernel_rem_pio2+0x6a0>
1a004174:	9c03      	ldr	r4, [sp, #12]
1a004176:	9e04      	ldr	r6, [sp, #16]
1a004178:	e9d4 2300 	ldrd	r2, r3, [r4]
1a00417c:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
1a004180:	2e00      	cmp	r6, #0
1a004182:	f040 8087 	bne.w	1a004294 <__kernel_rem_pio2+0x7cc>
1a004186:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1a004188:	e9c6 2300 	strd	r2, r3, [r6]
1a00418c:	9b07      	ldr	r3, [sp, #28]
1a00418e:	e9c6 0104 	strd	r0, r1, [r6, #16]
1a004192:	f003 0007 	and.w	r0, r3, #7
1a004196:	e9c6 4502 	strd	r4, r5, [r6, #8]
1a00419a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
1a00419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0041a2:	9e06      	ldr	r6, [sp, #24]
1a0041a4:	9f03      	ldr	r7, [sp, #12]
1a0041a6:	3608      	adds	r6, #8
1a0041a8:	2400      	movs	r4, #0
1a0041aa:	2500      	movs	r5, #0
1a0041ac:	443e      	add	r6, r7
1a0041ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
1a0041b2:	4620      	mov	r0, r4
1a0041b4:	4629      	mov	r1, r5
1a0041b6:	f000 fa8f 	bl	1a0046d8 <__adddf3>
1a0041ba:	42b7      	cmp	r7, r6
1a0041bc:	4604      	mov	r4, r0
1a0041be:	460d      	mov	r5, r1
1a0041c0:	d1f5      	bne.n	1a0041ae <__kernel_rem_pio2+0x6e6>
1a0041c2:	e711      	b.n	1a003fe8 <__kernel_rem_pio2+0x520>
1a0041c4:	9c06      	ldr	r4, [sp, #24]
1a0041c6:	9d03      	ldr	r5, [sp, #12]
1a0041c8:	3408      	adds	r4, #8
1a0041ca:	2000      	movs	r0, #0
1a0041cc:	2100      	movs	r1, #0
1a0041ce:	442c      	add	r4, r5
1a0041d0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
1a0041d4:	f000 fa80 	bl	1a0046d8 <__adddf3>
1a0041d8:	42a5      	cmp	r5, r4
1a0041da:	d1f9      	bne.n	1a0041d0 <__kernel_rem_pio2+0x708>
1a0041dc:	9b04      	ldr	r3, [sp, #16]
1a0041de:	b113      	cbz	r3, 1a0041e6 <__kernel_rem_pio2+0x71e>
1a0041e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a0041e4:	4619      	mov	r1, r3
1a0041e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0041e8:	e9c3 0100 	strd	r0, r1, [r3]
1a0041ec:	9b07      	ldr	r3, [sp, #28]
1a0041ee:	f003 0007 	and.w	r0, r3, #7
1a0041f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
1a0041f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0041fa:	2400      	movs	r4, #0
1a0041fc:	e606      	b.n	1a003e0c <__kernel_rem_pio2+0x344>
1a0041fe:	9b06      	ldr	r3, [sp, #24]
1a004200:	9504      	str	r5, [sp, #16]
1a004202:	4258      	negs	r0, r3
1a004204:	ec47 6b10 	vmov	d0, r6, r7
1a004208:	f8cd 801c 	str.w	r8, [sp, #28]
1a00420c:	f000 f9cc 	bl	1a0045a8 <scalbn>
1a004210:	ec55 4b10 	vmov	r4, r5, d0
1a004214:	2200      	movs	r2, #0
1a004216:	4b35      	ldr	r3, [pc, #212]	; (1a0042ec <__kernel_rem_pio2+0x824>)
1a004218:	ee10 0a10 	vmov	r0, s0
1a00421c:	4629      	mov	r1, r5
1a00421e:	f000 fe97 	bl	1a004f50 <__aeabi_dcmpge>
1a004222:	b310      	cbz	r0, 1a00426a <__kernel_rem_pio2+0x7a2>
1a004224:	2200      	movs	r2, #0
1a004226:	4b32      	ldr	r3, [pc, #200]	; (1a0042f0 <__kernel_rem_pio2+0x828>)
1a004228:	4620      	mov	r0, r4
1a00422a:	4629      	mov	r1, r5
1a00422c:	f000 fc0a 	bl	1a004a44 <__aeabi_dmul>
1a004230:	f000 fea2 	bl	1a004f78 <__aeabi_d2iz>
1a004234:	4606      	mov	r6, r0
1a004236:	f000 fb9b 	bl	1a004970 <__aeabi_i2d>
1a00423a:	2200      	movs	r2, #0
1a00423c:	4b2b      	ldr	r3, [pc, #172]	; (1a0042ec <__kernel_rem_pio2+0x824>)
1a00423e:	f000 fc01 	bl	1a004a44 <__aeabi_dmul>
1a004242:	4602      	mov	r2, r0
1a004244:	460b      	mov	r3, r1
1a004246:	4620      	mov	r0, r4
1a004248:	4629      	mov	r1, r5
1a00424a:	f000 fa43 	bl	1a0046d4 <__aeabi_dsub>
1a00424e:	f000 fe93 	bl	1a004f78 <__aeabi_d2iz>
1a004252:	9b06      	ldr	r3, [sp, #24]
1a004254:	9a01      	ldr	r2, [sp, #4]
1a004256:	3318      	adds	r3, #24
1a004258:	f102 0901 	add.w	r9, r2, #1
1a00425c:	9306      	str	r3, [sp, #24]
1a00425e:	ab0c      	add	r3, sp, #48	; 0x30
1a004260:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
1a004264:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
1a004268:	e642      	b.n	1a003ef0 <__kernel_rem_pio2+0x428>
1a00426a:	4620      	mov	r0, r4
1a00426c:	4629      	mov	r1, r5
1a00426e:	f000 fe83 	bl	1a004f78 <__aeabi_d2iz>
1a004272:	9b01      	ldr	r3, [sp, #4]
1a004274:	aa0c      	add	r2, sp, #48	; 0x30
1a004276:	4699      	mov	r9, r3
1a004278:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
1a00427c:	e638      	b.n	1a003ef0 <__kernel_rem_pio2+0x428>
1a00427e:	4622      	mov	r2, r4
1a004280:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
1a004282:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a004286:	f1b9 0f00 	cmp.w	r9, #0
1a00428a:	e9c4 2300 	strd	r2, r3, [r4]
1a00428e:	f73f aebc 	bgt.w	1a00400a <__kernel_rem_pio2+0x542>
1a004292:	e6c5      	b.n	1a004020 <__kernel_rem_pio2+0x558>
1a004294:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
1a004298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a00429c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a00429e:	e9c1 0304 	strd	r0, r3, [r1, #16]
1a0042a2:	9b07      	ldr	r3, [sp, #28]
1a0042a4:	4626      	mov	r6, r4
1a0042a6:	4694      	mov	ip, r2
1a0042a8:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
1a0042ac:	f003 0007 	and.w	r0, r3, #7
1a0042b0:	e9c1 c700 	strd	ip, r7, [r1]
1a0042b4:	e9c1 6402 	strd	r6, r4, [r1, #8]
1a0042b8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
1a0042bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0042c0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
1a0042c2:	2b03      	cmp	r3, #3
1a0042c4:	f63f aeb2 	bhi.w	1a00402c <__kernel_rem_pio2+0x564>
1a0042c8:	a201      	add	r2, pc, #4	; (adr r2, 1a0042d0 <__kernel_rem_pio2+0x808>)
1a0042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0042ce:	bf00      	nop
1a0042d0:	1a0042e1 	.word	0x1a0042e1
1a0042d4:	1a003fe1 	.word	0x1a003fe1
1a0042d8:	1a003fe1 	.word	0x1a003fe1
1a0042dc:	1a0040a1 	.word	0x1a0040a1
1a0042e0:	2000      	movs	r0, #0
1a0042e2:	2100      	movs	r1, #0
1a0042e4:	e77a      	b.n	1a0041dc <__kernel_rem_pio2+0x714>
1a0042e6:	2000      	movs	r0, #0
1a0042e8:	2100      	movs	r1, #0
1a0042ea:	e743      	b.n	1a004174 <__kernel_rem_pio2+0x6ac>
1a0042ec:	41700000 	.word	0x41700000
1a0042f0:	3e700000 	.word	0x3e700000
1a0042f4:	ffffffff 	.word	0xffffffff

1a0042f8 <__kernel_sin>:
1a0042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0042fc:	ec55 4b10 	vmov	r4, r5, d0
1a004300:	ed2d 8b02 	vpush	{d8}
1a004304:	eeb0 8a41 	vmov.f32	s16, s2
1a004308:	eef0 8a61 	vmov.f32	s17, s3
1a00430c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a004310:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
1a004314:	b083      	sub	sp, #12
1a004316:	4682      	mov	sl, r0
1a004318:	da07      	bge.n	1a00432a <__kernel_sin+0x32>
1a00431a:	ee10 0a10 	vmov	r0, s0
1a00431e:	4629      	mov	r1, r5
1a004320:	f000 fe2a 	bl	1a004f78 <__aeabi_d2iz>
1a004324:	2800      	cmp	r0, #0
1a004326:	f000 808e 	beq.w	1a004446 <__kernel_sin+0x14e>
1a00432a:	4622      	mov	r2, r4
1a00432c:	462b      	mov	r3, r5
1a00432e:	4620      	mov	r0, r4
1a004330:	4629      	mov	r1, r5
1a004332:	f000 fb87 	bl	1a004a44 <__aeabi_dmul>
1a004336:	4606      	mov	r6, r0
1a004338:	460f      	mov	r7, r1
1a00433a:	4602      	mov	r2, r0
1a00433c:	460b      	mov	r3, r1
1a00433e:	4620      	mov	r0, r4
1a004340:	4629      	mov	r1, r5
1a004342:	f000 fb7f 	bl	1a004a44 <__aeabi_dmul>
1a004346:	a347      	add	r3, pc, #284	; (adr r3, 1a004464 <__kernel_sin+0x16c>)
1a004348:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00434c:	4680      	mov	r8, r0
1a00434e:	4689      	mov	r9, r1
1a004350:	4630      	mov	r0, r6
1a004352:	4639      	mov	r1, r7
1a004354:	f000 fb76 	bl	1a004a44 <__aeabi_dmul>
1a004358:	a344      	add	r3, pc, #272	; (adr r3, 1a00446c <__kernel_sin+0x174>)
1a00435a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00435e:	f000 f9b9 	bl	1a0046d4 <__aeabi_dsub>
1a004362:	4632      	mov	r2, r6
1a004364:	463b      	mov	r3, r7
1a004366:	f000 fb6d 	bl	1a004a44 <__aeabi_dmul>
1a00436a:	a342      	add	r3, pc, #264	; (adr r3, 1a004474 <__kernel_sin+0x17c>)
1a00436c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004370:	f000 f9b2 	bl	1a0046d8 <__adddf3>
1a004374:	4632      	mov	r2, r6
1a004376:	463b      	mov	r3, r7
1a004378:	f000 fb64 	bl	1a004a44 <__aeabi_dmul>
1a00437c:	a33f      	add	r3, pc, #252	; (adr r3, 1a00447c <__kernel_sin+0x184>)
1a00437e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004382:	f000 f9a7 	bl	1a0046d4 <__aeabi_dsub>
1a004386:	4632      	mov	r2, r6
1a004388:	463b      	mov	r3, r7
1a00438a:	f000 fb5b 	bl	1a004a44 <__aeabi_dmul>
1a00438e:	a33d      	add	r3, pc, #244	; (adr r3, 1a004484 <__kernel_sin+0x18c>)
1a004390:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004394:	f000 f9a0 	bl	1a0046d8 <__adddf3>
1a004398:	e9cd 0100 	strd	r0, r1, [sp]
1a00439c:	f1ba 0f00 	cmp.w	sl, #0
1a0043a0:	d037      	beq.n	1a004412 <__kernel_sin+0x11a>
1a0043a2:	2200      	movs	r2, #0
1a0043a4:	4b2e      	ldr	r3, [pc, #184]	; (1a004460 <__kernel_sin+0x168>)
1a0043a6:	ec51 0b18 	vmov	r0, r1, d8
1a0043aa:	f000 fb4b 	bl	1a004a44 <__aeabi_dmul>
1a0043ae:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0043b2:	4682      	mov	sl, r0
1a0043b4:	468b      	mov	fp, r1
1a0043b6:	4640      	mov	r0, r8
1a0043b8:	4649      	mov	r1, r9
1a0043ba:	f000 fb43 	bl	1a004a44 <__aeabi_dmul>
1a0043be:	4602      	mov	r2, r0
1a0043c0:	460b      	mov	r3, r1
1a0043c2:	4650      	mov	r0, sl
1a0043c4:	4659      	mov	r1, fp
1a0043c6:	f000 f985 	bl	1a0046d4 <__aeabi_dsub>
1a0043ca:	4632      	mov	r2, r6
1a0043cc:	463b      	mov	r3, r7
1a0043ce:	f000 fb39 	bl	1a004a44 <__aeabi_dmul>
1a0043d2:	ec53 2b18 	vmov	r2, r3, d8
1a0043d6:	f000 f97d 	bl	1a0046d4 <__aeabi_dsub>
1a0043da:	a31f      	add	r3, pc, #124	; (adr r3, 1a004458 <__kernel_sin+0x160>)
1a0043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0043e0:	4606      	mov	r6, r0
1a0043e2:	460f      	mov	r7, r1
1a0043e4:	4640      	mov	r0, r8
1a0043e6:	4649      	mov	r1, r9
1a0043e8:	f000 fb2c 	bl	1a004a44 <__aeabi_dmul>
1a0043ec:	4602      	mov	r2, r0
1a0043ee:	460b      	mov	r3, r1
1a0043f0:	4630      	mov	r0, r6
1a0043f2:	4639      	mov	r1, r7
1a0043f4:	f000 f970 	bl	1a0046d8 <__adddf3>
1a0043f8:	4602      	mov	r2, r0
1a0043fa:	460b      	mov	r3, r1
1a0043fc:	4620      	mov	r0, r4
1a0043fe:	4629      	mov	r1, r5
1a004400:	f000 f968 	bl	1a0046d4 <__aeabi_dsub>
1a004404:	ec41 0b10 	vmov	d0, r0, r1
1a004408:	b003      	add	sp, #12
1a00440a:	ecbd 8b02 	vpop	{d8}
1a00440e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004412:	4602      	mov	r2, r0
1a004414:	460b      	mov	r3, r1
1a004416:	4630      	mov	r0, r6
1a004418:	4639      	mov	r1, r7
1a00441a:	f000 fb13 	bl	1a004a44 <__aeabi_dmul>
1a00441e:	a30e      	add	r3, pc, #56	; (adr r3, 1a004458 <__kernel_sin+0x160>)
1a004420:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004424:	f000 f956 	bl	1a0046d4 <__aeabi_dsub>
1a004428:	4642      	mov	r2, r8
1a00442a:	464b      	mov	r3, r9
1a00442c:	f000 fb0a 	bl	1a004a44 <__aeabi_dmul>
1a004430:	4622      	mov	r2, r4
1a004432:	462b      	mov	r3, r5
1a004434:	f000 f950 	bl	1a0046d8 <__adddf3>
1a004438:	ec41 0b10 	vmov	d0, r0, r1
1a00443c:	b003      	add	sp, #12
1a00443e:	ecbd 8b02 	vpop	{d8}
1a004442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004446:	ec45 4b10 	vmov	d0, r4, r5
1a00444a:	b003      	add	sp, #12
1a00444c:	ecbd 8b02 	vpop	{d8}
1a004450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004454:	f3af 8000 	nop.w
1a004458:	55555549 	.word	0x55555549
1a00445c:	3fc55555 	.word	0x3fc55555
1a004460:	3fe00000 	.word	0x3fe00000
1a004464:	5acfd57c 	.word	0x5acfd57c
1a004468:	3de5d93a 	.word	0x3de5d93a
1a00446c:	8a2b9ceb 	.word	0x8a2b9ceb
1a004470:	3e5ae5e6 	.word	0x3e5ae5e6
1a004474:	57b1fe7d 	.word	0x57b1fe7d
1a004478:	3ec71de3 	.word	0x3ec71de3
1a00447c:	19c161d5 	.word	0x19c161d5
1a004480:	3f2a01a0 	.word	0x3f2a01a0
1a004484:	1110f8a6 	.word	0x1110f8a6
1a004488:	3f811111 	.word	0x3f811111

1a00448c <fabs>:
1a00448c:	ec51 0b10 	vmov	r0, r1, d0
1a004490:	ee10 2a10 	vmov	r2, s0
1a004494:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a004498:	ec43 2b10 	vmov	d0, r2, r3
1a00449c:	4770      	bx	lr
1a00449e:	bf00      	nop

1a0044a0 <floor>:
1a0044a0:	ec51 0b10 	vmov	r0, r1, d0
1a0044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0044a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
1a0044aa:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
1a0044ae:	2d13      	cmp	r5, #19
1a0044b0:	460c      	mov	r4, r1
1a0044b2:	ee10 6a10 	vmov	r6, s0
1a0044b6:	dc30      	bgt.n	1a00451a <floor+0x7a>
1a0044b8:	2d00      	cmp	r5, #0
1a0044ba:	db1e      	blt.n	1a0044fa <floor+0x5a>
1a0044bc:	4f38      	ldr	r7, [pc, #224]	; (1a0045a0 <floor+0x100>)
1a0044be:	412f      	asrs	r7, r5
1a0044c0:	ea07 0301 	and.w	r3, r7, r1
1a0044c4:	4303      	orrs	r3, r0
1a0044c6:	d02d      	beq.n	1a004524 <floor+0x84>
1a0044c8:	a333      	add	r3, pc, #204	; (adr r3, 1a004598 <floor+0xf8>)
1a0044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0044ce:	f000 f903 	bl	1a0046d8 <__adddf3>
1a0044d2:	2200      	movs	r2, #0
1a0044d4:	2300      	movs	r3, #0
1a0044d6:	f000 fd45 	bl	1a004f64 <__aeabi_dcmpgt>
1a0044da:	b148      	cbz	r0, 1a0044f0 <floor+0x50>
1a0044dc:	2c00      	cmp	r4, #0
1a0044de:	da04      	bge.n	1a0044ea <floor+0x4a>
1a0044e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
1a0044e4:	fa43 f505 	asr.w	r5, r3, r5
1a0044e8:	442c      	add	r4, r5
1a0044ea:	ea24 0407 	bic.w	r4, r4, r7
1a0044ee:	2600      	movs	r6, #0
1a0044f0:	4623      	mov	r3, r4
1a0044f2:	4632      	mov	r2, r6
1a0044f4:	ec43 2b10 	vmov	d0, r2, r3
1a0044f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0044fa:	a327      	add	r3, pc, #156	; (adr r3, 1a004598 <floor+0xf8>)
1a0044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004500:	f000 f8ea 	bl	1a0046d8 <__adddf3>
1a004504:	2200      	movs	r2, #0
1a004506:	2300      	movs	r3, #0
1a004508:	f000 fd2c 	bl	1a004f64 <__aeabi_dcmpgt>
1a00450c:	2800      	cmp	r0, #0
1a00450e:	d0ef      	beq.n	1a0044f0 <floor+0x50>
1a004510:	2c00      	cmp	r4, #0
1a004512:	db29      	blt.n	1a004568 <floor+0xc8>
1a004514:	2600      	movs	r6, #0
1a004516:	4634      	mov	r4, r6
1a004518:	e7ea      	b.n	1a0044f0 <floor+0x50>
1a00451a:	2d33      	cmp	r5, #51	; 0x33
1a00451c:	dd05      	ble.n	1a00452a <floor+0x8a>
1a00451e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
1a004522:	d019      	beq.n	1a004558 <floor+0xb8>
1a004524:	ec41 0b10 	vmov	d0, r0, r1
1a004528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00452a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
1a00452e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a004532:	40df      	lsrs	r7, r3
1a004534:	4207      	tst	r7, r0
1a004536:	d0f5      	beq.n	1a004524 <floor+0x84>
1a004538:	a317      	add	r3, pc, #92	; (adr r3, 1a004598 <floor+0xf8>)
1a00453a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00453e:	f000 f8cb 	bl	1a0046d8 <__adddf3>
1a004542:	2200      	movs	r2, #0
1a004544:	2300      	movs	r3, #0
1a004546:	f000 fd0d 	bl	1a004f64 <__aeabi_dcmpgt>
1a00454a:	2800      	cmp	r0, #0
1a00454c:	d0d0      	beq.n	1a0044f0 <floor+0x50>
1a00454e:	2c00      	cmp	r4, #0
1a004550:	db13      	blt.n	1a00457a <floor+0xda>
1a004552:	ea26 0607 	bic.w	r6, r6, r7
1a004556:	e7cb      	b.n	1a0044f0 <floor+0x50>
1a004558:	ee10 2a10 	vmov	r2, s0
1a00455c:	460b      	mov	r3, r1
1a00455e:	f000 f8bb 	bl	1a0046d8 <__adddf3>
1a004562:	ec41 0b10 	vmov	d0, r0, r1
1a004566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004568:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
1a00456c:	4a0d      	ldr	r2, [pc, #52]	; (1a0045a4 <floor+0x104>)
1a00456e:	431e      	orrs	r6, r3
1a004570:	2e00      	cmp	r6, #0
1a004572:	bf18      	it	ne
1a004574:	4614      	movne	r4, r2
1a004576:	2600      	movs	r6, #0
1a004578:	e7ba      	b.n	1a0044f0 <floor+0x50>
1a00457a:	2d14      	cmp	r5, #20
1a00457c:	d008      	beq.n	1a004590 <floor+0xf0>
1a00457e:	2301      	movs	r3, #1
1a004580:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
1a004584:	fa03 f505 	lsl.w	r5, r3, r5
1a004588:	19ae      	adds	r6, r5, r6
1a00458a:	bf28      	it	cs
1a00458c:	18e4      	addcs	r4, r4, r3
1a00458e:	e7e0      	b.n	1a004552 <floor+0xb2>
1a004590:	3401      	adds	r4, #1
1a004592:	e7de      	b.n	1a004552 <floor+0xb2>
1a004594:	f3af 8000 	nop.w
1a004598:	8800759c 	.word	0x8800759c
1a00459c:	7e37e43c 	.word	0x7e37e43c
1a0045a0:	000fffff 	.word	0x000fffff
1a0045a4:	bff00000 	.word	0xbff00000

1a0045a8 <scalbn>:
1a0045a8:	b538      	push	{r3, r4, r5, lr}
1a0045aa:	ec53 2b10 	vmov	r2, r3, d0
1a0045ae:	f3c3 510a 	ubfx	r1, r3, #20, #11
1a0045b2:	461c      	mov	r4, r3
1a0045b4:	4605      	mov	r5, r0
1a0045b6:	bb81      	cbnz	r1, 1a00461a <scalbn+0x72>
1a0045b8:	ee10 1a10 	vmov	r1, s0
1a0045bc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
1a0045c0:	4321      	orrs	r1, r4
1a0045c2:	d029      	beq.n	1a004618 <scalbn+0x70>
1a0045c4:	4619      	mov	r1, r3
1a0045c6:	2200      	movs	r2, #0
1a0045c8:	4b3d      	ldr	r3, [pc, #244]	; (1a0046c0 <scalbn+0x118>)
1a0045ca:	4c3e      	ldr	r4, [pc, #248]	; (1a0046c4 <scalbn+0x11c>)
1a0045cc:	ee10 0a10 	vmov	r0, s0
1a0045d0:	f000 fa38 	bl	1a004a44 <__aeabi_dmul>
1a0045d4:	42a5      	cmp	r5, r4
1a0045d6:	4602      	mov	r2, r0
1a0045d8:	460b      	mov	r3, r1
1a0045da:	db16      	blt.n	1a00460a <scalbn+0x62>
1a0045dc:	460c      	mov	r4, r1
1a0045de:	f3c1 510a 	ubfx	r1, r1, #20, #11
1a0045e2:	3936      	subs	r1, #54	; 0x36
1a0045e4:	4429      	add	r1, r5
1a0045e6:	f240 70fe 	movw	r0, #2046	; 0x7fe
1a0045ea:	4281      	cmp	r1, r0
1a0045ec:	dc21      	bgt.n	1a004632 <scalbn+0x8a>
1a0045ee:	2900      	cmp	r1, #0
1a0045f0:	dc47      	bgt.n	1a004682 <scalbn+0xda>
1a0045f2:	f111 0f35 	cmn.w	r1, #53	; 0x35
1a0045f6:	da34      	bge.n	1a004662 <scalbn+0xba>
1a0045f8:	f24c 3150 	movw	r1, #50000	; 0xc350
1a0045fc:	428d      	cmp	r5, r1
1a0045fe:	dc18      	bgt.n	1a004632 <scalbn+0x8a>
1a004600:	2b00      	cmp	r3, #0
1a004602:	a127      	add	r1, pc, #156	; (adr r1, 1a0046a0 <scalbn+0xf8>)
1a004604:	e9d1 0100 	ldrd	r0, r1, [r1]
1a004608:	db44      	blt.n	1a004694 <scalbn+0xec>
1a00460a:	a325      	add	r3, pc, #148	; (adr r3, 1a0046a0 <scalbn+0xf8>)
1a00460c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004610:	f000 fa18 	bl	1a004a44 <__aeabi_dmul>
1a004614:	ec41 0b10 	vmov	d0, r0, r1
1a004618:	bd38      	pop	{r3, r4, r5, pc}
1a00461a:	f240 70ff 	movw	r0, #2047	; 0x7ff
1a00461e:	4281      	cmp	r1, r0
1a004620:	d1e0      	bne.n	1a0045e4 <scalbn+0x3c>
1a004622:	ee10 0a10 	vmov	r0, s0
1a004626:	4619      	mov	r1, r3
1a004628:	f000 f856 	bl	1a0046d8 <__adddf3>
1a00462c:	ec41 0b10 	vmov	d0, r0, r1
1a004630:	bd38      	pop	{r3, r4, r5, pc}
1a004632:	2b00      	cmp	r3, #0
1a004634:	a11c      	add	r1, pc, #112	; (adr r1, 1a0046a8 <scalbn+0x100>)
1a004636:	e9d1 0100 	ldrd	r0, r1, [r1]
1a00463a:	db07      	blt.n	1a00464c <scalbn+0xa4>
1a00463c:	a31a      	add	r3, pc, #104	; (adr r3, 1a0046a8 <scalbn+0x100>)
1a00463e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004642:	f000 f9ff 	bl	1a004a44 <__aeabi_dmul>
1a004646:	ec41 0b10 	vmov	d0, r0, r1
1a00464a:	bd38      	pop	{r3, r4, r5, pc}
1a00464c:	a118      	add	r1, pc, #96	; (adr r1, 1a0046b0 <scalbn+0x108>)
1a00464e:	e9d1 0100 	ldrd	r0, r1, [r1]
1a004652:	a315      	add	r3, pc, #84	; (adr r3, 1a0046a8 <scalbn+0x100>)
1a004654:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004658:	f000 f9f4 	bl	1a004a44 <__aeabi_dmul>
1a00465c:	ec41 0b10 	vmov	d0, r0, r1
1a004660:	e7f3      	b.n	1a00464a <scalbn+0xa2>
1a004662:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
1a004666:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
1a00466a:	3136      	adds	r1, #54	; 0x36
1a00466c:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
1a004670:	4610      	mov	r0, r2
1a004672:	4619      	mov	r1, r3
1a004674:	2200      	movs	r2, #0
1a004676:	4b14      	ldr	r3, [pc, #80]	; (1a0046c8 <scalbn+0x120>)
1a004678:	f000 f9e4 	bl	1a004a44 <__aeabi_dmul>
1a00467c:	ec41 0b10 	vmov	d0, r0, r1
1a004680:	bd38      	pop	{r3, r4, r5, pc}
1a004682:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
1a004686:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
1a00468a:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
1a00468e:	ec43 2b10 	vmov	d0, r2, r3
1a004692:	bd38      	pop	{r3, r4, r5, pc}
1a004694:	a108      	add	r1, pc, #32	; (adr r1, 1a0046b8 <scalbn+0x110>)
1a004696:	e9d1 0100 	ldrd	r0, r1, [r1]
1a00469a:	e7b6      	b.n	1a00460a <scalbn+0x62>
1a00469c:	f3af 8000 	nop.w
1a0046a0:	c2f8f359 	.word	0xc2f8f359
1a0046a4:	01a56e1f 	.word	0x01a56e1f
1a0046a8:	8800759c 	.word	0x8800759c
1a0046ac:	7e37e43c 	.word	0x7e37e43c
1a0046b0:	8800759c 	.word	0x8800759c
1a0046b4:	fe37e43c 	.word	0xfe37e43c
1a0046b8:	c2f8f359 	.word	0xc2f8f359
1a0046bc:	81a56e1f 	.word	0x81a56e1f
1a0046c0:	43500000 	.word	0x43500000
1a0046c4:	ffff3cb0 	.word	0xffff3cb0
1a0046c8:	3c900000 	.word	0x3c900000

1a0046cc <__aeabi_drsub>:
1a0046cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a0046d0:	e002      	b.n	1a0046d8 <__adddf3>
1a0046d2:	bf00      	nop

1a0046d4 <__aeabi_dsub>:
1a0046d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a0046d8 <__adddf3>:
1a0046d8:	b530      	push	{r4, r5, lr}
1a0046da:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a0046de:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a0046e2:	ea94 0f05 	teq	r4, r5
1a0046e6:	bf08      	it	eq
1a0046e8:	ea90 0f02 	teqeq	r0, r2
1a0046ec:	bf1f      	itttt	ne
1a0046ee:	ea54 0c00 	orrsne.w	ip, r4, r0
1a0046f2:	ea55 0c02 	orrsne.w	ip, r5, r2
1a0046f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a0046fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0046fe:	f000 80e2 	beq.w	1a0048c6 <__adddf3+0x1ee>
1a004702:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a004706:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00470a:	bfb8      	it	lt
1a00470c:	426d      	neglt	r5, r5
1a00470e:	dd0c      	ble.n	1a00472a <__adddf3+0x52>
1a004710:	442c      	add	r4, r5
1a004712:	ea80 0202 	eor.w	r2, r0, r2
1a004716:	ea81 0303 	eor.w	r3, r1, r3
1a00471a:	ea82 0000 	eor.w	r0, r2, r0
1a00471e:	ea83 0101 	eor.w	r1, r3, r1
1a004722:	ea80 0202 	eor.w	r2, r0, r2
1a004726:	ea81 0303 	eor.w	r3, r1, r3
1a00472a:	2d36      	cmp	r5, #54	; 0x36
1a00472c:	bf88      	it	hi
1a00472e:	bd30      	pophi	{r4, r5, pc}
1a004730:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a004734:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a004738:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a00473c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a004740:	d002      	beq.n	1a004748 <__adddf3+0x70>
1a004742:	4240      	negs	r0, r0
1a004744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004748:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a00474c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a004750:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a004754:	d002      	beq.n	1a00475c <__adddf3+0x84>
1a004756:	4252      	negs	r2, r2
1a004758:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00475c:	ea94 0f05 	teq	r4, r5
1a004760:	f000 80a7 	beq.w	1a0048b2 <__adddf3+0x1da>
1a004764:	f1a4 0401 	sub.w	r4, r4, #1
1a004768:	f1d5 0e20 	rsbs	lr, r5, #32
1a00476c:	db0d      	blt.n	1a00478a <__adddf3+0xb2>
1a00476e:	fa02 fc0e 	lsl.w	ip, r2, lr
1a004772:	fa22 f205 	lsr.w	r2, r2, r5
1a004776:	1880      	adds	r0, r0, r2
1a004778:	f141 0100 	adc.w	r1, r1, #0
1a00477c:	fa03 f20e 	lsl.w	r2, r3, lr
1a004780:	1880      	adds	r0, r0, r2
1a004782:	fa43 f305 	asr.w	r3, r3, r5
1a004786:	4159      	adcs	r1, r3
1a004788:	e00e      	b.n	1a0047a8 <__adddf3+0xd0>
1a00478a:	f1a5 0520 	sub.w	r5, r5, #32
1a00478e:	f10e 0e20 	add.w	lr, lr, #32
1a004792:	2a01      	cmp	r2, #1
1a004794:	fa03 fc0e 	lsl.w	ip, r3, lr
1a004798:	bf28      	it	cs
1a00479a:	f04c 0c02 	orrcs.w	ip, ip, #2
1a00479e:	fa43 f305 	asr.w	r3, r3, r5
1a0047a2:	18c0      	adds	r0, r0, r3
1a0047a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0047a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0047ac:	d507      	bpl.n	1a0047be <__adddf3+0xe6>
1a0047ae:	f04f 0e00 	mov.w	lr, #0
1a0047b2:	f1dc 0c00 	rsbs	ip, ip, #0
1a0047b6:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0047ba:	eb6e 0101 	sbc.w	r1, lr, r1
1a0047be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0047c2:	d31b      	bcc.n	1a0047fc <__adddf3+0x124>
1a0047c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0047c8:	d30c      	bcc.n	1a0047e4 <__adddf3+0x10c>
1a0047ca:	0849      	lsrs	r1, r1, #1
1a0047cc:	ea5f 0030 	movs.w	r0, r0, rrx
1a0047d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a0047d4:	f104 0401 	add.w	r4, r4, #1
1a0047d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a0047dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a0047e0:	f080 809a 	bcs.w	1a004918 <__adddf3+0x240>
1a0047e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a0047e8:	bf08      	it	eq
1a0047ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0047ee:	f150 0000 	adcs.w	r0, r0, #0
1a0047f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0047f6:	ea41 0105 	orr.w	r1, r1, r5
1a0047fa:	bd30      	pop	{r4, r5, pc}
1a0047fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a004800:	4140      	adcs	r0, r0
1a004802:	eb41 0101 	adc.w	r1, r1, r1
1a004806:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00480a:	f1a4 0401 	sub.w	r4, r4, #1
1a00480e:	d1e9      	bne.n	1a0047e4 <__adddf3+0x10c>
1a004810:	f091 0f00 	teq	r1, #0
1a004814:	bf04      	itt	eq
1a004816:	4601      	moveq	r1, r0
1a004818:	2000      	moveq	r0, #0
1a00481a:	fab1 f381 	clz	r3, r1
1a00481e:	bf08      	it	eq
1a004820:	3320      	addeq	r3, #32
1a004822:	f1a3 030b 	sub.w	r3, r3, #11
1a004826:	f1b3 0220 	subs.w	r2, r3, #32
1a00482a:	da0c      	bge.n	1a004846 <__adddf3+0x16e>
1a00482c:	320c      	adds	r2, #12
1a00482e:	dd08      	ble.n	1a004842 <__adddf3+0x16a>
1a004830:	f102 0c14 	add.w	ip, r2, #20
1a004834:	f1c2 020c 	rsb	r2, r2, #12
1a004838:	fa01 f00c 	lsl.w	r0, r1, ip
1a00483c:	fa21 f102 	lsr.w	r1, r1, r2
1a004840:	e00c      	b.n	1a00485c <__adddf3+0x184>
1a004842:	f102 0214 	add.w	r2, r2, #20
1a004846:	bfd8      	it	le
1a004848:	f1c2 0c20 	rsble	ip, r2, #32
1a00484c:	fa01 f102 	lsl.w	r1, r1, r2
1a004850:	fa20 fc0c 	lsr.w	ip, r0, ip
1a004854:	bfdc      	itt	le
1a004856:	ea41 010c 	orrle.w	r1, r1, ip
1a00485a:	4090      	lslle	r0, r2
1a00485c:	1ae4      	subs	r4, r4, r3
1a00485e:	bfa2      	ittt	ge
1a004860:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a004864:	4329      	orrge	r1, r5
1a004866:	bd30      	popge	{r4, r5, pc}
1a004868:	ea6f 0404 	mvn.w	r4, r4
1a00486c:	3c1f      	subs	r4, #31
1a00486e:	da1c      	bge.n	1a0048aa <__adddf3+0x1d2>
1a004870:	340c      	adds	r4, #12
1a004872:	dc0e      	bgt.n	1a004892 <__adddf3+0x1ba>
1a004874:	f104 0414 	add.w	r4, r4, #20
1a004878:	f1c4 0220 	rsb	r2, r4, #32
1a00487c:	fa20 f004 	lsr.w	r0, r0, r4
1a004880:	fa01 f302 	lsl.w	r3, r1, r2
1a004884:	ea40 0003 	orr.w	r0, r0, r3
1a004888:	fa21 f304 	lsr.w	r3, r1, r4
1a00488c:	ea45 0103 	orr.w	r1, r5, r3
1a004890:	bd30      	pop	{r4, r5, pc}
1a004892:	f1c4 040c 	rsb	r4, r4, #12
1a004896:	f1c4 0220 	rsb	r2, r4, #32
1a00489a:	fa20 f002 	lsr.w	r0, r0, r2
1a00489e:	fa01 f304 	lsl.w	r3, r1, r4
1a0048a2:	ea40 0003 	orr.w	r0, r0, r3
1a0048a6:	4629      	mov	r1, r5
1a0048a8:	bd30      	pop	{r4, r5, pc}
1a0048aa:	fa21 f004 	lsr.w	r0, r1, r4
1a0048ae:	4629      	mov	r1, r5
1a0048b0:	bd30      	pop	{r4, r5, pc}
1a0048b2:	f094 0f00 	teq	r4, #0
1a0048b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0048ba:	bf06      	itte	eq
1a0048bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0048c0:	3401      	addeq	r4, #1
1a0048c2:	3d01      	subne	r5, #1
1a0048c4:	e74e      	b.n	1a004764 <__adddf3+0x8c>
1a0048c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0048ca:	bf18      	it	ne
1a0048cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0048d0:	d029      	beq.n	1a004926 <__adddf3+0x24e>
1a0048d2:	ea94 0f05 	teq	r4, r5
1a0048d6:	bf08      	it	eq
1a0048d8:	ea90 0f02 	teqeq	r0, r2
1a0048dc:	d005      	beq.n	1a0048ea <__adddf3+0x212>
1a0048de:	ea54 0c00 	orrs.w	ip, r4, r0
1a0048e2:	bf04      	itt	eq
1a0048e4:	4619      	moveq	r1, r3
1a0048e6:	4610      	moveq	r0, r2
1a0048e8:	bd30      	pop	{r4, r5, pc}
1a0048ea:	ea91 0f03 	teq	r1, r3
1a0048ee:	bf1e      	ittt	ne
1a0048f0:	2100      	movne	r1, #0
1a0048f2:	2000      	movne	r0, #0
1a0048f4:	bd30      	popne	{r4, r5, pc}
1a0048f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a0048fa:	d105      	bne.n	1a004908 <__adddf3+0x230>
1a0048fc:	0040      	lsls	r0, r0, #1
1a0048fe:	4149      	adcs	r1, r1
1a004900:	bf28      	it	cs
1a004902:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a004906:	bd30      	pop	{r4, r5, pc}
1a004908:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a00490c:	bf3c      	itt	cc
1a00490e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a004912:	bd30      	popcc	{r4, r5, pc}
1a004914:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004918:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a00491c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004920:	f04f 0000 	mov.w	r0, #0
1a004924:	bd30      	pop	{r4, r5, pc}
1a004926:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00492a:	bf1a      	itte	ne
1a00492c:	4619      	movne	r1, r3
1a00492e:	4610      	movne	r0, r2
1a004930:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a004934:	bf1c      	itt	ne
1a004936:	460b      	movne	r3, r1
1a004938:	4602      	movne	r2, r0
1a00493a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00493e:	bf06      	itte	eq
1a004940:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a004944:	ea91 0f03 	teqeq	r1, r3
1a004948:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a00494c:	bd30      	pop	{r4, r5, pc}
1a00494e:	bf00      	nop

1a004950 <__aeabi_ui2d>:
1a004950:	f090 0f00 	teq	r0, #0
1a004954:	bf04      	itt	eq
1a004956:	2100      	moveq	r1, #0
1a004958:	4770      	bxeq	lr
1a00495a:	b530      	push	{r4, r5, lr}
1a00495c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004960:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004964:	f04f 0500 	mov.w	r5, #0
1a004968:	f04f 0100 	mov.w	r1, #0
1a00496c:	e750      	b.n	1a004810 <__adddf3+0x138>
1a00496e:	bf00      	nop

1a004970 <__aeabi_i2d>:
1a004970:	f090 0f00 	teq	r0, #0
1a004974:	bf04      	itt	eq
1a004976:	2100      	moveq	r1, #0
1a004978:	4770      	bxeq	lr
1a00497a:	b530      	push	{r4, r5, lr}
1a00497c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004980:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004984:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a004988:	bf48      	it	mi
1a00498a:	4240      	negmi	r0, r0
1a00498c:	f04f 0100 	mov.w	r1, #0
1a004990:	e73e      	b.n	1a004810 <__adddf3+0x138>
1a004992:	bf00      	nop

1a004994 <__aeabi_f2d>:
1a004994:	0042      	lsls	r2, r0, #1
1a004996:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a00499a:	ea4f 0131 	mov.w	r1, r1, rrx
1a00499e:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0049a2:	bf1f      	itttt	ne
1a0049a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0049a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0049ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0049b0:	4770      	bxne	lr
1a0049b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0049b6:	bf08      	it	eq
1a0049b8:	4770      	bxeq	lr
1a0049ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0049be:	bf04      	itt	eq
1a0049c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0049c4:	4770      	bxeq	lr
1a0049c6:	b530      	push	{r4, r5, lr}
1a0049c8:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0049cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0049d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0049d4:	e71c      	b.n	1a004810 <__adddf3+0x138>
1a0049d6:	bf00      	nop

1a0049d8 <__aeabi_ul2d>:
1a0049d8:	ea50 0201 	orrs.w	r2, r0, r1
1a0049dc:	bf08      	it	eq
1a0049de:	4770      	bxeq	lr
1a0049e0:	b530      	push	{r4, r5, lr}
1a0049e2:	f04f 0500 	mov.w	r5, #0
1a0049e6:	e00a      	b.n	1a0049fe <__aeabi_l2d+0x16>

1a0049e8 <__aeabi_l2d>:
1a0049e8:	ea50 0201 	orrs.w	r2, r0, r1
1a0049ec:	bf08      	it	eq
1a0049ee:	4770      	bxeq	lr
1a0049f0:	b530      	push	{r4, r5, lr}
1a0049f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a0049f6:	d502      	bpl.n	1a0049fe <__aeabi_l2d+0x16>
1a0049f8:	4240      	negs	r0, r0
1a0049fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0049fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004a02:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004a06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a004a0a:	f43f aed8 	beq.w	1a0047be <__adddf3+0xe6>
1a004a0e:	f04f 0203 	mov.w	r2, #3
1a004a12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004a16:	bf18      	it	ne
1a004a18:	3203      	addne	r2, #3
1a004a1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004a1e:	bf18      	it	ne
1a004a20:	3203      	addne	r2, #3
1a004a22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a004a26:	f1c2 0320 	rsb	r3, r2, #32
1a004a2a:	fa00 fc03 	lsl.w	ip, r0, r3
1a004a2e:	fa20 f002 	lsr.w	r0, r0, r2
1a004a32:	fa01 fe03 	lsl.w	lr, r1, r3
1a004a36:	ea40 000e 	orr.w	r0, r0, lr
1a004a3a:	fa21 f102 	lsr.w	r1, r1, r2
1a004a3e:	4414      	add	r4, r2
1a004a40:	e6bd      	b.n	1a0047be <__adddf3+0xe6>
1a004a42:	bf00      	nop

1a004a44 <__aeabi_dmul>:
1a004a44:	b570      	push	{r4, r5, r6, lr}
1a004a46:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a004a4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004a4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004a52:	bf1d      	ittte	ne
1a004a54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a004a58:	ea94 0f0c 	teqne	r4, ip
1a004a5c:	ea95 0f0c 	teqne	r5, ip
1a004a60:	f000 f8de 	bleq	1a004c20 <__aeabi_dmul+0x1dc>
1a004a64:	442c      	add	r4, r5
1a004a66:	ea81 0603 	eor.w	r6, r1, r3
1a004a6a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a004a6e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a004a72:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a004a76:	bf18      	it	ne
1a004a78:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a004a7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004a80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a004a84:	d038      	beq.n	1a004af8 <__aeabi_dmul+0xb4>
1a004a86:	fba0 ce02 	umull	ip, lr, r0, r2
1a004a8a:	f04f 0500 	mov.w	r5, #0
1a004a8e:	fbe1 e502 	umlal	lr, r5, r1, r2
1a004a92:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a004a96:	fbe0 e503 	umlal	lr, r5, r0, r3
1a004a9a:	f04f 0600 	mov.w	r6, #0
1a004a9e:	fbe1 5603 	umlal	r5, r6, r1, r3
1a004aa2:	f09c 0f00 	teq	ip, #0
1a004aa6:	bf18      	it	ne
1a004aa8:	f04e 0e01 	orrne.w	lr, lr, #1
1a004aac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a004ab0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a004ab4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a004ab8:	d204      	bcs.n	1a004ac4 <__aeabi_dmul+0x80>
1a004aba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a004abe:	416d      	adcs	r5, r5
1a004ac0:	eb46 0606 	adc.w	r6, r6, r6
1a004ac4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a004ac8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a004acc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a004ad0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a004ad4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a004ad8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004adc:	bf88      	it	hi
1a004ade:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004ae2:	d81e      	bhi.n	1a004b22 <__aeabi_dmul+0xde>
1a004ae4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a004ae8:	bf08      	it	eq
1a004aea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a004aee:	f150 0000 	adcs.w	r0, r0, #0
1a004af2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004af6:	bd70      	pop	{r4, r5, r6, pc}
1a004af8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a004afc:	ea46 0101 	orr.w	r1, r6, r1
1a004b00:	ea40 0002 	orr.w	r0, r0, r2
1a004b04:	ea81 0103 	eor.w	r1, r1, r3
1a004b08:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a004b0c:	bfc2      	ittt	gt
1a004b0e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004b12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004b16:	bd70      	popgt	{r4, r5, r6, pc}
1a004b18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004b1c:	f04f 0e00 	mov.w	lr, #0
1a004b20:	3c01      	subs	r4, #1
1a004b22:	f300 80ab 	bgt.w	1a004c7c <__aeabi_dmul+0x238>
1a004b26:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a004b2a:	bfde      	ittt	le
1a004b2c:	2000      	movle	r0, #0
1a004b2e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a004b32:	bd70      	pople	{r4, r5, r6, pc}
1a004b34:	f1c4 0400 	rsb	r4, r4, #0
1a004b38:	3c20      	subs	r4, #32
1a004b3a:	da35      	bge.n	1a004ba8 <__aeabi_dmul+0x164>
1a004b3c:	340c      	adds	r4, #12
1a004b3e:	dc1b      	bgt.n	1a004b78 <__aeabi_dmul+0x134>
1a004b40:	f104 0414 	add.w	r4, r4, #20
1a004b44:	f1c4 0520 	rsb	r5, r4, #32
1a004b48:	fa00 f305 	lsl.w	r3, r0, r5
1a004b4c:	fa20 f004 	lsr.w	r0, r0, r4
1a004b50:	fa01 f205 	lsl.w	r2, r1, r5
1a004b54:	ea40 0002 	orr.w	r0, r0, r2
1a004b58:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a004b5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004b60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004b64:	fa21 f604 	lsr.w	r6, r1, r4
1a004b68:	eb42 0106 	adc.w	r1, r2, r6
1a004b6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004b70:	bf08      	it	eq
1a004b72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004b76:	bd70      	pop	{r4, r5, r6, pc}
1a004b78:	f1c4 040c 	rsb	r4, r4, #12
1a004b7c:	f1c4 0520 	rsb	r5, r4, #32
1a004b80:	fa00 f304 	lsl.w	r3, r0, r4
1a004b84:	fa20 f005 	lsr.w	r0, r0, r5
1a004b88:	fa01 f204 	lsl.w	r2, r1, r4
1a004b8c:	ea40 0002 	orr.w	r0, r0, r2
1a004b90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004b94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004b98:	f141 0100 	adc.w	r1, r1, #0
1a004b9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004ba0:	bf08      	it	eq
1a004ba2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004ba6:	bd70      	pop	{r4, r5, r6, pc}
1a004ba8:	f1c4 0520 	rsb	r5, r4, #32
1a004bac:	fa00 f205 	lsl.w	r2, r0, r5
1a004bb0:	ea4e 0e02 	orr.w	lr, lr, r2
1a004bb4:	fa20 f304 	lsr.w	r3, r0, r4
1a004bb8:	fa01 f205 	lsl.w	r2, r1, r5
1a004bbc:	ea43 0302 	orr.w	r3, r3, r2
1a004bc0:	fa21 f004 	lsr.w	r0, r1, r4
1a004bc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004bc8:	fa21 f204 	lsr.w	r2, r1, r4
1a004bcc:	ea20 0002 	bic.w	r0, r0, r2
1a004bd0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a004bd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004bd8:	bf08      	it	eq
1a004bda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004bde:	bd70      	pop	{r4, r5, r6, pc}
1a004be0:	f094 0f00 	teq	r4, #0
1a004be4:	d10f      	bne.n	1a004c06 <__aeabi_dmul+0x1c2>
1a004be6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a004bea:	0040      	lsls	r0, r0, #1
1a004bec:	eb41 0101 	adc.w	r1, r1, r1
1a004bf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004bf4:	bf08      	it	eq
1a004bf6:	3c01      	subeq	r4, #1
1a004bf8:	d0f7      	beq.n	1a004bea <__aeabi_dmul+0x1a6>
1a004bfa:	ea41 0106 	orr.w	r1, r1, r6
1a004bfe:	f095 0f00 	teq	r5, #0
1a004c02:	bf18      	it	ne
1a004c04:	4770      	bxne	lr
1a004c06:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a004c0a:	0052      	lsls	r2, r2, #1
1a004c0c:	eb43 0303 	adc.w	r3, r3, r3
1a004c10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a004c14:	bf08      	it	eq
1a004c16:	3d01      	subeq	r5, #1
1a004c18:	d0f7      	beq.n	1a004c0a <__aeabi_dmul+0x1c6>
1a004c1a:	ea43 0306 	orr.w	r3, r3, r6
1a004c1e:	4770      	bx	lr
1a004c20:	ea94 0f0c 	teq	r4, ip
1a004c24:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a004c28:	bf18      	it	ne
1a004c2a:	ea95 0f0c 	teqne	r5, ip
1a004c2e:	d00c      	beq.n	1a004c4a <__aeabi_dmul+0x206>
1a004c30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004c34:	bf18      	it	ne
1a004c36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004c3a:	d1d1      	bne.n	1a004be0 <__aeabi_dmul+0x19c>
1a004c3c:	ea81 0103 	eor.w	r1, r1, r3
1a004c40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004c44:	f04f 0000 	mov.w	r0, #0
1a004c48:	bd70      	pop	{r4, r5, r6, pc}
1a004c4a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004c4e:	bf06      	itte	eq
1a004c50:	4610      	moveq	r0, r2
1a004c52:	4619      	moveq	r1, r3
1a004c54:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004c58:	d019      	beq.n	1a004c8e <__aeabi_dmul+0x24a>
1a004c5a:	ea94 0f0c 	teq	r4, ip
1a004c5e:	d102      	bne.n	1a004c66 <__aeabi_dmul+0x222>
1a004c60:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a004c64:	d113      	bne.n	1a004c8e <__aeabi_dmul+0x24a>
1a004c66:	ea95 0f0c 	teq	r5, ip
1a004c6a:	d105      	bne.n	1a004c78 <__aeabi_dmul+0x234>
1a004c6c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a004c70:	bf1c      	itt	ne
1a004c72:	4610      	movne	r0, r2
1a004c74:	4619      	movne	r1, r3
1a004c76:	d10a      	bne.n	1a004c8e <__aeabi_dmul+0x24a>
1a004c78:	ea81 0103 	eor.w	r1, r1, r3
1a004c7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004c80:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a004c84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004c88:	f04f 0000 	mov.w	r0, #0
1a004c8c:	bd70      	pop	{r4, r5, r6, pc}
1a004c8e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a004c92:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a004c96:	bd70      	pop	{r4, r5, r6, pc}

1a004c98 <__aeabi_ddiv>:
1a004c98:	b570      	push	{r4, r5, r6, lr}
1a004c9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a004c9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004ca2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004ca6:	bf1d      	ittte	ne
1a004ca8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a004cac:	ea94 0f0c 	teqne	r4, ip
1a004cb0:	ea95 0f0c 	teqne	r5, ip
1a004cb4:	f000 f8a7 	bleq	1a004e06 <__aeabi_ddiv+0x16e>
1a004cb8:	eba4 0405 	sub.w	r4, r4, r5
1a004cbc:	ea81 0e03 	eor.w	lr, r1, r3
1a004cc0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a004cc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a004cc8:	f000 8088 	beq.w	1a004ddc <__aeabi_ddiv+0x144>
1a004ccc:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a004cd0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a004cd4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a004cd8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a004cdc:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a004ce0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a004ce4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a004ce8:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a004cec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a004cf0:	429d      	cmp	r5, r3
1a004cf2:	bf08      	it	eq
1a004cf4:	4296      	cmpeq	r6, r2
1a004cf6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a004cfa:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a004cfe:	d202      	bcs.n	1a004d06 <__aeabi_ddiv+0x6e>
1a004d00:	085b      	lsrs	r3, r3, #1
1a004d02:	ea4f 0232 	mov.w	r2, r2, rrx
1a004d06:	1ab6      	subs	r6, r6, r2
1a004d08:	eb65 0503 	sbc.w	r5, r5, r3
1a004d0c:	085b      	lsrs	r3, r3, #1
1a004d0e:	ea4f 0232 	mov.w	r2, r2, rrx
1a004d12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a004d16:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a004d1a:	ebb6 0e02 	subs.w	lr, r6, r2
1a004d1e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004d22:	bf22      	ittt	cs
1a004d24:	1ab6      	subcs	r6, r6, r2
1a004d26:	4675      	movcs	r5, lr
1a004d28:	ea40 000c 	orrcs.w	r0, r0, ip
1a004d2c:	085b      	lsrs	r3, r3, #1
1a004d2e:	ea4f 0232 	mov.w	r2, r2, rrx
1a004d32:	ebb6 0e02 	subs.w	lr, r6, r2
1a004d36:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004d3a:	bf22      	ittt	cs
1a004d3c:	1ab6      	subcs	r6, r6, r2
1a004d3e:	4675      	movcs	r5, lr
1a004d40:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a004d44:	085b      	lsrs	r3, r3, #1
1a004d46:	ea4f 0232 	mov.w	r2, r2, rrx
1a004d4a:	ebb6 0e02 	subs.w	lr, r6, r2
1a004d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004d52:	bf22      	ittt	cs
1a004d54:	1ab6      	subcs	r6, r6, r2
1a004d56:	4675      	movcs	r5, lr
1a004d58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a004d5c:	085b      	lsrs	r3, r3, #1
1a004d5e:	ea4f 0232 	mov.w	r2, r2, rrx
1a004d62:	ebb6 0e02 	subs.w	lr, r6, r2
1a004d66:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004d6a:	bf22      	ittt	cs
1a004d6c:	1ab6      	subcs	r6, r6, r2
1a004d6e:	4675      	movcs	r5, lr
1a004d70:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a004d74:	ea55 0e06 	orrs.w	lr, r5, r6
1a004d78:	d018      	beq.n	1a004dac <__aeabi_ddiv+0x114>
1a004d7a:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a004d7e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a004d82:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a004d86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a004d8a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a004d8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a004d92:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a004d96:	d1c0      	bne.n	1a004d1a <__aeabi_ddiv+0x82>
1a004d98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004d9c:	d10b      	bne.n	1a004db6 <__aeabi_ddiv+0x11e>
1a004d9e:	ea41 0100 	orr.w	r1, r1, r0
1a004da2:	f04f 0000 	mov.w	r0, #0
1a004da6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a004daa:	e7b6      	b.n	1a004d1a <__aeabi_ddiv+0x82>
1a004dac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004db0:	bf04      	itt	eq
1a004db2:	4301      	orreq	r1, r0
1a004db4:	2000      	moveq	r0, #0
1a004db6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004dba:	bf88      	it	hi
1a004dbc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004dc0:	f63f aeaf 	bhi.w	1a004b22 <__aeabi_dmul+0xde>
1a004dc4:	ebb5 0c03 	subs.w	ip, r5, r3
1a004dc8:	bf04      	itt	eq
1a004dca:	ebb6 0c02 	subseq.w	ip, r6, r2
1a004dce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a004dd2:	f150 0000 	adcs.w	r0, r0, #0
1a004dd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004dda:	bd70      	pop	{r4, r5, r6, pc}
1a004ddc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a004de0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a004de4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a004de8:	bfc2      	ittt	gt
1a004dea:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004dee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004df2:	bd70      	popgt	{r4, r5, r6, pc}
1a004df4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004df8:	f04f 0e00 	mov.w	lr, #0
1a004dfc:	3c01      	subs	r4, #1
1a004dfe:	e690      	b.n	1a004b22 <__aeabi_dmul+0xde>
1a004e00:	ea45 0e06 	orr.w	lr, r5, r6
1a004e04:	e68d      	b.n	1a004b22 <__aeabi_dmul+0xde>
1a004e06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a004e0a:	ea94 0f0c 	teq	r4, ip
1a004e0e:	bf08      	it	eq
1a004e10:	ea95 0f0c 	teqeq	r5, ip
1a004e14:	f43f af3b 	beq.w	1a004c8e <__aeabi_dmul+0x24a>
1a004e18:	ea94 0f0c 	teq	r4, ip
1a004e1c:	d10a      	bne.n	1a004e34 <__aeabi_ddiv+0x19c>
1a004e1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004e22:	f47f af34 	bne.w	1a004c8e <__aeabi_dmul+0x24a>
1a004e26:	ea95 0f0c 	teq	r5, ip
1a004e2a:	f47f af25 	bne.w	1a004c78 <__aeabi_dmul+0x234>
1a004e2e:	4610      	mov	r0, r2
1a004e30:	4619      	mov	r1, r3
1a004e32:	e72c      	b.n	1a004c8e <__aeabi_dmul+0x24a>
1a004e34:	ea95 0f0c 	teq	r5, ip
1a004e38:	d106      	bne.n	1a004e48 <__aeabi_ddiv+0x1b0>
1a004e3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a004e3e:	f43f aefd 	beq.w	1a004c3c <__aeabi_dmul+0x1f8>
1a004e42:	4610      	mov	r0, r2
1a004e44:	4619      	mov	r1, r3
1a004e46:	e722      	b.n	1a004c8e <__aeabi_dmul+0x24a>
1a004e48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004e4c:	bf18      	it	ne
1a004e4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004e52:	f47f aec5 	bne.w	1a004be0 <__aeabi_dmul+0x19c>
1a004e56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a004e5a:	f47f af0d 	bne.w	1a004c78 <__aeabi_dmul+0x234>
1a004e5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a004e62:	f47f aeeb 	bne.w	1a004c3c <__aeabi_dmul+0x1f8>
1a004e66:	e712      	b.n	1a004c8e <__aeabi_dmul+0x24a>

1a004e68 <__gedf2>:
1a004e68:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a004e6c:	e006      	b.n	1a004e7c <__cmpdf2+0x4>
1a004e6e:	bf00      	nop

1a004e70 <__ledf2>:
1a004e70:	f04f 0c01 	mov.w	ip, #1
1a004e74:	e002      	b.n	1a004e7c <__cmpdf2+0x4>
1a004e76:	bf00      	nop

1a004e78 <__cmpdf2>:
1a004e78:	f04f 0c01 	mov.w	ip, #1
1a004e7c:	f84d cd04 	str.w	ip, [sp, #-4]!
1a004e80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a004e84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a004e88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a004e8c:	bf18      	it	ne
1a004e8e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a004e92:	d01b      	beq.n	1a004ecc <__cmpdf2+0x54>
1a004e94:	b001      	add	sp, #4
1a004e96:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a004e9a:	bf0c      	ite	eq
1a004e9c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a004ea0:	ea91 0f03 	teqne	r1, r3
1a004ea4:	bf02      	ittt	eq
1a004ea6:	ea90 0f02 	teqeq	r0, r2
1a004eaa:	2000      	moveq	r0, #0
1a004eac:	4770      	bxeq	lr
1a004eae:	f110 0f00 	cmn.w	r0, #0
1a004eb2:	ea91 0f03 	teq	r1, r3
1a004eb6:	bf58      	it	pl
1a004eb8:	4299      	cmppl	r1, r3
1a004eba:	bf08      	it	eq
1a004ebc:	4290      	cmpeq	r0, r2
1a004ebe:	bf2c      	ite	cs
1a004ec0:	17d8      	asrcs	r0, r3, #31
1a004ec2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a004ec6:	f040 0001 	orr.w	r0, r0, #1
1a004eca:	4770      	bx	lr
1a004ecc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a004ed0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a004ed4:	d102      	bne.n	1a004edc <__cmpdf2+0x64>
1a004ed6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a004eda:	d107      	bne.n	1a004eec <__cmpdf2+0x74>
1a004edc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a004ee0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a004ee4:	d1d6      	bne.n	1a004e94 <__cmpdf2+0x1c>
1a004ee6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a004eea:	d0d3      	beq.n	1a004e94 <__cmpdf2+0x1c>
1a004eec:	f85d 0b04 	ldr.w	r0, [sp], #4
1a004ef0:	4770      	bx	lr
1a004ef2:	bf00      	nop

1a004ef4 <__aeabi_cdrcmple>:
1a004ef4:	4684      	mov	ip, r0
1a004ef6:	4610      	mov	r0, r2
1a004ef8:	4662      	mov	r2, ip
1a004efa:	468c      	mov	ip, r1
1a004efc:	4619      	mov	r1, r3
1a004efe:	4663      	mov	r3, ip
1a004f00:	e000      	b.n	1a004f04 <__aeabi_cdcmpeq>
1a004f02:	bf00      	nop

1a004f04 <__aeabi_cdcmpeq>:
1a004f04:	b501      	push	{r0, lr}
1a004f06:	f7ff ffb7 	bl	1a004e78 <__cmpdf2>
1a004f0a:	2800      	cmp	r0, #0
1a004f0c:	bf48      	it	mi
1a004f0e:	f110 0f00 	cmnmi.w	r0, #0
1a004f12:	bd01      	pop	{r0, pc}

1a004f14 <__aeabi_dcmpeq>:
1a004f14:	f84d ed08 	str.w	lr, [sp, #-8]!
1a004f18:	f7ff fff4 	bl	1a004f04 <__aeabi_cdcmpeq>
1a004f1c:	bf0c      	ite	eq
1a004f1e:	2001      	moveq	r0, #1
1a004f20:	2000      	movne	r0, #0
1a004f22:	f85d fb08 	ldr.w	pc, [sp], #8
1a004f26:	bf00      	nop

1a004f28 <__aeabi_dcmplt>:
1a004f28:	f84d ed08 	str.w	lr, [sp, #-8]!
1a004f2c:	f7ff ffea 	bl	1a004f04 <__aeabi_cdcmpeq>
1a004f30:	bf34      	ite	cc
1a004f32:	2001      	movcc	r0, #1
1a004f34:	2000      	movcs	r0, #0
1a004f36:	f85d fb08 	ldr.w	pc, [sp], #8
1a004f3a:	bf00      	nop

1a004f3c <__aeabi_dcmple>:
1a004f3c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a004f40:	f7ff ffe0 	bl	1a004f04 <__aeabi_cdcmpeq>
1a004f44:	bf94      	ite	ls
1a004f46:	2001      	movls	r0, #1
1a004f48:	2000      	movhi	r0, #0
1a004f4a:	f85d fb08 	ldr.w	pc, [sp], #8
1a004f4e:	bf00      	nop

1a004f50 <__aeabi_dcmpge>:
1a004f50:	f84d ed08 	str.w	lr, [sp, #-8]!
1a004f54:	f7ff ffce 	bl	1a004ef4 <__aeabi_cdrcmple>
1a004f58:	bf94      	ite	ls
1a004f5a:	2001      	movls	r0, #1
1a004f5c:	2000      	movhi	r0, #0
1a004f5e:	f85d fb08 	ldr.w	pc, [sp], #8
1a004f62:	bf00      	nop

1a004f64 <__aeabi_dcmpgt>:
1a004f64:	f84d ed08 	str.w	lr, [sp, #-8]!
1a004f68:	f7ff ffc4 	bl	1a004ef4 <__aeabi_cdrcmple>
1a004f6c:	bf34      	ite	cc
1a004f6e:	2001      	movcc	r0, #1
1a004f70:	2000      	movcs	r0, #0
1a004f72:	f85d fb08 	ldr.w	pc, [sp], #8
1a004f76:	bf00      	nop

1a004f78 <__aeabi_d2iz>:
1a004f78:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a004f7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a004f80:	d215      	bcs.n	1a004fae <__aeabi_d2iz+0x36>
1a004f82:	d511      	bpl.n	1a004fa8 <__aeabi_d2iz+0x30>
1a004f84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a004f88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a004f8c:	d912      	bls.n	1a004fb4 <__aeabi_d2iz+0x3c>
1a004f8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a004f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a004f96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a004f9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a004f9e:	fa23 f002 	lsr.w	r0, r3, r2
1a004fa2:	bf18      	it	ne
1a004fa4:	4240      	negne	r0, r0
1a004fa6:	4770      	bx	lr
1a004fa8:	f04f 0000 	mov.w	r0, #0
1a004fac:	4770      	bx	lr
1a004fae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a004fb2:	d105      	bne.n	1a004fc0 <__aeabi_d2iz+0x48>
1a004fb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a004fb8:	bf08      	it	eq
1a004fba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a004fbe:	4770      	bx	lr
1a004fc0:	f04f 0000 	mov.w	r0, #0
1a004fc4:	4770      	bx	lr
1a004fc6:	bf00      	nop

1a004fc8 <__aeabi_uldivmod>:
1a004fc8:	b953      	cbnz	r3, 1a004fe0 <__aeabi_uldivmod+0x18>
1a004fca:	b94a      	cbnz	r2, 1a004fe0 <__aeabi_uldivmod+0x18>
1a004fcc:	2900      	cmp	r1, #0
1a004fce:	bf08      	it	eq
1a004fd0:	2800      	cmpeq	r0, #0
1a004fd2:	bf1c      	itt	ne
1a004fd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a004fd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004fdc:	f000 b974 	b.w	1a0052c8 <__aeabi_idiv0>
1a004fe0:	f1ad 0c08 	sub.w	ip, sp, #8
1a004fe4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004fe8:	f000 f806 	bl	1a004ff8 <__udivmoddi4>
1a004fec:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004ff4:	b004      	add	sp, #16
1a004ff6:	4770      	bx	lr

1a004ff8 <__udivmoddi4>:
1a004ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004ffc:	9e08      	ldr	r6, [sp, #32]
1a004ffe:	4604      	mov	r4, r0
1a005000:	4688      	mov	r8, r1
1a005002:	2b00      	cmp	r3, #0
1a005004:	f040 8085 	bne.w	1a005112 <__udivmoddi4+0x11a>
1a005008:	428a      	cmp	r2, r1
1a00500a:	4615      	mov	r5, r2
1a00500c:	d948      	bls.n	1a0050a0 <__udivmoddi4+0xa8>
1a00500e:	fab2 f282 	clz	r2, r2
1a005012:	b14a      	cbz	r2, 1a005028 <__udivmoddi4+0x30>
1a005014:	f1c2 0720 	rsb	r7, r2, #32
1a005018:	fa01 f302 	lsl.w	r3, r1, r2
1a00501c:	fa20 f707 	lsr.w	r7, r0, r7
1a005020:	4095      	lsls	r5, r2
1a005022:	ea47 0803 	orr.w	r8, r7, r3
1a005026:	4094      	lsls	r4, r2
1a005028:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00502c:	0c23      	lsrs	r3, r4, #16
1a00502e:	fbb8 f7fe 	udiv	r7, r8, lr
1a005032:	fa1f fc85 	uxth.w	ip, r5
1a005036:	fb0e 8817 	mls	r8, lr, r7, r8
1a00503a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00503e:	fb07 f10c 	mul.w	r1, r7, ip
1a005042:	4299      	cmp	r1, r3
1a005044:	d909      	bls.n	1a00505a <__udivmoddi4+0x62>
1a005046:	18eb      	adds	r3, r5, r3
1a005048:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00504c:	f080 80e3 	bcs.w	1a005216 <__udivmoddi4+0x21e>
1a005050:	4299      	cmp	r1, r3
1a005052:	f240 80e0 	bls.w	1a005216 <__udivmoddi4+0x21e>
1a005056:	3f02      	subs	r7, #2
1a005058:	442b      	add	r3, r5
1a00505a:	1a5b      	subs	r3, r3, r1
1a00505c:	b2a4      	uxth	r4, r4
1a00505e:	fbb3 f0fe 	udiv	r0, r3, lr
1a005062:	fb0e 3310 	mls	r3, lr, r0, r3
1a005066:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00506a:	fb00 fc0c 	mul.w	ip, r0, ip
1a00506e:	45a4      	cmp	ip, r4
1a005070:	d909      	bls.n	1a005086 <__udivmoddi4+0x8e>
1a005072:	192c      	adds	r4, r5, r4
1a005074:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005078:	f080 80cb 	bcs.w	1a005212 <__udivmoddi4+0x21a>
1a00507c:	45a4      	cmp	ip, r4
1a00507e:	f240 80c8 	bls.w	1a005212 <__udivmoddi4+0x21a>
1a005082:	3802      	subs	r0, #2
1a005084:	442c      	add	r4, r5
1a005086:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00508a:	eba4 040c 	sub.w	r4, r4, ip
1a00508e:	2700      	movs	r7, #0
1a005090:	b11e      	cbz	r6, 1a00509a <__udivmoddi4+0xa2>
1a005092:	40d4      	lsrs	r4, r2
1a005094:	2300      	movs	r3, #0
1a005096:	e9c6 4300 	strd	r4, r3, [r6]
1a00509a:	4639      	mov	r1, r7
1a00509c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0050a0:	2a00      	cmp	r2, #0
1a0050a2:	d053      	beq.n	1a00514c <__udivmoddi4+0x154>
1a0050a4:	fab2 f282 	clz	r2, r2
1a0050a8:	2a00      	cmp	r2, #0
1a0050aa:	f040 80b6 	bne.w	1a00521a <__udivmoddi4+0x222>
1a0050ae:	1b49      	subs	r1, r1, r5
1a0050b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0050b4:	fa1f f885 	uxth.w	r8, r5
1a0050b8:	2701      	movs	r7, #1
1a0050ba:	fbb1 fcfe 	udiv	ip, r1, lr
1a0050be:	0c23      	lsrs	r3, r4, #16
1a0050c0:	fb0e 111c 	mls	r1, lr, ip, r1
1a0050c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0050c8:	fb08 f10c 	mul.w	r1, r8, ip
1a0050cc:	4299      	cmp	r1, r3
1a0050ce:	d907      	bls.n	1a0050e0 <__udivmoddi4+0xe8>
1a0050d0:	18eb      	adds	r3, r5, r3
1a0050d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0050d6:	d202      	bcs.n	1a0050de <__udivmoddi4+0xe6>
1a0050d8:	4299      	cmp	r1, r3
1a0050da:	f200 80ec 	bhi.w	1a0052b6 <__udivmoddi4+0x2be>
1a0050de:	4684      	mov	ip, r0
1a0050e0:	1a59      	subs	r1, r3, r1
1a0050e2:	b2a3      	uxth	r3, r4
1a0050e4:	fbb1 f0fe 	udiv	r0, r1, lr
1a0050e8:	fb0e 1410 	mls	r4, lr, r0, r1
1a0050ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0050f0:	fb08 f800 	mul.w	r8, r8, r0
1a0050f4:	45a0      	cmp	r8, r4
1a0050f6:	d907      	bls.n	1a005108 <__udivmoddi4+0x110>
1a0050f8:	192c      	adds	r4, r5, r4
1a0050fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0050fe:	d202      	bcs.n	1a005106 <__udivmoddi4+0x10e>
1a005100:	45a0      	cmp	r8, r4
1a005102:	f200 80dc 	bhi.w	1a0052be <__udivmoddi4+0x2c6>
1a005106:	4618      	mov	r0, r3
1a005108:	eba4 0408 	sub.w	r4, r4, r8
1a00510c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a005110:	e7be      	b.n	1a005090 <__udivmoddi4+0x98>
1a005112:	428b      	cmp	r3, r1
1a005114:	d908      	bls.n	1a005128 <__udivmoddi4+0x130>
1a005116:	2e00      	cmp	r6, #0
1a005118:	d078      	beq.n	1a00520c <__udivmoddi4+0x214>
1a00511a:	2700      	movs	r7, #0
1a00511c:	e9c6 0100 	strd	r0, r1, [r6]
1a005120:	4638      	mov	r0, r7
1a005122:	4639      	mov	r1, r7
1a005124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005128:	fab3 f783 	clz	r7, r3
1a00512c:	b97f      	cbnz	r7, 1a00514e <__udivmoddi4+0x156>
1a00512e:	428b      	cmp	r3, r1
1a005130:	d302      	bcc.n	1a005138 <__udivmoddi4+0x140>
1a005132:	4282      	cmp	r2, r0
1a005134:	f200 80bd 	bhi.w	1a0052b2 <__udivmoddi4+0x2ba>
1a005138:	1a84      	subs	r4, r0, r2
1a00513a:	eb61 0303 	sbc.w	r3, r1, r3
1a00513e:	2001      	movs	r0, #1
1a005140:	4698      	mov	r8, r3
1a005142:	2e00      	cmp	r6, #0
1a005144:	d0a9      	beq.n	1a00509a <__udivmoddi4+0xa2>
1a005146:	e9c6 4800 	strd	r4, r8, [r6]
1a00514a:	e7a6      	b.n	1a00509a <__udivmoddi4+0xa2>
1a00514c:	deff      	udf	#255	; 0xff
1a00514e:	f1c7 0520 	rsb	r5, r7, #32
1a005152:	40bb      	lsls	r3, r7
1a005154:	fa22 fc05 	lsr.w	ip, r2, r5
1a005158:	ea4c 0c03 	orr.w	ip, ip, r3
1a00515c:	fa01 f407 	lsl.w	r4, r1, r7
1a005160:	fa20 f805 	lsr.w	r8, r0, r5
1a005164:	fa21 f305 	lsr.w	r3, r1, r5
1a005168:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a00516c:	ea48 0404 	orr.w	r4, r8, r4
1a005170:	fbb3 f9fe 	udiv	r9, r3, lr
1a005174:	0c21      	lsrs	r1, r4, #16
1a005176:	fb0e 3319 	mls	r3, lr, r9, r3
1a00517a:	fa1f f88c 	uxth.w	r8, ip
1a00517e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a005182:	fb09 fa08 	mul.w	sl, r9, r8
1a005186:	459a      	cmp	sl, r3
1a005188:	fa02 f207 	lsl.w	r2, r2, r7
1a00518c:	fa00 f107 	lsl.w	r1, r0, r7
1a005190:	d90b      	bls.n	1a0051aa <__udivmoddi4+0x1b2>
1a005192:	eb1c 0303 	adds.w	r3, ip, r3
1a005196:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00519a:	f080 8088 	bcs.w	1a0052ae <__udivmoddi4+0x2b6>
1a00519e:	459a      	cmp	sl, r3
1a0051a0:	f240 8085 	bls.w	1a0052ae <__udivmoddi4+0x2b6>
1a0051a4:	f1a9 0902 	sub.w	r9, r9, #2
1a0051a8:	4463      	add	r3, ip
1a0051aa:	eba3 030a 	sub.w	r3, r3, sl
1a0051ae:	b2a4      	uxth	r4, r4
1a0051b0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0051b4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0051b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0051bc:	fb00 f808 	mul.w	r8, r0, r8
1a0051c0:	45a0      	cmp	r8, r4
1a0051c2:	d908      	bls.n	1a0051d6 <__udivmoddi4+0x1de>
1a0051c4:	eb1c 0404 	adds.w	r4, ip, r4
1a0051c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0051cc:	d26b      	bcs.n	1a0052a6 <__udivmoddi4+0x2ae>
1a0051ce:	45a0      	cmp	r8, r4
1a0051d0:	d969      	bls.n	1a0052a6 <__udivmoddi4+0x2ae>
1a0051d2:	3802      	subs	r0, #2
1a0051d4:	4464      	add	r4, ip
1a0051d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0051da:	eba4 0408 	sub.w	r4, r4, r8
1a0051de:	fba0 8902 	umull	r8, r9, r0, r2
1a0051e2:	454c      	cmp	r4, r9
1a0051e4:	46c6      	mov	lr, r8
1a0051e6:	464b      	mov	r3, r9
1a0051e8:	d354      	bcc.n	1a005294 <__udivmoddi4+0x29c>
1a0051ea:	d051      	beq.n	1a005290 <__udivmoddi4+0x298>
1a0051ec:	2e00      	cmp	r6, #0
1a0051ee:	d069      	beq.n	1a0052c4 <__udivmoddi4+0x2cc>
1a0051f0:	ebb1 020e 	subs.w	r2, r1, lr
1a0051f4:	eb64 0403 	sbc.w	r4, r4, r3
1a0051f8:	fa04 f505 	lsl.w	r5, r4, r5
1a0051fc:	fa22 f307 	lsr.w	r3, r2, r7
1a005200:	40fc      	lsrs	r4, r7
1a005202:	431d      	orrs	r5, r3
1a005204:	e9c6 5400 	strd	r5, r4, [r6]
1a005208:	2700      	movs	r7, #0
1a00520a:	e746      	b.n	1a00509a <__udivmoddi4+0xa2>
1a00520c:	4637      	mov	r7, r6
1a00520e:	4630      	mov	r0, r6
1a005210:	e743      	b.n	1a00509a <__udivmoddi4+0xa2>
1a005212:	4618      	mov	r0, r3
1a005214:	e737      	b.n	1a005086 <__udivmoddi4+0x8e>
1a005216:	4607      	mov	r7, r0
1a005218:	e71f      	b.n	1a00505a <__udivmoddi4+0x62>
1a00521a:	f1c2 0320 	rsb	r3, r2, #32
1a00521e:	fa20 f703 	lsr.w	r7, r0, r3
1a005222:	4095      	lsls	r5, r2
1a005224:	fa01 f002 	lsl.w	r0, r1, r2
1a005228:	fa21 f303 	lsr.w	r3, r1, r3
1a00522c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005230:	4338      	orrs	r0, r7
1a005232:	0c01      	lsrs	r1, r0, #16
1a005234:	fbb3 f7fe 	udiv	r7, r3, lr
1a005238:	fa1f f885 	uxth.w	r8, r5
1a00523c:	fb0e 3317 	mls	r3, lr, r7, r3
1a005240:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a005244:	fb07 f308 	mul.w	r3, r7, r8
1a005248:	428b      	cmp	r3, r1
1a00524a:	fa04 f402 	lsl.w	r4, r4, r2
1a00524e:	d907      	bls.n	1a005260 <__udivmoddi4+0x268>
1a005250:	1869      	adds	r1, r5, r1
1a005252:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a005256:	d228      	bcs.n	1a0052aa <__udivmoddi4+0x2b2>
1a005258:	428b      	cmp	r3, r1
1a00525a:	d926      	bls.n	1a0052aa <__udivmoddi4+0x2b2>
1a00525c:	3f02      	subs	r7, #2
1a00525e:	4429      	add	r1, r5
1a005260:	1acb      	subs	r3, r1, r3
1a005262:	b281      	uxth	r1, r0
1a005264:	fbb3 f0fe 	udiv	r0, r3, lr
1a005268:	fb0e 3310 	mls	r3, lr, r0, r3
1a00526c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a005270:	fb00 f308 	mul.w	r3, r0, r8
1a005274:	428b      	cmp	r3, r1
1a005276:	d907      	bls.n	1a005288 <__udivmoddi4+0x290>
1a005278:	1869      	adds	r1, r5, r1
1a00527a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00527e:	d210      	bcs.n	1a0052a2 <__udivmoddi4+0x2aa>
1a005280:	428b      	cmp	r3, r1
1a005282:	d90e      	bls.n	1a0052a2 <__udivmoddi4+0x2aa>
1a005284:	3802      	subs	r0, #2
1a005286:	4429      	add	r1, r5
1a005288:	1ac9      	subs	r1, r1, r3
1a00528a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00528e:	e714      	b.n	1a0050ba <__udivmoddi4+0xc2>
1a005290:	4541      	cmp	r1, r8
1a005292:	d2ab      	bcs.n	1a0051ec <__udivmoddi4+0x1f4>
1a005294:	ebb8 0e02 	subs.w	lr, r8, r2
1a005298:	eb69 020c 	sbc.w	r2, r9, ip
1a00529c:	3801      	subs	r0, #1
1a00529e:	4613      	mov	r3, r2
1a0052a0:	e7a4      	b.n	1a0051ec <__udivmoddi4+0x1f4>
1a0052a2:	4660      	mov	r0, ip
1a0052a4:	e7f0      	b.n	1a005288 <__udivmoddi4+0x290>
1a0052a6:	4618      	mov	r0, r3
1a0052a8:	e795      	b.n	1a0051d6 <__udivmoddi4+0x1de>
1a0052aa:	4667      	mov	r7, ip
1a0052ac:	e7d8      	b.n	1a005260 <__udivmoddi4+0x268>
1a0052ae:	4681      	mov	r9, r0
1a0052b0:	e77b      	b.n	1a0051aa <__udivmoddi4+0x1b2>
1a0052b2:	4638      	mov	r0, r7
1a0052b4:	e745      	b.n	1a005142 <__udivmoddi4+0x14a>
1a0052b6:	f1ac 0c02 	sub.w	ip, ip, #2
1a0052ba:	442b      	add	r3, r5
1a0052bc:	e710      	b.n	1a0050e0 <__udivmoddi4+0xe8>
1a0052be:	3802      	subs	r0, #2
1a0052c0:	442c      	add	r4, r5
1a0052c2:	e721      	b.n	1a005108 <__udivmoddi4+0x110>
1a0052c4:	4637      	mov	r7, r6
1a0052c6:	e6e8      	b.n	1a00509a <__udivmoddi4+0xa2>

1a0052c8 <__aeabi_idiv0>:
1a0052c8:	4770      	bx	lr
1a0052ca:	bf00      	nop

1a0052cc <__libc_init_array>:
1a0052cc:	b570      	push	{r4, r5, r6, lr}
1a0052ce:	4d0d      	ldr	r5, [pc, #52]	; (1a005304 <__libc_init_array+0x38>)
1a0052d0:	4c0d      	ldr	r4, [pc, #52]	; (1a005308 <__libc_init_array+0x3c>)
1a0052d2:	1b64      	subs	r4, r4, r5
1a0052d4:	10a4      	asrs	r4, r4, #2
1a0052d6:	2600      	movs	r6, #0
1a0052d8:	42a6      	cmp	r6, r4
1a0052da:	d109      	bne.n	1a0052f0 <__libc_init_array+0x24>
1a0052dc:	4d0b      	ldr	r5, [pc, #44]	; (1a00530c <__libc_init_array+0x40>)
1a0052de:	4c0c      	ldr	r4, [pc, #48]	; (1a005310 <__libc_init_array+0x44>)
1a0052e0:	f7fc fe37 	bl	1a001f52 <_init>
1a0052e4:	1b64      	subs	r4, r4, r5
1a0052e6:	10a4      	asrs	r4, r4, #2
1a0052e8:	2600      	movs	r6, #0
1a0052ea:	42a6      	cmp	r6, r4
1a0052ec:	d105      	bne.n	1a0052fa <__libc_init_array+0x2e>
1a0052ee:	bd70      	pop	{r4, r5, r6, pc}
1a0052f0:	f855 3b04 	ldr.w	r3, [r5], #4
1a0052f4:	4798      	blx	r3
1a0052f6:	3601      	adds	r6, #1
1a0052f8:	e7ee      	b.n	1a0052d8 <__libc_init_array+0xc>
1a0052fa:	f855 3b04 	ldr.w	r3, [r5], #4
1a0052fe:	4798      	blx	r3
1a005300:	3601      	adds	r6, #1
1a005302:	e7f2      	b.n	1a0052ea <__libc_init_array+0x1e>
1a005304:	1a006244 	.word	0x1a006244
1a005308:	1a006244 	.word	0x1a006244
1a00530c:	1a006244 	.word	0x1a006244
1a005310:	1a006248 	.word	0x1a006248

1a005314 <__retarget_lock_acquire_recursive>:
1a005314:	4770      	bx	lr

1a005316 <__retarget_lock_release_recursive>:
1a005316:	4770      	bx	lr

1a005318 <memcpy>:
1a005318:	440a      	add	r2, r1
1a00531a:	4291      	cmp	r1, r2
1a00531c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005320:	d100      	bne.n	1a005324 <memcpy+0xc>
1a005322:	4770      	bx	lr
1a005324:	b510      	push	{r4, lr}
1a005326:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00532a:	f803 4f01 	strb.w	r4, [r3, #1]!
1a00532e:	4291      	cmp	r1, r2
1a005330:	d1f9      	bne.n	1a005326 <memcpy+0xe>
1a005332:	bd10      	pop	{r4, pc}

1a005334 <memset>:
1a005334:	4402      	add	r2, r0
1a005336:	4603      	mov	r3, r0
1a005338:	4293      	cmp	r3, r2
1a00533a:	d100      	bne.n	1a00533e <memset+0xa>
1a00533c:	4770      	bx	lr
1a00533e:	f803 1b01 	strb.w	r1, [r3], #1
1a005342:	e7f9      	b.n	1a005338 <memset+0x4>

1a005344 <_free_r>:
1a005344:	b538      	push	{r3, r4, r5, lr}
1a005346:	4605      	mov	r5, r0
1a005348:	2900      	cmp	r1, #0
1a00534a:	d045      	beq.n	1a0053d8 <_free_r+0x94>
1a00534c:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a005350:	1f0c      	subs	r4, r1, #4
1a005352:	2b00      	cmp	r3, #0
1a005354:	bfb8      	it	lt
1a005356:	18e4      	addlt	r4, r4, r3
1a005358:	f000 facc 	bl	1a0058f4 <__malloc_lock>
1a00535c:	4a1f      	ldr	r2, [pc, #124]	; (1a0053dc <_free_r+0x98>)
1a00535e:	6813      	ldr	r3, [r2, #0]
1a005360:	4610      	mov	r0, r2
1a005362:	b933      	cbnz	r3, 1a005372 <_free_r+0x2e>
1a005364:	6063      	str	r3, [r4, #4]
1a005366:	6014      	str	r4, [r2, #0]
1a005368:	4628      	mov	r0, r5
1a00536a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00536e:	f000 bac7 	b.w	1a005900 <__malloc_unlock>
1a005372:	42a3      	cmp	r3, r4
1a005374:	d90c      	bls.n	1a005390 <_free_r+0x4c>
1a005376:	6821      	ldr	r1, [r4, #0]
1a005378:	1862      	adds	r2, r4, r1
1a00537a:	4293      	cmp	r3, r2
1a00537c:	bf04      	itt	eq
1a00537e:	681a      	ldreq	r2, [r3, #0]
1a005380:	685b      	ldreq	r3, [r3, #4]
1a005382:	6063      	str	r3, [r4, #4]
1a005384:	bf04      	itt	eq
1a005386:	1852      	addeq	r2, r2, r1
1a005388:	6022      	streq	r2, [r4, #0]
1a00538a:	6004      	str	r4, [r0, #0]
1a00538c:	e7ec      	b.n	1a005368 <_free_r+0x24>
1a00538e:	4613      	mov	r3, r2
1a005390:	685a      	ldr	r2, [r3, #4]
1a005392:	b10a      	cbz	r2, 1a005398 <_free_r+0x54>
1a005394:	42a2      	cmp	r2, r4
1a005396:	d9fa      	bls.n	1a00538e <_free_r+0x4a>
1a005398:	6819      	ldr	r1, [r3, #0]
1a00539a:	1858      	adds	r0, r3, r1
1a00539c:	42a0      	cmp	r0, r4
1a00539e:	d10b      	bne.n	1a0053b8 <_free_r+0x74>
1a0053a0:	6820      	ldr	r0, [r4, #0]
1a0053a2:	4401      	add	r1, r0
1a0053a4:	1858      	adds	r0, r3, r1
1a0053a6:	4282      	cmp	r2, r0
1a0053a8:	6019      	str	r1, [r3, #0]
1a0053aa:	d1dd      	bne.n	1a005368 <_free_r+0x24>
1a0053ac:	6810      	ldr	r0, [r2, #0]
1a0053ae:	6852      	ldr	r2, [r2, #4]
1a0053b0:	605a      	str	r2, [r3, #4]
1a0053b2:	4401      	add	r1, r0
1a0053b4:	6019      	str	r1, [r3, #0]
1a0053b6:	e7d7      	b.n	1a005368 <_free_r+0x24>
1a0053b8:	d902      	bls.n	1a0053c0 <_free_r+0x7c>
1a0053ba:	230c      	movs	r3, #12
1a0053bc:	602b      	str	r3, [r5, #0]
1a0053be:	e7d3      	b.n	1a005368 <_free_r+0x24>
1a0053c0:	6820      	ldr	r0, [r4, #0]
1a0053c2:	1821      	adds	r1, r4, r0
1a0053c4:	428a      	cmp	r2, r1
1a0053c6:	bf04      	itt	eq
1a0053c8:	6811      	ldreq	r1, [r2, #0]
1a0053ca:	6852      	ldreq	r2, [r2, #4]
1a0053cc:	6062      	str	r2, [r4, #4]
1a0053ce:	bf04      	itt	eq
1a0053d0:	1809      	addeq	r1, r1, r0
1a0053d2:	6021      	streq	r1, [r4, #0]
1a0053d4:	605c      	str	r4, [r3, #4]
1a0053d6:	e7c7      	b.n	1a005368 <_free_r+0x24>
1a0053d8:	bd38      	pop	{r3, r4, r5, pc}
1a0053da:	bf00      	nop
1a0053dc:	10000cd0 	.word	0x10000cd0

1a0053e0 <_malloc_r>:
1a0053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0053e2:	1ccd      	adds	r5, r1, #3
1a0053e4:	f025 0503 	bic.w	r5, r5, #3
1a0053e8:	3508      	adds	r5, #8
1a0053ea:	2d0c      	cmp	r5, #12
1a0053ec:	bf38      	it	cc
1a0053ee:	250c      	movcc	r5, #12
1a0053f0:	2d00      	cmp	r5, #0
1a0053f2:	4606      	mov	r6, r0
1a0053f4:	db01      	blt.n	1a0053fa <_malloc_r+0x1a>
1a0053f6:	42a9      	cmp	r1, r5
1a0053f8:	d903      	bls.n	1a005402 <_malloc_r+0x22>
1a0053fa:	230c      	movs	r3, #12
1a0053fc:	6033      	str	r3, [r6, #0]
1a0053fe:	2000      	movs	r0, #0
1a005400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005402:	f000 fa77 	bl	1a0058f4 <__malloc_lock>
1a005406:	4921      	ldr	r1, [pc, #132]	; (1a00548c <_malloc_r+0xac>)
1a005408:	680a      	ldr	r2, [r1, #0]
1a00540a:	4614      	mov	r4, r2
1a00540c:	b99c      	cbnz	r4, 1a005436 <_malloc_r+0x56>
1a00540e:	4f20      	ldr	r7, [pc, #128]	; (1a005490 <_malloc_r+0xb0>)
1a005410:	683b      	ldr	r3, [r7, #0]
1a005412:	b923      	cbnz	r3, 1a00541e <_malloc_r+0x3e>
1a005414:	4621      	mov	r1, r4
1a005416:	4630      	mov	r0, r6
1a005418:	f7fc fd9c 	bl	1a001f54 <_sbrk_r>
1a00541c:	6038      	str	r0, [r7, #0]
1a00541e:	4629      	mov	r1, r5
1a005420:	4630      	mov	r0, r6
1a005422:	f7fc fd97 	bl	1a001f54 <_sbrk_r>
1a005426:	1c43      	adds	r3, r0, #1
1a005428:	d123      	bne.n	1a005472 <_malloc_r+0x92>
1a00542a:	230c      	movs	r3, #12
1a00542c:	6033      	str	r3, [r6, #0]
1a00542e:	4630      	mov	r0, r6
1a005430:	f000 fa66 	bl	1a005900 <__malloc_unlock>
1a005434:	e7e3      	b.n	1a0053fe <_malloc_r+0x1e>
1a005436:	6823      	ldr	r3, [r4, #0]
1a005438:	1b5b      	subs	r3, r3, r5
1a00543a:	d417      	bmi.n	1a00546c <_malloc_r+0x8c>
1a00543c:	2b0b      	cmp	r3, #11
1a00543e:	d903      	bls.n	1a005448 <_malloc_r+0x68>
1a005440:	6023      	str	r3, [r4, #0]
1a005442:	441c      	add	r4, r3
1a005444:	6025      	str	r5, [r4, #0]
1a005446:	e004      	b.n	1a005452 <_malloc_r+0x72>
1a005448:	6863      	ldr	r3, [r4, #4]
1a00544a:	42a2      	cmp	r2, r4
1a00544c:	bf0c      	ite	eq
1a00544e:	600b      	streq	r3, [r1, #0]
1a005450:	6053      	strne	r3, [r2, #4]
1a005452:	4630      	mov	r0, r6
1a005454:	f000 fa54 	bl	1a005900 <__malloc_unlock>
1a005458:	f104 000b 	add.w	r0, r4, #11
1a00545c:	1d23      	adds	r3, r4, #4
1a00545e:	f020 0007 	bic.w	r0, r0, #7
1a005462:	1ac2      	subs	r2, r0, r3
1a005464:	d0cc      	beq.n	1a005400 <_malloc_r+0x20>
1a005466:	1a1b      	subs	r3, r3, r0
1a005468:	50a3      	str	r3, [r4, r2]
1a00546a:	e7c9      	b.n	1a005400 <_malloc_r+0x20>
1a00546c:	4622      	mov	r2, r4
1a00546e:	6864      	ldr	r4, [r4, #4]
1a005470:	e7cc      	b.n	1a00540c <_malloc_r+0x2c>
1a005472:	1cc4      	adds	r4, r0, #3
1a005474:	f024 0403 	bic.w	r4, r4, #3
1a005478:	42a0      	cmp	r0, r4
1a00547a:	d0e3      	beq.n	1a005444 <_malloc_r+0x64>
1a00547c:	1a21      	subs	r1, r4, r0
1a00547e:	4630      	mov	r0, r6
1a005480:	f7fc fd68 	bl	1a001f54 <_sbrk_r>
1a005484:	3001      	adds	r0, #1
1a005486:	d1dd      	bne.n	1a005444 <_malloc_r+0x64>
1a005488:	e7cf      	b.n	1a00542a <_malloc_r+0x4a>
1a00548a:	bf00      	nop
1a00548c:	10000cd0 	.word	0x10000cd0
1a005490:	10000cd4 	.word	0x10000cd4

1a005494 <_printf_common>:
1a005494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005498:	4691      	mov	r9, r2
1a00549a:	461f      	mov	r7, r3
1a00549c:	688a      	ldr	r2, [r1, #8]
1a00549e:	690b      	ldr	r3, [r1, #16]
1a0054a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0054a4:	4293      	cmp	r3, r2
1a0054a6:	bfb8      	it	lt
1a0054a8:	4613      	movlt	r3, r2
1a0054aa:	f8c9 3000 	str.w	r3, [r9]
1a0054ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a0054b2:	4606      	mov	r6, r0
1a0054b4:	460c      	mov	r4, r1
1a0054b6:	b112      	cbz	r2, 1a0054be <_printf_common+0x2a>
1a0054b8:	3301      	adds	r3, #1
1a0054ba:	f8c9 3000 	str.w	r3, [r9]
1a0054be:	6823      	ldr	r3, [r4, #0]
1a0054c0:	0699      	lsls	r1, r3, #26
1a0054c2:	bf42      	ittt	mi
1a0054c4:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0054c8:	3302      	addmi	r3, #2
1a0054ca:	f8c9 3000 	strmi.w	r3, [r9]
1a0054ce:	6825      	ldr	r5, [r4, #0]
1a0054d0:	f015 0506 	ands.w	r5, r5, #6
1a0054d4:	d107      	bne.n	1a0054e6 <_printf_common+0x52>
1a0054d6:	f104 0a19 	add.w	sl, r4, #25
1a0054da:	68e3      	ldr	r3, [r4, #12]
1a0054dc:	f8d9 2000 	ldr.w	r2, [r9]
1a0054e0:	1a9b      	subs	r3, r3, r2
1a0054e2:	42ab      	cmp	r3, r5
1a0054e4:	dc28      	bgt.n	1a005538 <_printf_common+0xa4>
1a0054e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0054ea:	6822      	ldr	r2, [r4, #0]
1a0054ec:	3300      	adds	r3, #0
1a0054ee:	bf18      	it	ne
1a0054f0:	2301      	movne	r3, #1
1a0054f2:	0692      	lsls	r2, r2, #26
1a0054f4:	d42d      	bmi.n	1a005552 <_printf_common+0xbe>
1a0054f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0054fa:	4639      	mov	r1, r7
1a0054fc:	4630      	mov	r0, r6
1a0054fe:	47c0      	blx	r8
1a005500:	3001      	adds	r0, #1
1a005502:	d020      	beq.n	1a005546 <_printf_common+0xb2>
1a005504:	6823      	ldr	r3, [r4, #0]
1a005506:	68e5      	ldr	r5, [r4, #12]
1a005508:	f8d9 2000 	ldr.w	r2, [r9]
1a00550c:	f003 0306 	and.w	r3, r3, #6
1a005510:	2b04      	cmp	r3, #4
1a005512:	bf08      	it	eq
1a005514:	1aad      	subeq	r5, r5, r2
1a005516:	68a3      	ldr	r3, [r4, #8]
1a005518:	6922      	ldr	r2, [r4, #16]
1a00551a:	bf0c      	ite	eq
1a00551c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a005520:	2500      	movne	r5, #0
1a005522:	4293      	cmp	r3, r2
1a005524:	bfc4      	itt	gt
1a005526:	1a9b      	subgt	r3, r3, r2
1a005528:	18ed      	addgt	r5, r5, r3
1a00552a:	f04f 0900 	mov.w	r9, #0
1a00552e:	341a      	adds	r4, #26
1a005530:	454d      	cmp	r5, r9
1a005532:	d11a      	bne.n	1a00556a <_printf_common+0xd6>
1a005534:	2000      	movs	r0, #0
1a005536:	e008      	b.n	1a00554a <_printf_common+0xb6>
1a005538:	2301      	movs	r3, #1
1a00553a:	4652      	mov	r2, sl
1a00553c:	4639      	mov	r1, r7
1a00553e:	4630      	mov	r0, r6
1a005540:	47c0      	blx	r8
1a005542:	3001      	adds	r0, #1
1a005544:	d103      	bne.n	1a00554e <_printf_common+0xba>
1a005546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00554e:	3501      	adds	r5, #1
1a005550:	e7c3      	b.n	1a0054da <_printf_common+0x46>
1a005552:	18e1      	adds	r1, r4, r3
1a005554:	1c5a      	adds	r2, r3, #1
1a005556:	2030      	movs	r0, #48	; 0x30
1a005558:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a00555c:	4422      	add	r2, r4
1a00555e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a005562:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a005566:	3302      	adds	r3, #2
1a005568:	e7c5      	b.n	1a0054f6 <_printf_common+0x62>
1a00556a:	2301      	movs	r3, #1
1a00556c:	4622      	mov	r2, r4
1a00556e:	4639      	mov	r1, r7
1a005570:	4630      	mov	r0, r6
1a005572:	47c0      	blx	r8
1a005574:	3001      	adds	r0, #1
1a005576:	d0e6      	beq.n	1a005546 <_printf_common+0xb2>
1a005578:	f109 0901 	add.w	r9, r9, #1
1a00557c:	e7d8      	b.n	1a005530 <_printf_common+0x9c>
1a00557e:	Address 0x000000001a00557e is out of bounds.


1a005580 <_printf_i>:
1a005580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a005584:	4606      	mov	r6, r0
1a005586:	460c      	mov	r4, r1
1a005588:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a00558c:	7e09      	ldrb	r1, [r1, #24]
1a00558e:	b085      	sub	sp, #20
1a005590:	296e      	cmp	r1, #110	; 0x6e
1a005592:	4698      	mov	r8, r3
1a005594:	4617      	mov	r7, r2
1a005596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005598:	f000 80ba 	beq.w	1a005710 <_printf_i+0x190>
1a00559c:	d824      	bhi.n	1a0055e8 <_printf_i+0x68>
1a00559e:	2963      	cmp	r1, #99	; 0x63
1a0055a0:	d039      	beq.n	1a005616 <_printf_i+0x96>
1a0055a2:	d80a      	bhi.n	1a0055ba <_printf_i+0x3a>
1a0055a4:	2900      	cmp	r1, #0
1a0055a6:	f000 80c3 	beq.w	1a005730 <_printf_i+0x1b0>
1a0055aa:	2958      	cmp	r1, #88	; 0x58
1a0055ac:	f000 8091 	beq.w	1a0056d2 <_printf_i+0x152>
1a0055b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0055b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0055b8:	e035      	b.n	1a005626 <_printf_i+0xa6>
1a0055ba:	2964      	cmp	r1, #100	; 0x64
1a0055bc:	d001      	beq.n	1a0055c2 <_printf_i+0x42>
1a0055be:	2969      	cmp	r1, #105	; 0x69
1a0055c0:	d1f6      	bne.n	1a0055b0 <_printf_i+0x30>
1a0055c2:	6825      	ldr	r5, [r4, #0]
1a0055c4:	681a      	ldr	r2, [r3, #0]
1a0055c6:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0055ca:	f102 0104 	add.w	r1, r2, #4
1a0055ce:	d02c      	beq.n	1a00562a <_printf_i+0xaa>
1a0055d0:	6812      	ldr	r2, [r2, #0]
1a0055d2:	6019      	str	r1, [r3, #0]
1a0055d4:	2a00      	cmp	r2, #0
1a0055d6:	da03      	bge.n	1a0055e0 <_printf_i+0x60>
1a0055d8:	232d      	movs	r3, #45	; 0x2d
1a0055da:	4252      	negs	r2, r2
1a0055dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0055e0:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a0057a0 <_printf_i+0x220>
1a0055e4:	230a      	movs	r3, #10
1a0055e6:	e03f      	b.n	1a005668 <_printf_i+0xe8>
1a0055e8:	2973      	cmp	r1, #115	; 0x73
1a0055ea:	f000 80a5 	beq.w	1a005738 <_printf_i+0x1b8>
1a0055ee:	d808      	bhi.n	1a005602 <_printf_i+0x82>
1a0055f0:	296f      	cmp	r1, #111	; 0x6f
1a0055f2:	d021      	beq.n	1a005638 <_printf_i+0xb8>
1a0055f4:	2970      	cmp	r1, #112	; 0x70
1a0055f6:	d1db      	bne.n	1a0055b0 <_printf_i+0x30>
1a0055f8:	6822      	ldr	r2, [r4, #0]
1a0055fa:	f042 0220 	orr.w	r2, r2, #32
1a0055fe:	6022      	str	r2, [r4, #0]
1a005600:	e003      	b.n	1a00560a <_printf_i+0x8a>
1a005602:	2975      	cmp	r1, #117	; 0x75
1a005604:	d018      	beq.n	1a005638 <_printf_i+0xb8>
1a005606:	2978      	cmp	r1, #120	; 0x78
1a005608:	d1d2      	bne.n	1a0055b0 <_printf_i+0x30>
1a00560a:	2278      	movs	r2, #120	; 0x78
1a00560c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a005610:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a0057a4 <_printf_i+0x224>
1a005614:	e061      	b.n	1a0056da <_printf_i+0x15a>
1a005616:	681a      	ldr	r2, [r3, #0]
1a005618:	1d11      	adds	r1, r2, #4
1a00561a:	6019      	str	r1, [r3, #0]
1a00561c:	6813      	ldr	r3, [r2, #0]
1a00561e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a005622:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005626:	2301      	movs	r3, #1
1a005628:	e093      	b.n	1a005752 <_printf_i+0x1d2>
1a00562a:	6812      	ldr	r2, [r2, #0]
1a00562c:	6019      	str	r1, [r3, #0]
1a00562e:	f015 0f40 	tst.w	r5, #64	; 0x40
1a005632:	bf18      	it	ne
1a005634:	b212      	sxthne	r2, r2
1a005636:	e7cd      	b.n	1a0055d4 <_printf_i+0x54>
1a005638:	f8d4 c000 	ldr.w	ip, [r4]
1a00563c:	681a      	ldr	r2, [r3, #0]
1a00563e:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a005642:	f102 0504 	add.w	r5, r2, #4
1a005646:	601d      	str	r5, [r3, #0]
1a005648:	d001      	beq.n	1a00564e <_printf_i+0xce>
1a00564a:	6812      	ldr	r2, [r2, #0]
1a00564c:	e003      	b.n	1a005656 <_printf_i+0xd6>
1a00564e:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a005652:	d0fa      	beq.n	1a00564a <_printf_i+0xca>
1a005654:	8812      	ldrh	r2, [r2, #0]
1a005656:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a0057a0 <_printf_i+0x220>
1a00565a:	296f      	cmp	r1, #111	; 0x6f
1a00565c:	bf0c      	ite	eq
1a00565e:	2308      	moveq	r3, #8
1a005660:	230a      	movne	r3, #10
1a005662:	2100      	movs	r1, #0
1a005664:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a005668:	6865      	ldr	r5, [r4, #4]
1a00566a:	60a5      	str	r5, [r4, #8]
1a00566c:	2d00      	cmp	r5, #0
1a00566e:	bfa2      	ittt	ge
1a005670:	6821      	ldrge	r1, [r4, #0]
1a005672:	f021 0104 	bicge.w	r1, r1, #4
1a005676:	6021      	strge	r1, [r4, #0]
1a005678:	b90a      	cbnz	r2, 1a00567e <_printf_i+0xfe>
1a00567a:	2d00      	cmp	r5, #0
1a00567c:	d046      	beq.n	1a00570c <_printf_i+0x18c>
1a00567e:	4605      	mov	r5, r0
1a005680:	fbb2 f1f3 	udiv	r1, r2, r3
1a005684:	fb03 2e11 	mls	lr, r3, r1, r2
1a005688:	4293      	cmp	r3, r2
1a00568a:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a00568e:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a005692:	d939      	bls.n	1a005708 <_printf_i+0x188>
1a005694:	2b08      	cmp	r3, #8
1a005696:	d10b      	bne.n	1a0056b0 <_printf_i+0x130>
1a005698:	6823      	ldr	r3, [r4, #0]
1a00569a:	07da      	lsls	r2, r3, #31
1a00569c:	d508      	bpl.n	1a0056b0 <_printf_i+0x130>
1a00569e:	6923      	ldr	r3, [r4, #16]
1a0056a0:	6862      	ldr	r2, [r4, #4]
1a0056a2:	429a      	cmp	r2, r3
1a0056a4:	bfde      	ittt	le
1a0056a6:	2330      	movle	r3, #48	; 0x30
1a0056a8:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0056ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0056b0:	1b40      	subs	r0, r0, r5
1a0056b2:	6120      	str	r0, [r4, #16]
1a0056b4:	f8cd 8000 	str.w	r8, [sp]
1a0056b8:	463b      	mov	r3, r7
1a0056ba:	aa03      	add	r2, sp, #12
1a0056bc:	4621      	mov	r1, r4
1a0056be:	4630      	mov	r0, r6
1a0056c0:	f7ff fee8 	bl	1a005494 <_printf_common>
1a0056c4:	3001      	adds	r0, #1
1a0056c6:	d149      	bne.n	1a00575c <_printf_i+0x1dc>
1a0056c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0056cc:	b005      	add	sp, #20
1a0056ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0056d2:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a0057a0 <_printf_i+0x220>
1a0056d6:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0056da:	681d      	ldr	r5, [r3, #0]
1a0056dc:	6821      	ldr	r1, [r4, #0]
1a0056de:	f855 2b04 	ldr.w	r2, [r5], #4
1a0056e2:	601d      	str	r5, [r3, #0]
1a0056e4:	060d      	lsls	r5, r1, #24
1a0056e6:	d50b      	bpl.n	1a005700 <_printf_i+0x180>
1a0056e8:	07cd      	lsls	r5, r1, #31
1a0056ea:	bf44      	itt	mi
1a0056ec:	f041 0120 	orrmi.w	r1, r1, #32
1a0056f0:	6021      	strmi	r1, [r4, #0]
1a0056f2:	b91a      	cbnz	r2, 1a0056fc <_printf_i+0x17c>
1a0056f4:	6823      	ldr	r3, [r4, #0]
1a0056f6:	f023 0320 	bic.w	r3, r3, #32
1a0056fa:	6023      	str	r3, [r4, #0]
1a0056fc:	2310      	movs	r3, #16
1a0056fe:	e7b0      	b.n	1a005662 <_printf_i+0xe2>
1a005700:	064b      	lsls	r3, r1, #25
1a005702:	bf48      	it	mi
1a005704:	b292      	uxthmi	r2, r2
1a005706:	e7ef      	b.n	1a0056e8 <_printf_i+0x168>
1a005708:	460a      	mov	r2, r1
1a00570a:	e7b9      	b.n	1a005680 <_printf_i+0x100>
1a00570c:	4605      	mov	r5, r0
1a00570e:	e7c1      	b.n	1a005694 <_printf_i+0x114>
1a005710:	681a      	ldr	r2, [r3, #0]
1a005712:	f8d4 c000 	ldr.w	ip, [r4]
1a005716:	6961      	ldr	r1, [r4, #20]
1a005718:	1d15      	adds	r5, r2, #4
1a00571a:	601d      	str	r5, [r3, #0]
1a00571c:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a005720:	6813      	ldr	r3, [r2, #0]
1a005722:	d001      	beq.n	1a005728 <_printf_i+0x1a8>
1a005724:	6019      	str	r1, [r3, #0]
1a005726:	e003      	b.n	1a005730 <_printf_i+0x1b0>
1a005728:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a00572c:	d0fa      	beq.n	1a005724 <_printf_i+0x1a4>
1a00572e:	8019      	strh	r1, [r3, #0]
1a005730:	2300      	movs	r3, #0
1a005732:	6123      	str	r3, [r4, #16]
1a005734:	4605      	mov	r5, r0
1a005736:	e7bd      	b.n	1a0056b4 <_printf_i+0x134>
1a005738:	681a      	ldr	r2, [r3, #0]
1a00573a:	1d11      	adds	r1, r2, #4
1a00573c:	6019      	str	r1, [r3, #0]
1a00573e:	6815      	ldr	r5, [r2, #0]
1a005740:	6862      	ldr	r2, [r4, #4]
1a005742:	2100      	movs	r1, #0
1a005744:	4628      	mov	r0, r5
1a005746:	f000 f86b 	bl	1a005820 <memchr>
1a00574a:	b108      	cbz	r0, 1a005750 <_printf_i+0x1d0>
1a00574c:	1b40      	subs	r0, r0, r5
1a00574e:	6060      	str	r0, [r4, #4]
1a005750:	6863      	ldr	r3, [r4, #4]
1a005752:	6123      	str	r3, [r4, #16]
1a005754:	2300      	movs	r3, #0
1a005756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00575a:	e7ab      	b.n	1a0056b4 <_printf_i+0x134>
1a00575c:	6923      	ldr	r3, [r4, #16]
1a00575e:	462a      	mov	r2, r5
1a005760:	4639      	mov	r1, r7
1a005762:	4630      	mov	r0, r6
1a005764:	47c0      	blx	r8
1a005766:	3001      	adds	r0, #1
1a005768:	d0ae      	beq.n	1a0056c8 <_printf_i+0x148>
1a00576a:	6823      	ldr	r3, [r4, #0]
1a00576c:	079b      	lsls	r3, r3, #30
1a00576e:	d413      	bmi.n	1a005798 <_printf_i+0x218>
1a005770:	68e0      	ldr	r0, [r4, #12]
1a005772:	9b03      	ldr	r3, [sp, #12]
1a005774:	4298      	cmp	r0, r3
1a005776:	bfb8      	it	lt
1a005778:	4618      	movlt	r0, r3
1a00577a:	e7a7      	b.n	1a0056cc <_printf_i+0x14c>
1a00577c:	2301      	movs	r3, #1
1a00577e:	464a      	mov	r2, r9
1a005780:	4639      	mov	r1, r7
1a005782:	4630      	mov	r0, r6
1a005784:	47c0      	blx	r8
1a005786:	3001      	adds	r0, #1
1a005788:	d09e      	beq.n	1a0056c8 <_printf_i+0x148>
1a00578a:	3501      	adds	r5, #1
1a00578c:	68e3      	ldr	r3, [r4, #12]
1a00578e:	9a03      	ldr	r2, [sp, #12]
1a005790:	1a9b      	subs	r3, r3, r2
1a005792:	42ab      	cmp	r3, r5
1a005794:	dcf2      	bgt.n	1a00577c <_printf_i+0x1fc>
1a005796:	e7eb      	b.n	1a005770 <_printf_i+0x1f0>
1a005798:	2500      	movs	r5, #0
1a00579a:	f104 0919 	add.w	r9, r4, #25
1a00579e:	e7f5      	b.n	1a00578c <_printf_i+0x20c>
1a0057a0:	1a006210 	.word	0x1a006210
1a0057a4:	1a006221 	.word	0x1a006221

1a0057a8 <siprintf>:
1a0057a8:	b40e      	push	{r1, r2, r3}
1a0057aa:	b500      	push	{lr}
1a0057ac:	b09c      	sub	sp, #112	; 0x70
1a0057ae:	ab1d      	add	r3, sp, #116	; 0x74
1a0057b0:	9002      	str	r0, [sp, #8]
1a0057b2:	9006      	str	r0, [sp, #24]
1a0057b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a0057b8:	4809      	ldr	r0, [pc, #36]	; (1a0057e0 <siprintf+0x38>)
1a0057ba:	9107      	str	r1, [sp, #28]
1a0057bc:	9104      	str	r1, [sp, #16]
1a0057be:	4909      	ldr	r1, [pc, #36]	; (1a0057e4 <siprintf+0x3c>)
1a0057c0:	f853 2b04 	ldr.w	r2, [r3], #4
1a0057c4:	9105      	str	r1, [sp, #20]
1a0057c6:	6800      	ldr	r0, [r0, #0]
1a0057c8:	9301      	str	r3, [sp, #4]
1a0057ca:	a902      	add	r1, sp, #8
1a0057cc:	f000 f920 	bl	1a005a10 <_svfiprintf_r>
1a0057d0:	9b02      	ldr	r3, [sp, #8]
1a0057d2:	2200      	movs	r2, #0
1a0057d4:	701a      	strb	r2, [r3, #0]
1a0057d6:	b01c      	add	sp, #112	; 0x70
1a0057d8:	f85d eb04 	ldr.w	lr, [sp], #4
1a0057dc:	b003      	add	sp, #12
1a0057de:	4770      	bx	lr
1a0057e0:	10000c40 	.word	0x10000c40
1a0057e4:	ffff0208 	.word	0xffff0208

1a0057e8 <strcat>:
1a0057e8:	b510      	push	{r4, lr}
1a0057ea:	4603      	mov	r3, r0
1a0057ec:	461a      	mov	r2, r3
1a0057ee:	f812 4b01 	ldrb.w	r4, [r2], #1
1a0057f2:	b93c      	cbnz	r4, 1a005804 <strcat+0x1c>
1a0057f4:	3b01      	subs	r3, #1
1a0057f6:	f811 2b01 	ldrb.w	r2, [r1], #1
1a0057fa:	f803 2f01 	strb.w	r2, [r3, #1]!
1a0057fe:	2a00      	cmp	r2, #0
1a005800:	d1f9      	bne.n	1a0057f6 <strcat+0xe>
1a005802:	bd10      	pop	{r4, pc}
1a005804:	4613      	mov	r3, r2
1a005806:	e7f1      	b.n	1a0057ec <strcat+0x4>

1a005808 <strlen>:
1a005808:	4603      	mov	r3, r0
1a00580a:	f813 2b01 	ldrb.w	r2, [r3], #1
1a00580e:	2a00      	cmp	r2, #0
1a005810:	d1fb      	bne.n	1a00580a <strlen+0x2>
1a005812:	1a18      	subs	r0, r3, r0
1a005814:	3801      	subs	r0, #1
1a005816:	4770      	bx	lr
1a005818:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00581c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a005820 <memchr>:
1a005820:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005824:	2a10      	cmp	r2, #16
1a005826:	db2b      	blt.n	1a005880 <memchr+0x60>
1a005828:	f010 0f07 	tst.w	r0, #7
1a00582c:	d008      	beq.n	1a005840 <memchr+0x20>
1a00582e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005832:	3a01      	subs	r2, #1
1a005834:	428b      	cmp	r3, r1
1a005836:	d02d      	beq.n	1a005894 <memchr+0x74>
1a005838:	f010 0f07 	tst.w	r0, #7
1a00583c:	b342      	cbz	r2, 1a005890 <memchr+0x70>
1a00583e:	d1f6      	bne.n	1a00582e <memchr+0xe>
1a005840:	b4f0      	push	{r4, r5, r6, r7}
1a005842:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005846:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00584a:	f022 0407 	bic.w	r4, r2, #7
1a00584e:	f07f 0700 	mvns.w	r7, #0
1a005852:	2300      	movs	r3, #0
1a005854:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005858:	3c08      	subs	r4, #8
1a00585a:	ea85 0501 	eor.w	r5, r5, r1
1a00585e:	ea86 0601 	eor.w	r6, r6, r1
1a005862:	fa85 f547 	uadd8	r5, r5, r7
1a005866:	faa3 f587 	sel	r5, r3, r7
1a00586a:	fa86 f647 	uadd8	r6, r6, r7
1a00586e:	faa5 f687 	sel	r6, r5, r7
1a005872:	b98e      	cbnz	r6, 1a005898 <memchr+0x78>
1a005874:	d1ee      	bne.n	1a005854 <memchr+0x34>
1a005876:	bcf0      	pop	{r4, r5, r6, r7}
1a005878:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00587c:	f002 0207 	and.w	r2, r2, #7
1a005880:	b132      	cbz	r2, 1a005890 <memchr+0x70>
1a005882:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005886:	3a01      	subs	r2, #1
1a005888:	ea83 0301 	eor.w	r3, r3, r1
1a00588c:	b113      	cbz	r3, 1a005894 <memchr+0x74>
1a00588e:	d1f8      	bne.n	1a005882 <memchr+0x62>
1a005890:	2000      	movs	r0, #0
1a005892:	4770      	bx	lr
1a005894:	3801      	subs	r0, #1
1a005896:	4770      	bx	lr
1a005898:	2d00      	cmp	r5, #0
1a00589a:	bf06      	itte	eq
1a00589c:	4635      	moveq	r5, r6
1a00589e:	3803      	subeq	r0, #3
1a0058a0:	3807      	subne	r0, #7
1a0058a2:	f015 0f01 	tst.w	r5, #1
1a0058a6:	d107      	bne.n	1a0058b8 <memchr+0x98>
1a0058a8:	3001      	adds	r0, #1
1a0058aa:	f415 7f80 	tst.w	r5, #256	; 0x100
1a0058ae:	bf02      	ittt	eq
1a0058b0:	3001      	addeq	r0, #1
1a0058b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0058b6:	3001      	addeq	r0, #1
1a0058b8:	bcf0      	pop	{r4, r5, r6, r7}
1a0058ba:	3801      	subs	r0, #1
1a0058bc:	4770      	bx	lr
1a0058be:	bf00      	nop

1a0058c0 <memmove>:
1a0058c0:	4288      	cmp	r0, r1
1a0058c2:	b510      	push	{r4, lr}
1a0058c4:	eb01 0302 	add.w	r3, r1, r2
1a0058c8:	d902      	bls.n	1a0058d0 <memmove+0x10>
1a0058ca:	4283      	cmp	r3, r0
1a0058cc:	461c      	mov	r4, r3
1a0058ce:	d807      	bhi.n	1a0058e0 <memmove+0x20>
1a0058d0:	1e42      	subs	r2, r0, #1
1a0058d2:	4299      	cmp	r1, r3
1a0058d4:	d008      	beq.n	1a0058e8 <memmove+0x28>
1a0058d6:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0058da:	f802 4f01 	strb.w	r4, [r2, #1]!
1a0058de:	e7f8      	b.n	1a0058d2 <memmove+0x12>
1a0058e0:	1883      	adds	r3, r0, r2
1a0058e2:	1a9a      	subs	r2, r3, r2
1a0058e4:	429a      	cmp	r2, r3
1a0058e6:	d100      	bne.n	1a0058ea <memmove+0x2a>
1a0058e8:	bd10      	pop	{r4, pc}
1a0058ea:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
1a0058ee:	f803 1d01 	strb.w	r1, [r3, #-1]!
1a0058f2:	e7f7      	b.n	1a0058e4 <memmove+0x24>

1a0058f4 <__malloc_lock>:
1a0058f4:	4801      	ldr	r0, [pc, #4]	; (1a0058fc <__malloc_lock+0x8>)
1a0058f6:	f7ff bd0d 	b.w	1a005314 <__retarget_lock_acquire_recursive>
1a0058fa:	bf00      	nop
1a0058fc:	10000d78 	.word	0x10000d78

1a005900 <__malloc_unlock>:
1a005900:	4801      	ldr	r0, [pc, #4]	; (1a005908 <__malloc_unlock+0x8>)
1a005902:	f7ff bd08 	b.w	1a005316 <__retarget_lock_release_recursive>
1a005906:	bf00      	nop
1a005908:	10000d78 	.word	0x10000d78

1a00590c <_realloc_r>:
1a00590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00590e:	4607      	mov	r7, r0
1a005910:	4614      	mov	r4, r2
1a005912:	460e      	mov	r6, r1
1a005914:	b921      	cbnz	r1, 1a005920 <_realloc_r+0x14>
1a005916:	4611      	mov	r1, r2
1a005918:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a00591c:	f7ff bd60 	b.w	1a0053e0 <_malloc_r>
1a005920:	b922      	cbnz	r2, 1a00592c <_realloc_r+0x20>
1a005922:	f7ff fd0f 	bl	1a005344 <_free_r>
1a005926:	4625      	mov	r5, r4
1a005928:	4628      	mov	r0, r5
1a00592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00592c:	f000 f968 	bl	1a005c00 <_malloc_usable_size_r>
1a005930:	42a0      	cmp	r0, r4
1a005932:	d20f      	bcs.n	1a005954 <_realloc_r+0x48>
1a005934:	4621      	mov	r1, r4
1a005936:	4638      	mov	r0, r7
1a005938:	f7ff fd52 	bl	1a0053e0 <_malloc_r>
1a00593c:	4605      	mov	r5, r0
1a00593e:	2800      	cmp	r0, #0
1a005940:	d0f2      	beq.n	1a005928 <_realloc_r+0x1c>
1a005942:	4631      	mov	r1, r6
1a005944:	4622      	mov	r2, r4
1a005946:	f7ff fce7 	bl	1a005318 <memcpy>
1a00594a:	4631      	mov	r1, r6
1a00594c:	4638      	mov	r0, r7
1a00594e:	f7ff fcf9 	bl	1a005344 <_free_r>
1a005952:	e7e9      	b.n	1a005928 <_realloc_r+0x1c>
1a005954:	4635      	mov	r5, r6
1a005956:	e7e7      	b.n	1a005928 <_realloc_r+0x1c>

1a005958 <__ssputs_r>:
1a005958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00595c:	688e      	ldr	r6, [r1, #8]
1a00595e:	429e      	cmp	r6, r3
1a005960:	4682      	mov	sl, r0
1a005962:	460c      	mov	r4, r1
1a005964:	4691      	mov	r9, r2
1a005966:	4698      	mov	r8, r3
1a005968:	d838      	bhi.n	1a0059dc <__ssputs_r+0x84>
1a00596a:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
1a00596e:	f41c 6f90 	tst.w	ip, #1152	; 0x480
1a005972:	d031      	beq.n	1a0059d8 <__ssputs_r+0x80>
1a005974:	6962      	ldr	r2, [r4, #20]
1a005976:	6825      	ldr	r5, [r4, #0]
1a005978:	6909      	ldr	r1, [r1, #16]
1a00597a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00597e:	1a6f      	subs	r7, r5, r1
1a005980:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1a005984:	3301      	adds	r3, #1
1a005986:	1055      	asrs	r5, r2, #1
1a005988:	443b      	add	r3, r7
1a00598a:	429d      	cmp	r5, r3
1a00598c:	bf38      	it	cc
1a00598e:	461d      	movcc	r5, r3
1a005990:	f41c 6f80 	tst.w	ip, #1024	; 0x400
1a005994:	d030      	beq.n	1a0059f8 <__ssputs_r+0xa0>
1a005996:	4629      	mov	r1, r5
1a005998:	f7ff fd22 	bl	1a0053e0 <_malloc_r>
1a00599c:	4606      	mov	r6, r0
1a00599e:	b950      	cbnz	r0, 1a0059b6 <__ssputs_r+0x5e>
1a0059a0:	230c      	movs	r3, #12
1a0059a2:	f8ca 3000 	str.w	r3, [sl]
1a0059a6:	89a3      	ldrh	r3, [r4, #12]
1a0059a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0059ac:	81a3      	strh	r3, [r4, #12]
1a0059ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0059b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0059b6:	463a      	mov	r2, r7
1a0059b8:	6921      	ldr	r1, [r4, #16]
1a0059ba:	f7ff fcad 	bl	1a005318 <memcpy>
1a0059be:	89a3      	ldrh	r3, [r4, #12]
1a0059c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a0059c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0059c8:	81a3      	strh	r3, [r4, #12]
1a0059ca:	6126      	str	r6, [r4, #16]
1a0059cc:	6165      	str	r5, [r4, #20]
1a0059ce:	443e      	add	r6, r7
1a0059d0:	1bed      	subs	r5, r5, r7
1a0059d2:	6026      	str	r6, [r4, #0]
1a0059d4:	60a5      	str	r5, [r4, #8]
1a0059d6:	4646      	mov	r6, r8
1a0059d8:	4546      	cmp	r6, r8
1a0059da:	d900      	bls.n	1a0059de <__ssputs_r+0x86>
1a0059dc:	4646      	mov	r6, r8
1a0059de:	4632      	mov	r2, r6
1a0059e0:	4649      	mov	r1, r9
1a0059e2:	6820      	ldr	r0, [r4, #0]
1a0059e4:	f7ff ff6c 	bl	1a0058c0 <memmove>
1a0059e8:	68a3      	ldr	r3, [r4, #8]
1a0059ea:	1b9b      	subs	r3, r3, r6
1a0059ec:	60a3      	str	r3, [r4, #8]
1a0059ee:	6823      	ldr	r3, [r4, #0]
1a0059f0:	441e      	add	r6, r3
1a0059f2:	6026      	str	r6, [r4, #0]
1a0059f4:	2000      	movs	r0, #0
1a0059f6:	e7dc      	b.n	1a0059b2 <__ssputs_r+0x5a>
1a0059f8:	462a      	mov	r2, r5
1a0059fa:	f7ff ff87 	bl	1a00590c <_realloc_r>
1a0059fe:	4606      	mov	r6, r0
1a005a00:	2800      	cmp	r0, #0
1a005a02:	d1e2      	bne.n	1a0059ca <__ssputs_r+0x72>
1a005a04:	6921      	ldr	r1, [r4, #16]
1a005a06:	4650      	mov	r0, sl
1a005a08:	f7ff fc9c 	bl	1a005344 <_free_r>
1a005a0c:	e7c8      	b.n	1a0059a0 <__ssputs_r+0x48>
1a005a0e:	Address 0x000000001a005a0e is out of bounds.


1a005a10 <_svfiprintf_r>:
1a005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005a14:	461e      	mov	r6, r3
1a005a16:	898b      	ldrh	r3, [r1, #12]
1a005a18:	061b      	lsls	r3, r3, #24
1a005a1a:	b09d      	sub	sp, #116	; 0x74
1a005a1c:	4607      	mov	r7, r0
1a005a1e:	460d      	mov	r5, r1
1a005a20:	4614      	mov	r4, r2
1a005a22:	d50e      	bpl.n	1a005a42 <_svfiprintf_r+0x32>
1a005a24:	690b      	ldr	r3, [r1, #16]
1a005a26:	b963      	cbnz	r3, 1a005a42 <_svfiprintf_r+0x32>
1a005a28:	2140      	movs	r1, #64	; 0x40
1a005a2a:	f7ff fcd9 	bl	1a0053e0 <_malloc_r>
1a005a2e:	6028      	str	r0, [r5, #0]
1a005a30:	6128      	str	r0, [r5, #16]
1a005a32:	b920      	cbnz	r0, 1a005a3e <_svfiprintf_r+0x2e>
1a005a34:	230c      	movs	r3, #12
1a005a36:	603b      	str	r3, [r7, #0]
1a005a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005a3c:	e0c9      	b.n	1a005bd2 <_svfiprintf_r+0x1c2>
1a005a3e:	2340      	movs	r3, #64	; 0x40
1a005a40:	616b      	str	r3, [r5, #20]
1a005a42:	2300      	movs	r3, #0
1a005a44:	9309      	str	r3, [sp, #36]	; 0x24
1a005a46:	2320      	movs	r3, #32
1a005a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a005a4c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 1a005bec <_svfiprintf_r+0x1dc>
1a005a50:	9603      	str	r6, [sp, #12]
1a005a52:	2330      	movs	r3, #48	; 0x30
1a005a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a005a58:	f04f 0a01 	mov.w	sl, #1
1a005a5c:	4623      	mov	r3, r4
1a005a5e:	461e      	mov	r6, r3
1a005a60:	f813 2b01 	ldrb.w	r2, [r3], #1
1a005a64:	b10a      	cbz	r2, 1a005a6a <_svfiprintf_r+0x5a>
1a005a66:	2a25      	cmp	r2, #37	; 0x25
1a005a68:	d1f9      	bne.n	1a005a5e <_svfiprintf_r+0x4e>
1a005a6a:	ebb6 0b04 	subs.w	fp, r6, r4
1a005a6e:	d00b      	beq.n	1a005a88 <_svfiprintf_r+0x78>
1a005a70:	465b      	mov	r3, fp
1a005a72:	4622      	mov	r2, r4
1a005a74:	4629      	mov	r1, r5
1a005a76:	4638      	mov	r0, r7
1a005a78:	f7ff ff6e 	bl	1a005958 <__ssputs_r>
1a005a7c:	3001      	adds	r0, #1
1a005a7e:	f000 80a3 	beq.w	1a005bc8 <_svfiprintf_r+0x1b8>
1a005a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005a84:	445b      	add	r3, fp
1a005a86:	9309      	str	r3, [sp, #36]	; 0x24
1a005a88:	7833      	ldrb	r3, [r6, #0]
1a005a8a:	2b00      	cmp	r3, #0
1a005a8c:	f000 809c 	beq.w	1a005bc8 <_svfiprintf_r+0x1b8>
1a005a90:	2300      	movs	r3, #0
1a005a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a005a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a005a9a:	3601      	adds	r6, #1
1a005a9c:	9304      	str	r3, [sp, #16]
1a005a9e:	9307      	str	r3, [sp, #28]
1a005aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a005aa4:	931a      	str	r3, [sp, #104]	; 0x68
1a005aa6:	4634      	mov	r4, r6
1a005aa8:	2205      	movs	r2, #5
1a005aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
1a005aae:	484f      	ldr	r0, [pc, #316]	; (1a005bec <_svfiprintf_r+0x1dc>)
1a005ab0:	f7ff feb6 	bl	1a005820 <memchr>
1a005ab4:	9b04      	ldr	r3, [sp, #16]
1a005ab6:	b9c0      	cbnz	r0, 1a005aea <_svfiprintf_r+0xda>
1a005ab8:	06d9      	lsls	r1, r3, #27
1a005aba:	bf44      	itt	mi
1a005abc:	2220      	movmi	r2, #32
1a005abe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005ac2:	071a      	lsls	r2, r3, #28
1a005ac4:	bf44      	itt	mi
1a005ac6:	222b      	movmi	r2, #43	; 0x2b
1a005ac8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005acc:	7832      	ldrb	r2, [r6, #0]
1a005ace:	2a2a      	cmp	r2, #42	; 0x2a
1a005ad0:	d013      	beq.n	1a005afa <_svfiprintf_r+0xea>
1a005ad2:	9a07      	ldr	r2, [sp, #28]
1a005ad4:	4634      	mov	r4, r6
1a005ad6:	2000      	movs	r0, #0
1a005ad8:	260a      	movs	r6, #10
1a005ada:	4621      	mov	r1, r4
1a005adc:	f811 3b01 	ldrb.w	r3, [r1], #1
1a005ae0:	3b30      	subs	r3, #48	; 0x30
1a005ae2:	2b09      	cmp	r3, #9
1a005ae4:	d94b      	bls.n	1a005b7e <_svfiprintf_r+0x16e>
1a005ae6:	b970      	cbnz	r0, 1a005b06 <_svfiprintf_r+0xf6>
1a005ae8:	e014      	b.n	1a005b14 <_svfiprintf_r+0x104>
1a005aea:	eba0 0009 	sub.w	r0, r0, r9
1a005aee:	fa0a f000 	lsl.w	r0, sl, r0
1a005af2:	4318      	orrs	r0, r3
1a005af4:	9004      	str	r0, [sp, #16]
1a005af6:	4626      	mov	r6, r4
1a005af8:	e7d5      	b.n	1a005aa6 <_svfiprintf_r+0x96>
1a005afa:	9a03      	ldr	r2, [sp, #12]
1a005afc:	1d11      	adds	r1, r2, #4
1a005afe:	6812      	ldr	r2, [r2, #0]
1a005b00:	9103      	str	r1, [sp, #12]
1a005b02:	2a00      	cmp	r2, #0
1a005b04:	db01      	blt.n	1a005b0a <_svfiprintf_r+0xfa>
1a005b06:	9207      	str	r2, [sp, #28]
1a005b08:	e004      	b.n	1a005b14 <_svfiprintf_r+0x104>
1a005b0a:	4252      	negs	r2, r2
1a005b0c:	f043 0302 	orr.w	r3, r3, #2
1a005b10:	9207      	str	r2, [sp, #28]
1a005b12:	9304      	str	r3, [sp, #16]
1a005b14:	7823      	ldrb	r3, [r4, #0]
1a005b16:	2b2e      	cmp	r3, #46	; 0x2e
1a005b18:	d10c      	bne.n	1a005b34 <_svfiprintf_r+0x124>
1a005b1a:	7863      	ldrb	r3, [r4, #1]
1a005b1c:	2b2a      	cmp	r3, #42	; 0x2a
1a005b1e:	d133      	bne.n	1a005b88 <_svfiprintf_r+0x178>
1a005b20:	9b03      	ldr	r3, [sp, #12]
1a005b22:	1d1a      	adds	r2, r3, #4
1a005b24:	681b      	ldr	r3, [r3, #0]
1a005b26:	9203      	str	r2, [sp, #12]
1a005b28:	2b00      	cmp	r3, #0
1a005b2a:	bfb8      	it	lt
1a005b2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a005b30:	3402      	adds	r4, #2
1a005b32:	9305      	str	r3, [sp, #20]
1a005b34:	4e2e      	ldr	r6, [pc, #184]	; (1a005bf0 <_svfiprintf_r+0x1e0>)
1a005b36:	7821      	ldrb	r1, [r4, #0]
1a005b38:	2203      	movs	r2, #3
1a005b3a:	4630      	mov	r0, r6
1a005b3c:	f7ff fe70 	bl	1a005820 <memchr>
1a005b40:	b138      	cbz	r0, 1a005b52 <_svfiprintf_r+0x142>
1a005b42:	2340      	movs	r3, #64	; 0x40
1a005b44:	1b80      	subs	r0, r0, r6
1a005b46:	fa03 f000 	lsl.w	r0, r3, r0
1a005b4a:	9b04      	ldr	r3, [sp, #16]
1a005b4c:	4303      	orrs	r3, r0
1a005b4e:	3401      	adds	r4, #1
1a005b50:	9304      	str	r3, [sp, #16]
1a005b52:	f814 1b01 	ldrb.w	r1, [r4], #1
1a005b56:	4827      	ldr	r0, [pc, #156]	; (1a005bf4 <_svfiprintf_r+0x1e4>)
1a005b58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a005b5c:	2206      	movs	r2, #6
1a005b5e:	f7ff fe5f 	bl	1a005820 <memchr>
1a005b62:	2800      	cmp	r0, #0
1a005b64:	d038      	beq.n	1a005bd8 <_svfiprintf_r+0x1c8>
1a005b66:	4b24      	ldr	r3, [pc, #144]	; (1a005bf8 <_svfiprintf_r+0x1e8>)
1a005b68:	bb13      	cbnz	r3, 1a005bb0 <_svfiprintf_r+0x1a0>
1a005b6a:	9b03      	ldr	r3, [sp, #12]
1a005b6c:	3307      	adds	r3, #7
1a005b6e:	f023 0307 	bic.w	r3, r3, #7
1a005b72:	3308      	adds	r3, #8
1a005b74:	9303      	str	r3, [sp, #12]
1a005b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005b78:	4443      	add	r3, r8
1a005b7a:	9309      	str	r3, [sp, #36]	; 0x24
1a005b7c:	e76e      	b.n	1a005a5c <_svfiprintf_r+0x4c>
1a005b7e:	fb06 3202 	mla	r2, r6, r2, r3
1a005b82:	2001      	movs	r0, #1
1a005b84:	460c      	mov	r4, r1
1a005b86:	e7a8      	b.n	1a005ada <_svfiprintf_r+0xca>
1a005b88:	2300      	movs	r3, #0
1a005b8a:	3401      	adds	r4, #1
1a005b8c:	9305      	str	r3, [sp, #20]
1a005b8e:	4619      	mov	r1, r3
1a005b90:	260a      	movs	r6, #10
1a005b92:	4620      	mov	r0, r4
1a005b94:	f810 2b01 	ldrb.w	r2, [r0], #1
1a005b98:	3a30      	subs	r2, #48	; 0x30
1a005b9a:	2a09      	cmp	r2, #9
1a005b9c:	d903      	bls.n	1a005ba6 <_svfiprintf_r+0x196>
1a005b9e:	2b00      	cmp	r3, #0
1a005ba0:	d0c8      	beq.n	1a005b34 <_svfiprintf_r+0x124>
1a005ba2:	9105      	str	r1, [sp, #20]
1a005ba4:	e7c6      	b.n	1a005b34 <_svfiprintf_r+0x124>
1a005ba6:	fb06 2101 	mla	r1, r6, r1, r2
1a005baa:	2301      	movs	r3, #1
1a005bac:	4604      	mov	r4, r0
1a005bae:	e7f0      	b.n	1a005b92 <_svfiprintf_r+0x182>
1a005bb0:	ab03      	add	r3, sp, #12
1a005bb2:	9300      	str	r3, [sp, #0]
1a005bb4:	462a      	mov	r2, r5
1a005bb6:	4b11      	ldr	r3, [pc, #68]	; (1a005bfc <_svfiprintf_r+0x1ec>)
1a005bb8:	a904      	add	r1, sp, #16
1a005bba:	4638      	mov	r0, r7
1a005bbc:	f3af 8000 	nop.w
1a005bc0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005bc4:	4680      	mov	r8, r0
1a005bc6:	d1d6      	bne.n	1a005b76 <_svfiprintf_r+0x166>
1a005bc8:	89ab      	ldrh	r3, [r5, #12]
1a005bca:	065b      	lsls	r3, r3, #25
1a005bcc:	f53f af34 	bmi.w	1a005a38 <_svfiprintf_r+0x28>
1a005bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
1a005bd2:	b01d      	add	sp, #116	; 0x74
1a005bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005bd8:	ab03      	add	r3, sp, #12
1a005bda:	9300      	str	r3, [sp, #0]
1a005bdc:	462a      	mov	r2, r5
1a005bde:	4b07      	ldr	r3, [pc, #28]	; (1a005bfc <_svfiprintf_r+0x1ec>)
1a005be0:	a904      	add	r1, sp, #16
1a005be2:	4638      	mov	r0, r7
1a005be4:	f7ff fccc 	bl	1a005580 <_printf_i>
1a005be8:	e7ea      	b.n	1a005bc0 <_svfiprintf_r+0x1b0>
1a005bea:	bf00      	nop
1a005bec:	1a006232 	.word	0x1a006232
1a005bf0:	1a006238 	.word	0x1a006238
1a005bf4:	1a00623c 	.word	0x1a00623c
1a005bf8:	00000000 	.word	0x00000000
1a005bfc:	1a005959 	.word	0x1a005959

1a005c00 <_malloc_usable_size_r>:
1a005c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a005c04:	1f18      	subs	r0, r3, #4
1a005c06:	2b00      	cmp	r3, #0
1a005c08:	bfbc      	itt	lt
1a005c0a:	580b      	ldrlt	r3, [r1, r0]
1a005c0c:	18c0      	addlt	r0, r0, r3
1a005c0e:	4770      	bx	lr
1a005c10:	000000ef 	.word	0x000000ef
1a005c14:	000000ef 	.word	0x000000ef
1a005c18:	000000ef 	.word	0x000000ef
1a005c1c:	000000ef 	.word	0x000000ef
1a005c20:	000000ef 	.word	0x000000ef
1a005c24:	000000ef 	.word	0x000000ef
1a005c28:	000000af 	.word	0x000000af
1a005c2c:	000000af 	.word	0x000000af
1a005c30:	000000ef 	.word	0x000000ef
1a005c34:	0000007f 	.word	0x0000007f
1a005c38:	0000007f 	.word	0x0000007f
1a005c3c:	000000ef 	.word	0x000000ef
1a005c40:	0000010f 	.word	0x0000010f
1a005c44:	000001df 	.word	0x000001df
1a005c48:	000000ef 	.word	0x000000ef
1a005c4c:	000000ef 	.word	0x000000ef
1a005c50:	000000ef 	.word	0x000000ef
1a005c54:	000000ef 	.word	0x000000ef
1a005c58:	000000ef 	.word	0x000000ef
1a005c5c:	000000ef 	.word	0x000000ef
1a005c60:	000001df 	.word	0x000001df
1a005c64:	0000013f 	.word	0x0000013f
1a005c68:	000000ef 	.word	0x000000ef
1a005c6c:	000000af 	.word	0x000000af
1a005c70:	00000000 	.word	0x00000000
1a005c74:	000000ef 	.word	0x000000ef
1a005c78:	000000ef 	.word	0x000000ef
1a005c7c:	0000013f 	.word	0x0000013f
1a005c80:	0000013f 	.word	0x0000013f
1a005c84:	0000031f 	.word	0x0000031f
1a005c88:	0000007f 	.word	0x0000007f
1a005c8c:	0000013f 	.word	0x0000013f
1a005c90:	0000018f 	.word	0x0000018f
1a005c94:	0000013f 	.word	0x0000013f
1a005c98:	0000013f 	.word	0x0000013f
1a005c9c:	0000013f 	.word	0x0000013f
1a005ca0:	0000013f 	.word	0x0000013f
1a005ca4:	000000db 	.word	0x000000db
1a005ca8:	000000db 	.word	0x000000db
1a005cac:	0000018f 	.word	0x0000018f
1a005cb0:	0000009f 	.word	0x0000009f
1a005cb4:	0000007f 	.word	0x0000007f
1a005cb8:	0000013f 	.word	0x0000013f
1a005cbc:	000001df 	.word	0x000001df
1a005cc0:	0000031f 	.word	0x0000031f
1a005cc4:	0000013f 	.word	0x0000013f
1a005cc8:	0000013f 	.word	0x0000013f
1a005ccc:	0000013f 	.word	0x0000013f
1a005cd0:	0000013f 	.word	0x0000013f
1a005cd4:	0000013f 	.word	0x0000013f
1a005cd8:	0000013f 	.word	0x0000013f
1a005cdc:	0000031f 	.word	0x0000031f
1a005ce0:	000001df 	.word	0x000001df
1a005ce4:	0000013f 	.word	0x0000013f
1a005ce8:	000000db 	.word	0x000000db
1a005cec:	00000000 	.word	0x00000000
1a005cf0:	0000013f 	.word	0x0000013f
1a005cf4:	0000013f 	.word	0x0000013f
1a005cf8:	000001df 	.word	0x000001df
1a005cfc:	000001df 	.word	0x000001df
1a005d00:	000001df 	.word	0x000001df
1a005d04:	0000009f 	.word	0x0000009f
1a005d08:	252e6425 	.word	0x252e6425
1a005d0c:	00000030 	.word	0x00000030
1a005d10:	ffff0000 	.word	0xffff0000
1a005d14:	00006425 	.word	0x00006425
1a005d18:	ffff0075 	.word	0xffff0075
1a005d1c:	616c6f68 	.word	0x616c6f68
1a005d20:	ffffff00 	.word	0xffffff00

1a005d24 <ExtRateIn>:
1a005d24:	00000000                                ....

1a005d28 <GpioButtons>:
1a005d28:	08000400 09010900                       ........

1a005d30 <GpioLeds>:
1a005d30:	01050005 0e000205 0c010b01              ............

1a005d3c <GpioPorts>:
1a005d3c:	03030003 0f050403 05031005 07030603     ................
1a005d4c:	ffff0802                                ....

1a005d50 <OscRateIn>:
1a005d50:	00b71b00                                ....

1a005d54 <InitClkStates>:
1a005d54:	01010f01                                ....

1a005d58 <pinmuxing>:
1a005d58:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005d68:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005d78:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005d88:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005d98:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a005da8:	00d50301 00d50401 00160107 00560207     ..............V.
1a005db8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a005dc8:	00570206                                ..W.

1a005dcc <UART_BClock>:
1a005dcc:	01a201c2 01620182                       ......b.

1a005dd4 <UART_PClock>:
1a005dd4:	00820081 00a200a1 08040201 0f0f0f03     ................
1a005de4:	000000ff                                ....

1a005de8 <periph_to_base>:
1a005de8:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005df8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005e08:	000100e0 01000100 01200003 00060120     .......... . ...
1a005e18:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005e28:	01820013 00120182 01a201a2 01c20011     ................
1a005e38:	001001c2 01e201e2 0202000f 000e0202     ................
1a005e48:	02220222 0223000d 001c0223              "."...#.#...

1a005e54 <InitClkStates>:
1a005e54:	00010100 00010909 0001090a 01010701     ................
1a005e64:	00010902 00010906 0101090c 0001090d     ................
1a005e74:	0001090e 0001090f 00010910 00010911     ................
1a005e84:	00010912 00010913 00011114 00011119     ................
1a005e94:	0001111a 0001111b                       ........

1a005e9c <lpcUarts>:
1a005e9c:	40081000 06020406 00180205 40081000     ...@...........@
1a005eac:	09070509 00180706 40082000 00000000     ......... .@....
1a005ebc:	00190000 400c1000 07060107 001a0602     .......@........
1a005ecc:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a005edc:	02020302 001b0204 00061a80 0000000a     ................

1a005eec <gpioPinsInit>:
1a005eec:	02000104 00050701 05010d03 04080100     ................
1a005efc:	02020002 02000304 00000403 04070002     ................
1a005f0c:	030c0300 09050402 05040103 04030208     ................
1a005f1c:	04020305 06040504 0802000c 03000b06     ................
1a005f2c:	00090607 07060503 060f0504 03030004     ................
1a005f3c:	02000404 00050404 06040502 04060200     ................
1a005f4c:	0c050408 05040a04 0003010e 14010a00     ................
1a005f5c:	010f0000 0d000012 00001101 0010010c     ................
1a005f6c:	07070300 000f0300 01000001 00000000     ................
1a005f7c:	000a0600 08060603 06100504 04030005     ................
1a005f8c:	03000106 04090400 04010d05 010b0000     ................
1a005f9c:	0200000f 00000001 00010104 02010800     ................
1a005fac:	01090000 09010006 05040002 04010200     ................
1a005fbc:	02020105 02020504 0e00000a 01000b02     ................
1a005fcc:	000c020b ffff0c01                       ........

1a005fd4 <npio2_hw>:
1a005fd4:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
1a005fe4:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
1a005ff4:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
1a006004:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
1a006014:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
1a006024:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
1a006034:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
1a006044:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

1a006054 <two_over_pi>:
1a006054:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
1a006064:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
1a006074:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
1a006084:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
1a006094:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
1a0060a4:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
1a0060b4:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
1a0060c4:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
1a0060d4:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
1a0060e4:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
1a0060f4:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
1a006104:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
1a006114:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
1a006124:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
1a006134:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
1a006144:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
1a006154:	0060e27b 00c08c6b ffffffff              {.`.k.......

1a006160 <PIo2>:
1a006160:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
1a006170:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
1a006180:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
1a006190:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

1a0061a0 <init_jk>:
1a0061a0:	00000002 00000003 00000004 00000006     ................

1a0061b0 <__sf_fake_stderr>:
	...

1a0061d0 <__sf_fake_stdin>:
	...

1a0061f0 <__sf_fake_stdout>:
	...
1a006210:	33323130 37363534 42413938 46454443     0123456789ABCDEF
1a006220:	32313000 36353433 61393837 65646362     .0123456789abcde
1a006230:	2d230066 00202b30 004c6c68 45676665     f.#-0+ .hlL.efgE
1a006240:	ff004746                                FG..
