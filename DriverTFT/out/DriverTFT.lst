
DriverTFT/out/DriverTFT.elf:     file format elf32-littlearm
DriverTFT/out/DriverTFT.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001595

Program Header:
0x70000001 off    0x0001305c vaddr 0x1a00305c paddr 0x1a00305c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000cf8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00003064 memsz 0x00003064 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a003064 align 2**16
         filesz 0x00000c40 memsz 0x00000c40 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003058  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000c40  10000000  1a003064  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020c40  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020c40  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020c40  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020c40  2**2
                  CONTENTS
  6 .bss          000000b8  10000c40  10000c40  00000c40  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020c40  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020c40  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020c40  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020c40  2**2
                  CONTENTS
 11 .init_array   00000004  1a003058  1a003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00305c  1a00305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020c40  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020c40  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020c40  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020c40  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020c40  2**2
                  CONTENTS
 18 .noinit       00000000  10000cf8  10000cf8  00020c40  2**2
                  CONTENTS
 19 .debug_info   00021927  00000000  00000000  00020c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000047ea  00000000  00000000  00042567  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00008b39  00000000  00000000  00046d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000a50  00000000  00000000  0004f88a  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000b98  00000000  00000000  000502da  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000cbe0  00000000  00000000  00050e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00011bf4  00000000  00000000  0005da52  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00028155  00000000  00000000  0006f646  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  0009779b  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  00097803  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001a24  00000000  00000000  00097838  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000c40 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003058 l    d  .init_array	00000000 .init_array
1a00305c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000cf8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 DriverTFT.c
00000000 l    df *ABS*	00000000 inicio.c
00000000 l    df *ABS*	00000000 board.c
1a001620 l     F .text	00000044 Board_LED_Init
1a001664 l     F .text	00000040 Board_TEC_Init
1a0016a4 l     F .text	00000040 Board_GPIO_Init
1a0016e4 l     F .text	00000030 Board_ADC_Init
1a001714 l     F .text	00000038 Board_SPI_Init
1a00174c l     F .text	00000024 Board_I2C_Init
1a002dac l     O .text	00000008 GpioButtons
1a002db4 l     O .text	0000000c GpioLeds
1a002dc0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002dd8 l     O .text	00000004 InitClkStates
1a002ddc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000bfc l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0018f8 l     F .text	0000002c Chip_UART_GetIndex
1a002e50 l     O .text	00000008 UART_BClock
1a002e58 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001a94 l     F .text	00000014 Chip_ADC_GetClockIndex
1a001aa8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001c00 l     F .text	000000a0 pll_calc_divs
1a001ca0 l     F .text	0000010c pll_get_frac
1a001dac l     F .text	0000004c Chip_Clock_FindBaseClock
1a002020 l     F .text	00000022 Chip_Clock_GetDivRate
10000c44 l     O .bss	00000008 audio_usb_pll_freq
1a002e6c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002ed8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00231c l     F .text	00000014 Chip_SSP_GetClockIndex
1a002330 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000c34 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002f20 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000c4c l     O .bss	00000004 callBackFuncParams
10000c50 l     O .bss	00000008 tickCounter
10000c58 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002624 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000c5c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a00305c l       .init_array	00000000 __init_array_end
1a003058 l       .bss_RAM5	00000000 __preinit_array_end
1a003058 l       .init_array	00000000 __init_array_start
1a003058 l       .bss_RAM5	00000000 __preinit_array_start
1a001e44 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000b58 g     F .text	000000b0 clrScr
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
10000c60 g     O .bss	00000001 D3
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a001b28 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
10000c61 g     O .bss	00000001 fch
10000c64 g     O .bss	00000004 B_WR
10000c68 g     O .bss	00000001 fcl
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0017c4 g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a0013bc g     F .text	000001d4 inicio
1a000000 g       *ABS*	00000000 __vectors_start__
1a001b92 g     F .text	0000000c Chip_ADC_SetResolution
10000c69 g     O .bss	00000001 WR
10000c6c g     O .bss	00000004 disp_y_size
1a002540 g     F .text	0000002c SysTick_Handler
1a001978 g     F .text	00000040 Chip_UART_SetBaud
10000c70 g     O .bss	00000001 D9
1a001590  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
10000c74 g     O .bss	00000004 B_REST
1a003064 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
10000c78 g     O .bss	00000004 B_CS
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a000df0 g     F .text	00000034 setBackColorb
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff62fa g       *ABS*	00000000 __valid_user_code_checksum
1a003064 g       .ARM.exidx	00000000 _etext
10000c7c g     O .bss	00000001 VH
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
10000c7d g     O .bss	00000001 D0
10000c80 g     O .bss	00000004 P_SDA
10000c84 g     O .bss	00000004 display_model
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0020c2 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002c84 g     F .text	0000001c memcpy
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
10000c88 g     O .bss	00000001 D11
1a002938 g     F .text	00000000 .hidden __aeabi_uldivmod
10000cf8 g       .noinit	00000000 _noinit
10000cf0 g     O .bss	00000004 SystemCoreClock
1a001924 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000e24 g     F .text	0000008c inicioLCD
10000c8c g     O .bss	00000004 display_transfer_mode
1a000180  w    F .text	00000002 UsageFault_Handler
1a002174 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10000c90 g     O .bss	00000004 display_serial_mode
1a001804 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
10000c94 g     O .bss	00000001 __p2
1a002968 g     F .text	000002d0 .hidden __udivmoddi4
1a002da8 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
10000c98 g     O .bss	00000004 P_REST
1a000300 g       .text	00000000 __CRP_WORD_END__
10000c9c g     O .bss	00000004 P_SCL
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000618 g     F .text	00000028 LCD_Write_DATA
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a000300 g     F .text	000000b8 Conflcd
1a00305c g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001ada g     F .text	0000000e setStartMode
1a000ddc g     F .text	00000014 setColor
1a002c3c g     F .text	00000048 __libc_init_array
10000ca0 g     O .bss	00000001 D10
1a00256c g     F .text	000000b8 adcInit
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a001794 g     F .text	00000030 Board_Init
1a00161e  w    F .text	00000002 _init
10000ca1 g     O .bss	00000001 bcl
10000bec g     O .data	00000004 LATCHED_16
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000cf8 g       .bss	00000000 _ebss
1a001b9e g     F .text	0000002a Chip_ADC_EnableChannel
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a001594 g     F .text	00000088 Reset_Handler
1a0024c4 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0018c0 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a001df8 g     F .text	0000004c Chip_Clock_EnableCrystal
10000ca2 g     O .bss	00000001 D12
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0010d0 g     F .text	00000208 printCharAscii
1a00018a g     F .text	0000001e data_init
10000bf8 g     O .data	00000001 orient
10000ca4 g     O .bss	00000004 P_CS
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a00189c g     F .text	00000024 Chip_I2C_Init
1a000c08 g     F .text	0000001c setFont
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001fb4 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002f70 g     O .text	000000e6 gpioPinsInit
10000be8 g     O .data	00000001 LANDSCAPE
1a002348 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a00209c g     F .text	00000026 Chip_Clock_GetBaseClock
10000c40 g       .bss	00000000 _bss
1a001b60 g     F .text	00000032 Chip_ADC_SetSampleRate
10000ca8 g     O .bss	00000004 B_SCL
10000cac g     O .bss	00000001 bch
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00235a g     F .text	0000003e Chip_SSP_SetBitRate
1a0021c0 g     F .text	00000002 Chip_GPIO_Init
1a002dd4 g     O .text	00000004 OscRateIn
1a002424 g     F .text	0000007c uartInit
10000cf8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000690 g     F .text	00000404 _fast_fill_16
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
10000cad g     O .bss	00000001 _transparent
1a000178 g       .text	00000000 __bss_section_table_end
1a000eb0 g     F .text	00000074 drawHLine
1a002658 g     F .text	000001ac gpioInit
10000cae g     O .bss	00000001 D5
10000caf g     O .bss	00000001 D2
10000cb0 g     O .bss	00000004 B_ALE
1a002c38  w    F .text	00000002 .hidden __aeabi_ldiv0
10000cb4 g     O .bss	00000001 __p3
1a002870 g     F .text	0000001c USB0_IRQHandler
1a002140 g     F .text	00000034 Chip_Clock_Disable
10000cb5 g     O .bss	00000001 D8
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
10000bf0 g     O .data	00000004 SERIAL_4PIN
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a001e60 g     F .text	0000001c Chip_Clock_GetDividerDivisor
10000cb8 g     O .bss	00000004 P_WR
1a0002fc g       .text	00000000 __CRP_WORD_START__
10000c40 g     O .bss	00000001 PORTRAIT
1a002ca0 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
10000cbc g     O .bss	00000004 B_RS
1a0012d8 g     F .text	000000e4 main
10000cc0 g     O .bss	00000008 cfont
1a000a94 g     F .text	00000080 setXY
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
10000cc8 g     O .bss	00000004 SER
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
10000ccc g     O .bss	00000001 VL
10000000 g     O .data	00000be4 BigFont
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0020d0 g     F .text	0000003c Chip_Clock_EnableOpts
1a001e7c g     F .text	000000b8 Chip_Clock_GetClockInputHz
10000ccd g     O .bss	00000001 D4
10000cd0 g     O .bss	00000004 B_SDA
1a001f34 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000c24 g     F .text	00000190 initlcd
1a0023d0 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a002900 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002804 g     F .text	0000006a gpioWrite
1a00161c  w    F .text	00000002 _fini
1a000f98 g     F .text	000000dc drawLine
1a000668 g     F .text	00000028 LCD_Write_DATAb
1a001ae8 g     F .text	00000040 Chip_ADC_Init
10000cf4 g     O .bss	00000004 g_pUsbApi
1a0017cc g     F .text	00000038 Board_SetupMuxing
1a0019b8 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0024a0 g     F .text	0000000c tickRead
10000c38 g     O .data	00000008 tickRateMS
10000cd4 g     O .bss	00000001 D14
10000cd5 g     O .bss	00000001 D13
1a000b14 g     F .text	00000044 clrXY
1a001bc8 g     F .text	00000022 Chip_ADC_SetBurstCmd
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000cf8 g       .bss	00000000 _pvHeapStart
10000cd6 g     O .bss	00000001 D15
1a000178 g       .text	00000000 __section_table_end
1a002398 g     F .text	00000038 Chip_SSP_Init
1a001084 g     F .text	0000004c drawPixel
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
10000be4 g     O .data	00000004 CTE70
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a001770 g     F .text	00000024 Board_Debug_Init
1a001b3e g     F .text	00000022 Chip_ADC_Int_SetChannelCmd
10000c40 g       .data	00000000 _edata
1a00187c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10000cd7 g     O .bss	00000001 __p5
1a0021c4 g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a001bec g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
10000cd8 g     O .bss	00000004 P_RS
1a002c38  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
10000cdc g     O .bss	00000001 D1
1a000f24 g     F .text	00000074 drawVLine
1a00210c g     F .text	00000034 Chip_Clock_Enable
1a0003b8 g     F .text	00000260 LCD_Writ_Bus
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a001074 g     F .text	0000000e setPixel
10000cdd g     O .bss	00000001 __p1
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
10000cde g     O .bss	00000001 __p4
1a00288c g     F .text	00000074 boardInit
10000cdf g     O .bss	00000001 D7
10000ce0 g     O .bss	00000001 RS
10000bf4 g     O .data	00000004 SERIAL_5PIN
10000ce1 g     O .bss	00000001 CS
10000ce4 g     O .bss	00000004 disp_x_size
1a000040 g     O .text	000000d4 g_pfnVendorVectors
10000ce8 g     O .bss	00000001 D6
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
10000ce9 g     O .bss	00000001 REST
1a0024ac g     F .text	00000018 tickPowerSet
1a000db4 g     F .text	00000028 setColorb
10000cec g     O .bss	00000004 P_ALE
1a002044 g     F .text	00000058 Chip_Clock_SetBaseClock
1a002408 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000640 g     F .text	00000028 LCD_Write_COM
1a001870 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 95 15 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a fa 62 ff 53     }............b.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	41 25 00 1a                                         A%..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	71 28 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     q(..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a003064 	.word	0x1a003064
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000c40 	.word	0x00000c40
1a000120:	1a003064 	.word	0x1a003064
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a003064 	.word	0x1a003064
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a003064 	.word	0x1a003064
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a003064 	.word	0x1a003064
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000c40 	.word	0x10000c40
1a000154:	000000b8 	.word	0x000000b8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <Conflcd>:
#define LCDFCONFIGURACION_H_
//para este modelo tenemos
//db0-C5 db1-C4 db2-C3 db3-C2 db4-C1 db5-D10 db6-A7 db7-D9 db8-B26 db9-A14 db10-A15 db11-D0 db12-D1 db13-D2 db14-D3 db15-D6
//rs-c6 wr-c7 cs-c8 rst-c9
//con esta funcion se obtiene la resolucion en x, y y la forma de transferencia.
void Conflcd(int model, int RS, int WR, int CS, int REST) {
1a000300:	b570      	push	{r4, r5, r6, lr}
1a000302:	b0de      	sub	sp, #376	; 0x178
1a000304:	4604      	mov	r4, r0
	int dsx[] = { 239, 239, 239, 239, 239, 239, 175, 175, 239, 127,     // 00-09
1a000306:	4d24      	ldr	r5, [pc, #144]	; (1a000398 <Conflcd+0x98>)
1a000308:	267c      	movs	r6, #124	; 0x7c
1a00030a:	4632      	mov	r2, r6
1a00030c:	4629      	mov	r1, r5
1a00030e:	a83f      	add	r0, sp, #252	; 0xfc
1a000310:	f002 fcb8 	bl	1a002c84 <memcpy>
			127, 239, 271, 479, 239, 239, 239, 239, 239, 239,           // 10-19
			479, 319, 239, 175, 0, 239, 239, 319, 319, 799,            // 20-29
			127 };                                  // 30-
	int dsy[] = { 319, 399, 319, 319, 319, 319, 219, 219, 399, 159,     // 00-09
1a000314:	4632      	mov	r2, r6
1a000316:	19a9      	adds	r1, r5, r6
1a000318:	a820      	add	r0, sp, #128	; 0x80
1a00031a:	f002 fcb3 	bl	1a002c84 <memcpy>
			127, 319, 479, 799, 319, 319, 319, 319, 319, 319,           // 10-19
			799, 479, 319, 219, 0, 319, 319, 479, 479, 479,            // 20-29
			159 };                                  // 30-
	int dtm[] = { 16, 16, 16, 8, 8, 16, 8, SERIAL_4PIN, 16, SERIAL_5PIN, // 00-09
1a00031e:	ab01      	add	r3, sp, #4
1a000320:	2210      	movs	r2, #16
1a000322:	601a      	str	r2, [r3, #0]
1a000324:	605a      	str	r2, [r3, #4]
1a000326:	609a      	str	r2, [r3, #8]
1a000328:	2108      	movs	r1, #8
1a00032a:	60d9      	str	r1, [r3, #12]
1a00032c:	6119      	str	r1, [r3, #16]
1a00032e:	615a      	str	r2, [r3, #20]
1a000330:	6199      	str	r1, [r3, #24]
1a000332:	481a      	ldr	r0, [pc, #104]	; (1a00039c <Conflcd+0x9c>)
1a000334:	6805      	ldr	r5, [r0, #0]
1a000336:	61dd      	str	r5, [r3, #28]
1a000338:	621a      	str	r2, [r3, #32]
1a00033a:	4819      	ldr	r0, [pc, #100]	; (1a0003a0 <Conflcd+0xa0>)
1a00033c:	6800      	ldr	r0, [r0, #0]
1a00033e:	6258      	str	r0, [r3, #36]	; 0x24
1a000340:	6298      	str	r0, [r3, #40]	; 0x28
1a000342:	62da      	str	r2, [r3, #44]	; 0x2c
1a000344:	631a      	str	r2, [r3, #48]	; 0x30
1a000346:	635a      	str	r2, [r3, #52]	; 0x34
1a000348:	6399      	str	r1, [r3, #56]	; 0x38
1a00034a:	63da      	str	r2, [r3, #60]	; 0x3c
1a00034c:	4e15      	ldr	r6, [pc, #84]	; (1a0003a4 <Conflcd+0xa4>)
1a00034e:	6836      	ldr	r6, [r6, #0]
1a000350:	641e      	str	r6, [r3, #64]	; 0x40
1a000352:	645a      	str	r2, [r3, #68]	; 0x44
1a000354:	6499      	str	r1, [r3, #72]	; 0x48
1a000356:	64d9      	str	r1, [r3, #76]	; 0x4c
1a000358:	651a      	str	r2, [r3, #80]	; 0x50
1a00035a:	655a      	str	r2, [r3, #84]	; 0x54
1a00035c:	659a      	str	r2, [r3, #88]	; 0x58
1a00035e:	65d9      	str	r1, [r3, #92]	; 0x5c
1a000360:	2100      	movs	r1, #0
1a000362:	6619      	str	r1, [r3, #96]	; 0x60
1a000364:	6658      	str	r0, [r3, #100]	; 0x64
1a000366:	669d      	str	r5, [r3, #104]	; 0x68
1a000368:	66da      	str	r2, [r3, #108]	; 0x6c
1a00036a:	671a      	str	r2, [r3, #112]	; 0x70
1a00036c:	675a      	str	r2, [r3, #116]	; 0x74
1a00036e:	6798      	str	r0, [r3, #120]	; 0x78
			SERIAL_5PIN, 16, 16, 16, 8, 16, LATCHED_16, 16, 8, 8,       // 10-19
			16, 16, 16, 8, 0, SERIAL_5PIN, SERIAL_4PIN, 16, 16, 16,     // 20-29
			SERIAL_5PIN };                              // 30-

	disp_x_size = dsx[model];
1a000370:	aa5e      	add	r2, sp, #376	; 0x178
1a000372:	eb02 0284 	add.w	r2, r2, r4, lsl #2
1a000376:	f852 0c7c 	ldr.w	r0, [r2, #-124]
1a00037a:	490b      	ldr	r1, [pc, #44]	; (1a0003a8 <Conflcd+0xa8>)
1a00037c:	6008      	str	r0, [r1, #0]
	disp_y_size = dsy[model];
1a00037e:	f852 1cf8 	ldr.w	r1, [r2, #-248]
1a000382:	4a0a      	ldr	r2, [pc, #40]	; (1a0003ac <Conflcd+0xac>)
1a000384:	6011      	str	r1, [r2, #0]
	display_transfer_mode = dtm[model];       //para arm es 16
1a000386:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
1a00038a:	4b09      	ldr	r3, [pc, #36]	; (1a0003b0 <Conflcd+0xb0>)
1a00038c:	601a      	str	r2, [r3, #0]
	display_model = model;
1a00038e:	4b09      	ldr	r3, [pc, #36]	; (1a0003b4 <Conflcd+0xb4>)
1a000390:	601c      	str	r4, [r3, #0]

	if (display_transfer_mode != 1) {
		_set_direction_registers (display_transfer_mode); //habilita los pines del micro

	}
}
1a000392:	b05e      	add	sp, #376	; 0x178
1a000394:	bd70      	pop	{r4, r5, r6, pc}
1a000396:	bf00      	nop
1a000398:	1a002cb0 	.word	0x1a002cb0
1a00039c:	10000bf0 	.word	0x10000bf0
1a0003a0:	10000bf4 	.word	0x10000bf4
1a0003a4:	10000bec 	.word	0x10000bec
1a0003a8:	10000ce4 	.word	0x10000ce4
1a0003ac:	10000c6c 	.word	0x10000c6c
1a0003b0:	10000c8c 	.word	0x10000c8c
1a0003b4:	10000c84 	.word	0x10000c84

1a0003b8 <LCD_Writ_Bus>:
		 REG_PIOC_OER=(REG_PIOC_OER & 0b11111111111111111111110000111111) | 0b00000000000000000000001111000000; //PC6 - PC9 enable
		 */
	}
}

void LCD_Writ_Bus(char VH, char VL, uint8_t mode) {
1a0003b8:	b570      	push	{r4, r5, r6, lr}
1a0003ba:	4604      	mov	r4, r0
1a0003bc:	460d      	mov	r5, r1
	//aqui para micro arm
	//REG_PIOA_CODR=0x0000C080;  //pone en cero los pines seleccionados
	gpioWrite(D6, OFF);
1a0003be:	2100      	movs	r1, #0
1a0003c0:	4b84      	ldr	r3, [pc, #528]	; (1a0005d4 <LCD_Writ_Bus+0x21c>)
1a0003c2:	f993 0000 	ldrsb.w	r0, [r3]
1a0003c6:	f002 fa1d 	bl	1a002804 <gpioWrite>
	gpioWrite(D9, OFF);
1a0003ca:	2100      	movs	r1, #0
1a0003cc:	4b82      	ldr	r3, [pc, #520]	; (1a0005d8 <LCD_Writ_Bus+0x220>)
1a0003ce:	f993 0000 	ldrsb.w	r0, [r3]
1a0003d2:	f002 fa17 	bl	1a002804 <gpioWrite>
	gpioWrite(D10, OFF);
1a0003d6:	2100      	movs	r1, #0
1a0003d8:	4b80      	ldr	r3, [pc, #512]	; (1a0005dc <LCD_Writ_Bus+0x224>)
1a0003da:	f993 0000 	ldrsb.w	r0, [r3]
1a0003de:	f002 fa11 	bl	1a002804 <gpioWrite>
	//REG_PIOB_CODR=0x4000000;
	gpioWrite(D8, OFF);
1a0003e2:	2100      	movs	r1, #0
1a0003e4:	4b7e      	ldr	r3, [pc, #504]	; (1a0005e0 <LCD_Writ_Bus+0x228>)
1a0003e6:	f993 0000 	ldrsb.w	r0, [r3]
1a0003ea:	f002 fa0b 	bl	1a002804 <gpioWrite>
	//REG_PIOC_CODR=0x0000003E;
	gpioWrite(D0, OFF);
1a0003ee:	2100      	movs	r1, #0
1a0003f0:	4b7c      	ldr	r3, [pc, #496]	; (1a0005e4 <LCD_Writ_Bus+0x22c>)
1a0003f2:	f993 0000 	ldrsb.w	r0, [r3]
1a0003f6:	f002 fa05 	bl	1a002804 <gpioWrite>
	gpioWrite(D1, OFF);
1a0003fa:	2100      	movs	r1, #0
1a0003fc:	4b7a      	ldr	r3, [pc, #488]	; (1a0005e8 <LCD_Writ_Bus+0x230>)
1a0003fe:	f993 0000 	ldrsb.w	r0, [r3]
1a000402:	f002 f9ff 	bl	1a002804 <gpioWrite>
	gpioWrite(D2, OFF);
1a000406:	2100      	movs	r1, #0
1a000408:	4b78      	ldr	r3, [pc, #480]	; (1a0005ec <LCD_Writ_Bus+0x234>)
1a00040a:	f993 0000 	ldrsb.w	r0, [r3]
1a00040e:	f002 f9f9 	bl	1a002804 <gpioWrite>
	gpioWrite(D3, OFF);
1a000412:	2100      	movs	r1, #0
1a000414:	4b76      	ldr	r3, [pc, #472]	; (1a0005f0 <LCD_Writ_Bus+0x238>)
1a000416:	f993 0000 	ldrsb.w	r0, [r3]
1a00041a:	f002 f9f3 	bl	1a002804 <gpioWrite>
	gpioWrite(D4, OFF);
1a00041e:	2100      	movs	r1, #0
1a000420:	4b74      	ldr	r3, [pc, #464]	; (1a0005f4 <LCD_Writ_Bus+0x23c>)
1a000422:	f993 0000 	ldrsb.w	r0, [r3]
1a000426:	f002 f9ed 	bl	1a002804 <gpioWrite>
	//REG_PIOD_CODR=0x0000064F;
	gpioWrite(D5, OFF);
1a00042a:	2100      	movs	r1, #0
1a00042c:	4b72      	ldr	r3, [pc, #456]	; (1a0005f8 <LCD_Writ_Bus+0x240>)
1a00042e:	f993 0000 	ldrsb.w	r0, [r3]
1a000432:	f002 f9e7 	bl	1a002804 <gpioWrite>
	gpioWrite(D7, OFF);
1a000436:	2100      	movs	r1, #0
1a000438:	4b70      	ldr	r3, [pc, #448]	; (1a0005fc <LCD_Writ_Bus+0x244>)
1a00043a:	f993 0000 	ldrsb.w	r0, [r3]
1a00043e:	f002 f9e1 	bl	1a002804 <gpioWrite>
	gpioWrite(D11, OFF);
1a000442:	2100      	movs	r1, #0
1a000444:	4b6e      	ldr	r3, [pc, #440]	; (1a000600 <LCD_Writ_Bus+0x248>)
1a000446:	f993 0000 	ldrsb.w	r0, [r3]
1a00044a:	f002 f9db 	bl	1a002804 <gpioWrite>
	gpioWrite(D12, OFF);
1a00044e:	2100      	movs	r1, #0
1a000450:	4b6c      	ldr	r3, [pc, #432]	; (1a000604 <LCD_Writ_Bus+0x24c>)
1a000452:	f993 0000 	ldrsb.w	r0, [r3]
1a000456:	f002 f9d5 	bl	1a002804 <gpioWrite>
	gpioWrite(D13, OFF);
1a00045a:	2100      	movs	r1, #0
1a00045c:	4b6a      	ldr	r3, [pc, #424]	; (1a000608 <LCD_Writ_Bus+0x250>)
1a00045e:	f993 0000 	ldrsb.w	r0, [r3]
1a000462:	f002 f9cf 	bl	1a002804 <gpioWrite>
	gpioWrite(D14, OFF);
1a000466:	2100      	movs	r1, #0
1a000468:	4b68      	ldr	r3, [pc, #416]	; (1a00060c <LCD_Writ_Bus+0x254>)
1a00046a:	f993 0000 	ldrsb.w	r0, [r3]
1a00046e:	f002 f9c9 	bl	1a002804 <gpioWrite>
	gpioWrite(D15, OFF);
1a000472:	2100      	movs	r1, #0
1a000474:	4b66      	ldr	r3, [pc, #408]	; (1a000610 <LCD_Writ_Bus+0x258>)
1a000476:	f993 0000 	ldrsb.w	r0, [r3]
1a00047a:	f002 f9c3 	bl	1a002804 <gpioWrite>

	//REG_PIOA_SODR=((VH & 0x06)<<13) | ((VL & 0x40)<<1);   //pone en 1 los bits seleccionados por puerto
	if ((VL & 0x040)) {
1a00047e:	f015 0f40 	tst.w	r5, #64	; 0x40
1a000482:	d136      	bne.n	1a0004f2 <LCD_Writ_Bus+0x13a>
		gpioWrite(D6, ON);
	}
	if ((VH & 0x02)) {
1a000484:	f014 0f02 	tst.w	r4, #2
1a000488:	d13a      	bne.n	1a000500 <LCD_Writ_Bus+0x148>
		gpioWrite(D9, ON);
	}
	if ((VH & 0x04)) {
1a00048a:	f014 0604 	ands.w	r6, r4, #4
1a00048e:	d13e      	bne.n	1a00050e <LCD_Writ_Bus+0x156>
		gpioWrite(D10, ON);
	}
	//(VH & 0x01) ? REG_PIOB_SODR = 0x4000000 : REG_PIOB_CODR = 0x4000000;
	if ((VH & 0x01)) {
1a000490:	f014 0f01 	tst.w	r4, #1
1a000494:	d142      	bne.n	1a00051c <LCD_Writ_Bus+0x164>
		gpioWrite(D8, ON);
	}

	//REG_PIOC_SODR=((VL & 0x01)<<5) | ((VL & 0x02)<<3) | ((VL & 0x04)<<1) | ((VL & 0x08)>>1) | ((VL & 0x10)>>3);
	if ((VL & 0x01)) {
1a000496:	f015 0f01 	tst.w	r5, #1
1a00049a:	d146      	bne.n	1a00052a <LCD_Writ_Bus+0x172>
		gpioWrite(D0, ON);
	}
	if ((VL & 0x02)) {
1a00049c:	f015 0f02 	tst.w	r5, #2
1a0004a0:	d14a      	bne.n	1a000538 <LCD_Writ_Bus+0x180>
		gpioWrite(D1, ON);
	}
	if ((VL & 0x04)) {
1a0004a2:	f015 0f04 	tst.w	r5, #4
1a0004a6:	d14e      	bne.n	1a000546 <LCD_Writ_Bus+0x18e>
		gpioWrite(D2, ON);
	}
	if ((VL & 0x08)) {
1a0004a8:	f015 0f08 	tst.w	r5, #8
1a0004ac:	d152      	bne.n	1a000554 <LCD_Writ_Bus+0x19c>
		gpioWrite(D3, ON);
	}
	if ((VL & 0x010)) {
1a0004ae:	f015 0f10 	tst.w	r5, #16
1a0004b2:	d156      	bne.n	1a000562 <LCD_Writ_Bus+0x1aa>
		gpioWrite(D4, ON);
	}
	//REG_PIOD_SODR=((VH & 0x78)>>3) | ((VH & 0x80)>>1) | ((VL & 0x20)<<5) | ((VL & 0x80)<<2);
	if ((VL & 0x020)) {
1a0004b4:	f015 0f20 	tst.w	r5, #32
1a0004b8:	d15a      	bne.n	1a000570 <LCD_Writ_Bus+0x1b8>
		gpioWrite(D5, ON);
	}
	if ((VL & 0x080)) {
1a0004ba:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0004be:	d15e      	bne.n	1a00057e <LCD_Writ_Bus+0x1c6>
		gpioWrite(D7, ON);
	}
	if ((VH & 0x08)) {
1a0004c0:	f014 0508 	ands.w	r5, r4, #8
1a0004c4:	d162      	bne.n	1a00058c <LCD_Writ_Bus+0x1d4>
		gpioWrite(D11, ON);
	}
	if ((VH & 0x010)) {
1a0004c6:	f014 0f10 	tst.w	r4, #16
1a0004ca:	d166      	bne.n	1a00059a <LCD_Writ_Bus+0x1e2>
		gpioWrite(D12, ON);
	}
	if ((VH & 0x020)) {
1a0004cc:	f014 0f20 	tst.w	r4, #32
1a0004d0:	d16a      	bne.n	1a0005a8 <LCD_Writ_Bus+0x1f0>
		gpioWrite(D13, ON);
	}
	if ((VH & 0x04)) {
1a0004d2:	2e00      	cmp	r6, #0
1a0004d4:	d16f      	bne.n	1a0005b6 <LCD_Writ_Bus+0x1fe>
		gpioWrite(D14, ON);
	}
	if ((VH & 0x08)) {
1a0004d6:	2d00      	cmp	r5, #0
1a0004d8:	d174      	bne.n	1a0005c4 <LCD_Writ_Bus+0x20c>
		gpioWrite(D15, ON);
	}
	//pulse_low(P_WR, B_WR); hace un pulso en bajo de wr
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
	gpioWrite(WR, ON);
1a0004da:	4c4e      	ldr	r4, [pc, #312]	; (1a000614 <LCD_Writ_Bus+0x25c>)
1a0004dc:	2101      	movs	r1, #1
1a0004de:	f994 0000 	ldrsb.w	r0, [r4]
1a0004e2:	f002 f98f 	bl	1a002804 <gpioWrite>
	//delayMicroseconds(1); //retardo minimo de 12nseg
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
	gpioWrite(WR, OFF);
1a0004e6:	2100      	movs	r1, #0
1a0004e8:	f994 0000 	ldrsb.w	r0, [r4]
1a0004ec:	f002 f98a 	bl	1a002804 <gpioWrite>
}
1a0004f0:	bd70      	pop	{r4, r5, r6, pc}
		gpioWrite(D6, ON);
1a0004f2:	2101      	movs	r1, #1
1a0004f4:	4b37      	ldr	r3, [pc, #220]	; (1a0005d4 <LCD_Writ_Bus+0x21c>)
1a0004f6:	f993 0000 	ldrsb.w	r0, [r3]
1a0004fa:	f002 f983 	bl	1a002804 <gpioWrite>
1a0004fe:	e7c1      	b.n	1a000484 <LCD_Writ_Bus+0xcc>
		gpioWrite(D9, ON);
1a000500:	2101      	movs	r1, #1
1a000502:	4b35      	ldr	r3, [pc, #212]	; (1a0005d8 <LCD_Writ_Bus+0x220>)
1a000504:	f993 0000 	ldrsb.w	r0, [r3]
1a000508:	f002 f97c 	bl	1a002804 <gpioWrite>
1a00050c:	e7bd      	b.n	1a00048a <LCD_Writ_Bus+0xd2>
		gpioWrite(D10, ON);
1a00050e:	2101      	movs	r1, #1
1a000510:	4b32      	ldr	r3, [pc, #200]	; (1a0005dc <LCD_Writ_Bus+0x224>)
1a000512:	f993 0000 	ldrsb.w	r0, [r3]
1a000516:	f002 f975 	bl	1a002804 <gpioWrite>
1a00051a:	e7b9      	b.n	1a000490 <LCD_Writ_Bus+0xd8>
		gpioWrite(D8, ON);
1a00051c:	2101      	movs	r1, #1
1a00051e:	4b30      	ldr	r3, [pc, #192]	; (1a0005e0 <LCD_Writ_Bus+0x228>)
1a000520:	f993 0000 	ldrsb.w	r0, [r3]
1a000524:	f002 f96e 	bl	1a002804 <gpioWrite>
1a000528:	e7b5      	b.n	1a000496 <LCD_Writ_Bus+0xde>
		gpioWrite(D0, ON);
1a00052a:	2101      	movs	r1, #1
1a00052c:	4b2d      	ldr	r3, [pc, #180]	; (1a0005e4 <LCD_Writ_Bus+0x22c>)
1a00052e:	f993 0000 	ldrsb.w	r0, [r3]
1a000532:	f002 f967 	bl	1a002804 <gpioWrite>
1a000536:	e7b1      	b.n	1a00049c <LCD_Writ_Bus+0xe4>
		gpioWrite(D1, ON);
1a000538:	2101      	movs	r1, #1
1a00053a:	4b2b      	ldr	r3, [pc, #172]	; (1a0005e8 <LCD_Writ_Bus+0x230>)
1a00053c:	f993 0000 	ldrsb.w	r0, [r3]
1a000540:	f002 f960 	bl	1a002804 <gpioWrite>
1a000544:	e7ad      	b.n	1a0004a2 <LCD_Writ_Bus+0xea>
		gpioWrite(D2, ON);
1a000546:	2101      	movs	r1, #1
1a000548:	4b28      	ldr	r3, [pc, #160]	; (1a0005ec <LCD_Writ_Bus+0x234>)
1a00054a:	f993 0000 	ldrsb.w	r0, [r3]
1a00054e:	f002 f959 	bl	1a002804 <gpioWrite>
1a000552:	e7a9      	b.n	1a0004a8 <LCD_Writ_Bus+0xf0>
		gpioWrite(D3, ON);
1a000554:	2101      	movs	r1, #1
1a000556:	4b26      	ldr	r3, [pc, #152]	; (1a0005f0 <LCD_Writ_Bus+0x238>)
1a000558:	f993 0000 	ldrsb.w	r0, [r3]
1a00055c:	f002 f952 	bl	1a002804 <gpioWrite>
1a000560:	e7a5      	b.n	1a0004ae <LCD_Writ_Bus+0xf6>
		gpioWrite(D4, ON);
1a000562:	2101      	movs	r1, #1
1a000564:	4b23      	ldr	r3, [pc, #140]	; (1a0005f4 <LCD_Writ_Bus+0x23c>)
1a000566:	f993 0000 	ldrsb.w	r0, [r3]
1a00056a:	f002 f94b 	bl	1a002804 <gpioWrite>
1a00056e:	e7a1      	b.n	1a0004b4 <LCD_Writ_Bus+0xfc>
		gpioWrite(D5, ON);
1a000570:	2101      	movs	r1, #1
1a000572:	4b21      	ldr	r3, [pc, #132]	; (1a0005f8 <LCD_Writ_Bus+0x240>)
1a000574:	f993 0000 	ldrsb.w	r0, [r3]
1a000578:	f002 f944 	bl	1a002804 <gpioWrite>
1a00057c:	e79d      	b.n	1a0004ba <LCD_Writ_Bus+0x102>
		gpioWrite(D7, ON);
1a00057e:	2101      	movs	r1, #1
1a000580:	4b1e      	ldr	r3, [pc, #120]	; (1a0005fc <LCD_Writ_Bus+0x244>)
1a000582:	f993 0000 	ldrsb.w	r0, [r3]
1a000586:	f002 f93d 	bl	1a002804 <gpioWrite>
1a00058a:	e799      	b.n	1a0004c0 <LCD_Writ_Bus+0x108>
		gpioWrite(D11, ON);
1a00058c:	2101      	movs	r1, #1
1a00058e:	4b1c      	ldr	r3, [pc, #112]	; (1a000600 <LCD_Writ_Bus+0x248>)
1a000590:	f993 0000 	ldrsb.w	r0, [r3]
1a000594:	f002 f936 	bl	1a002804 <gpioWrite>
1a000598:	e795      	b.n	1a0004c6 <LCD_Writ_Bus+0x10e>
		gpioWrite(D12, ON);
1a00059a:	2101      	movs	r1, #1
1a00059c:	4b19      	ldr	r3, [pc, #100]	; (1a000604 <LCD_Writ_Bus+0x24c>)
1a00059e:	f993 0000 	ldrsb.w	r0, [r3]
1a0005a2:	f002 f92f 	bl	1a002804 <gpioWrite>
1a0005a6:	e791      	b.n	1a0004cc <LCD_Writ_Bus+0x114>
		gpioWrite(D13, ON);
1a0005a8:	2101      	movs	r1, #1
1a0005aa:	4b17      	ldr	r3, [pc, #92]	; (1a000608 <LCD_Writ_Bus+0x250>)
1a0005ac:	f993 0000 	ldrsb.w	r0, [r3]
1a0005b0:	f002 f928 	bl	1a002804 <gpioWrite>
1a0005b4:	e78d      	b.n	1a0004d2 <LCD_Writ_Bus+0x11a>
		gpioWrite(D14, ON);
1a0005b6:	2101      	movs	r1, #1
1a0005b8:	4b14      	ldr	r3, [pc, #80]	; (1a00060c <LCD_Writ_Bus+0x254>)
1a0005ba:	f993 0000 	ldrsb.w	r0, [r3]
1a0005be:	f002 f921 	bl	1a002804 <gpioWrite>
1a0005c2:	e788      	b.n	1a0004d6 <LCD_Writ_Bus+0x11e>
		gpioWrite(D15, ON);
1a0005c4:	2101      	movs	r1, #1
1a0005c6:	4b12      	ldr	r3, [pc, #72]	; (1a000610 <LCD_Writ_Bus+0x258>)
1a0005c8:	f993 0000 	ldrsb.w	r0, [r3]
1a0005cc:	f002 f91a 	bl	1a002804 <gpioWrite>
1a0005d0:	e783      	b.n	1a0004da <LCD_Writ_Bus+0x122>
1a0005d2:	bf00      	nop
1a0005d4:	10000ce8 	.word	0x10000ce8
1a0005d8:	10000c70 	.word	0x10000c70
1a0005dc:	10000ca0 	.word	0x10000ca0
1a0005e0:	10000cb5 	.word	0x10000cb5
1a0005e4:	10000c7d 	.word	0x10000c7d
1a0005e8:	10000cdc 	.word	0x10000cdc
1a0005ec:	10000caf 	.word	0x10000caf
1a0005f0:	10000c60 	.word	0x10000c60
1a0005f4:	10000ccd 	.word	0x10000ccd
1a0005f8:	10000cae 	.word	0x10000cae
1a0005fc:	10000cdf 	.word	0x10000cdf
1a000600:	10000c88 	.word	0x10000c88
1a000604:	10000ca2 	.word	0x10000ca2
1a000608:	10000cd5 	.word	0x10000cd5
1a00060c:	10000cd4 	.word	0x10000cd4
1a000610:	10000cd6 	.word	0x10000cd6
1a000614:	10000c69 	.word	0x10000c69

1a000618 <LCD_Write_DATA>:

void LCD_Write_DATA(char VL) {
1a000618:	b510      	push	{r4, lr}
1a00061a:	4604      	mov	r4, r0
	//sbi(P_RS, B_RS); pone en 1 RS
	gpioWrite(RS, ON);
1a00061c:	2101      	movs	r1, #1
1a00061e:	4b06      	ldr	r3, [pc, #24]	; (1a000638 <LCD_Write_DATA+0x20>)
1a000620:	f993 0000 	ldrsb.w	r0, [r3]
1a000624:	f002 f8ee 	bl	1a002804 <gpioWrite>
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111110111111) | 0b00000000000000000000000001000000; //PC6-RS
	LCD_Writ_Bus(0x00, VL, display_transfer_mode);
1a000628:	4b04      	ldr	r3, [pc, #16]	; (1a00063c <LCD_Write_DATA+0x24>)
1a00062a:	781a      	ldrb	r2, [r3, #0]
1a00062c:	4621      	mov	r1, r4
1a00062e:	2000      	movs	r0, #0
1a000630:	f7ff fec2 	bl	1a0003b8 <LCD_Writ_Bus>
}
1a000634:	bd10      	pop	{r4, pc}
1a000636:	bf00      	nop
1a000638:	10000ce0 	.word	0x10000ce0
1a00063c:	10000c8c 	.word	0x10000c8c

1a000640 <LCD_Write_COM>:

void LCD_Write_COM(char VL) {
1a000640:	b510      	push	{r4, lr}
1a000642:	4604      	mov	r4, r0
	//cbi(P_RS, B_RS); para poner a cero el pin RS
	gpioWrite(RS, OFF);
1a000644:	2100      	movs	r1, #0
1a000646:	4b06      	ldr	r3, [pc, #24]	; (1a000660 <LCD_Write_COM+0x20>)
1a000648:	f993 0000 	ldrsb.w	r0, [r3]
1a00064c:	f002 f8da 	bl	1a002804 <gpioWrite>
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111110111111) | 0b00000000000000000000000001000000; //PC6-RS
	LCD_Writ_Bus(0x00, VL, display_transfer_mode);
1a000650:	4b04      	ldr	r3, [pc, #16]	; (1a000664 <LCD_Write_COM+0x24>)
1a000652:	781a      	ldrb	r2, [r3, #0]
1a000654:	4621      	mov	r1, r4
1a000656:	2000      	movs	r0, #0
1a000658:	f7ff feae 	bl	1a0003b8 <LCD_Writ_Bus>
}
1a00065c:	bd10      	pop	{r4, pc}
1a00065e:	bf00      	nop
1a000660:	10000ce0 	.word	0x10000ce0
1a000664:	10000c8c 	.word	0x10000c8c

1a000668 <LCD_Write_DATAb>:

void LCD_Write_DATAb(char VH, char VL) {
1a000668:	b538      	push	{r3, r4, r5, lr}
1a00066a:	4604      	mov	r4, r0
1a00066c:	460d      	mov	r5, r1
	//sbi(P_RS, B_RS);
	gpioWrite(RS, ON);
1a00066e:	2101      	movs	r1, #1
1a000670:	4b05      	ldr	r3, [pc, #20]	; (1a000688 <LCD_Write_DATAb+0x20>)
1a000672:	f993 0000 	ldrsb.w	r0, [r3]
1a000676:	f002 f8c5 	bl	1a002804 <gpioWrite>
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111110111111) | 0b00000000000000000000000001000000; //PC6-RS
	LCD_Writ_Bus(VH, VL, display_transfer_mode);
1a00067a:	4b04      	ldr	r3, [pc, #16]	; (1a00068c <LCD_Write_DATAb+0x24>)
1a00067c:	781a      	ldrb	r2, [r3, #0]
1a00067e:	4629      	mov	r1, r5
1a000680:	4620      	mov	r0, r4
1a000682:	f7ff fe99 	bl	1a0003b8 <LCD_Writ_Bus>
}
1a000686:	bd38      	pop	{r3, r4, r5, pc}
1a000688:	10000ce0 	.word	0x10000ce0
1a00068c:	10000c8c 	.word	0x10000c8c

1a000690 <_fast_fill_16>:
		setXY(0, 0, disp_x_size, disp_y_size);
	else
		setXY(0, 0, disp_y_size, disp_x_size);
}

void _fast_fill_16(int ch, int cl, long pix) {
1a000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000692:	4604      	mov	r4, r0
1a000694:	460d      	mov	r5, r1
1a000696:	4616      	mov	r6, r2
	long blocks;

	//REG_PIOA_CODR=0x0000C080;  //pone en cero los pines seleccionados
	gpioWrite(D6, OFF);
1a000698:	2100      	movs	r1, #0
1a00069a:	4be0      	ldr	r3, [pc, #896]	; (1a000a1c <_fast_fill_16+0x38c>)
1a00069c:	f993 0000 	ldrsb.w	r0, [r3]
1a0006a0:	f002 f8b0 	bl	1a002804 <gpioWrite>
	gpioWrite(D9, OFF);
1a0006a4:	2100      	movs	r1, #0
1a0006a6:	4bde      	ldr	r3, [pc, #888]	; (1a000a20 <_fast_fill_16+0x390>)
1a0006a8:	f993 0000 	ldrsb.w	r0, [r3]
1a0006ac:	f002 f8aa 	bl	1a002804 <gpioWrite>
	gpioWrite(D10, OFF);
1a0006b0:	2100      	movs	r1, #0
1a0006b2:	4bdc      	ldr	r3, [pc, #880]	; (1a000a24 <_fast_fill_16+0x394>)
1a0006b4:	f993 0000 	ldrsb.w	r0, [r3]
1a0006b8:	f002 f8a4 	bl	1a002804 <gpioWrite>
	//REG_PIOB_CODR=0x4000000;
	gpioWrite(D8, OFF);
1a0006bc:	2100      	movs	r1, #0
1a0006be:	4bda      	ldr	r3, [pc, #872]	; (1a000a28 <_fast_fill_16+0x398>)
1a0006c0:	f993 0000 	ldrsb.w	r0, [r3]
1a0006c4:	f002 f89e 	bl	1a002804 <gpioWrite>

	//REG_PIOC_CODR=0x0000003E;
	gpioWrite(D0, OFF);
1a0006c8:	2100      	movs	r1, #0
1a0006ca:	4bd8      	ldr	r3, [pc, #864]	; (1a000a2c <_fast_fill_16+0x39c>)
1a0006cc:	f993 0000 	ldrsb.w	r0, [r3]
1a0006d0:	f002 f898 	bl	1a002804 <gpioWrite>
	gpioWrite(D1, OFF);
1a0006d4:	2100      	movs	r1, #0
1a0006d6:	4bd6      	ldr	r3, [pc, #856]	; (1a000a30 <_fast_fill_16+0x3a0>)
1a0006d8:	f993 0000 	ldrsb.w	r0, [r3]
1a0006dc:	f002 f892 	bl	1a002804 <gpioWrite>
	gpioWrite(D2, OFF);
1a0006e0:	2100      	movs	r1, #0
1a0006e2:	4bd4      	ldr	r3, [pc, #848]	; (1a000a34 <_fast_fill_16+0x3a4>)
1a0006e4:	f993 0000 	ldrsb.w	r0, [r3]
1a0006e8:	f002 f88c 	bl	1a002804 <gpioWrite>
	gpioWrite(D3, OFF);
1a0006ec:	2100      	movs	r1, #0
1a0006ee:	4bd2      	ldr	r3, [pc, #840]	; (1a000a38 <_fast_fill_16+0x3a8>)
1a0006f0:	f993 0000 	ldrsb.w	r0, [r3]
1a0006f4:	f002 f886 	bl	1a002804 <gpioWrite>
	gpioWrite(D4, OFF);
1a0006f8:	2100      	movs	r1, #0
1a0006fa:	4bd0      	ldr	r3, [pc, #832]	; (1a000a3c <_fast_fill_16+0x3ac>)
1a0006fc:	f993 0000 	ldrsb.w	r0, [r3]
1a000700:	f002 f880 	bl	1a002804 <gpioWrite>
	//REG_PIOD_CODR=0x0000064F;
	gpioWrite(D5, OFF);
1a000704:	2100      	movs	r1, #0
1a000706:	4bce      	ldr	r3, [pc, #824]	; (1a000a40 <_fast_fill_16+0x3b0>)
1a000708:	f993 0000 	ldrsb.w	r0, [r3]
1a00070c:	f002 f87a 	bl	1a002804 <gpioWrite>
	gpioWrite(D7, OFF);
1a000710:	2100      	movs	r1, #0
1a000712:	4bcc      	ldr	r3, [pc, #816]	; (1a000a44 <_fast_fill_16+0x3b4>)
1a000714:	f993 0000 	ldrsb.w	r0, [r3]
1a000718:	f002 f874 	bl	1a002804 <gpioWrite>
	gpioWrite(D11, OFF);
1a00071c:	2100      	movs	r1, #0
1a00071e:	4bca      	ldr	r3, [pc, #808]	; (1a000a48 <_fast_fill_16+0x3b8>)
1a000720:	f993 0000 	ldrsb.w	r0, [r3]
1a000724:	f002 f86e 	bl	1a002804 <gpioWrite>
	gpioWrite(D12, OFF);
1a000728:	2100      	movs	r1, #0
1a00072a:	4bc8      	ldr	r3, [pc, #800]	; (1a000a4c <_fast_fill_16+0x3bc>)
1a00072c:	f993 0000 	ldrsb.w	r0, [r3]
1a000730:	f002 f868 	bl	1a002804 <gpioWrite>
	gpioWrite(D13, OFF);
1a000734:	2100      	movs	r1, #0
1a000736:	4bc6      	ldr	r3, [pc, #792]	; (1a000a50 <_fast_fill_16+0x3c0>)
1a000738:	f993 0000 	ldrsb.w	r0, [r3]
1a00073c:	f002 f862 	bl	1a002804 <gpioWrite>
	gpioWrite(D14, OFF);
1a000740:	2100      	movs	r1, #0
1a000742:	4bc4      	ldr	r3, [pc, #784]	; (1a000a54 <_fast_fill_16+0x3c4>)
1a000744:	f993 0000 	ldrsb.w	r0, [r3]
1a000748:	f002 f85c 	bl	1a002804 <gpioWrite>
	gpioWrite(D15, OFF);
1a00074c:	2100      	movs	r1, #0
1a00074e:	4bc2      	ldr	r3, [pc, #776]	; (1a000a58 <_fast_fill_16+0x3c8>)
1a000750:	f993 0000 	ldrsb.w	r0, [r3]
1a000754:	f002 f856 	bl	1a002804 <gpioWrite>

	//REG_PIOA_SODR=((VH & 0x06)<<13) | ((VL & 0x40)<<1);   //pone en 1 los bits seleccionados por puerto
	if ((cl & 0x040)) {
1a000758:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00075c:	f040 80e6 	bne.w	1a00092c <_fast_fill_16+0x29c>
		gpioWrite(D6, ON);
	}
	if ((ch & 0x02)) {
1a000760:	f014 0f02 	tst.w	r4, #2
1a000764:	f040 80e9 	bne.w	1a00093a <_fast_fill_16+0x2aa>
		gpioWrite(D9, ON);
	}
	if ((ch & 0x04)) {
1a000768:	f014 0704 	ands.w	r7, r4, #4
1a00076c:	f040 80ec 	bne.w	1a000948 <_fast_fill_16+0x2b8>
		gpioWrite(D10, ON);
	}
	//(VH & 0x01) ? REG_PIOB_SODR = 0x4000000 : REG_PIOB_CODR = 0x4000000;
	if ((ch & 0x01)) {
1a000770:	f014 0f01 	tst.w	r4, #1
1a000774:	f040 80ef 	bne.w	1a000956 <_fast_fill_16+0x2c6>
		gpioWrite(D8, ON);
	}

	//REG_PIOC_SODR=((VL & 0x01)<<5) | ((VL & 0x02)<<3) | ((VL & 0x04)<<1) | ((VL & 0x08)>>1) | ((VL & 0x10)>>3);
	if ((cl & 0x01)) {
1a000778:	f015 0f01 	tst.w	r5, #1
1a00077c:	f040 80f2 	bne.w	1a000964 <_fast_fill_16+0x2d4>
		gpioWrite(D0, ON);
	}
	if ((cl & 0x02)) {
1a000780:	f015 0f02 	tst.w	r5, #2
1a000784:	f040 80f5 	bne.w	1a000972 <_fast_fill_16+0x2e2>
		gpioWrite(D1, ON);
	}
	if ((cl & 0x04)) {
1a000788:	f015 0f04 	tst.w	r5, #4
1a00078c:	f040 80f8 	bne.w	1a000980 <_fast_fill_16+0x2f0>
		gpioWrite(D2, ON);
	}
	if ((cl & 0x08)) {
1a000790:	f015 0f08 	tst.w	r5, #8
1a000794:	f040 80fb 	bne.w	1a00098e <_fast_fill_16+0x2fe>
		gpioWrite(D3, ON);
	}
	if ((cl & 0x010)) {
1a000798:	f015 0f10 	tst.w	r5, #16
1a00079c:	f040 80fe 	bne.w	1a00099c <_fast_fill_16+0x30c>
		gpioWrite(D4, ON);
	}
	//REG_PIOD_SODR=((VH & 0x78)>>3) | ((VH & 0x80)>>1) | ((VL & 0x20)<<5) | ((VL & 0x80)<<2);
	if ((cl & 0x020)) {
1a0007a0:	f015 0f20 	tst.w	r5, #32
1a0007a4:	f040 8101 	bne.w	1a0009aa <_fast_fill_16+0x31a>
		gpioWrite(D5, ON);
	}
	if ((cl & 0x080)) {
1a0007a8:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0007ac:	f040 8104 	bne.w	1a0009b8 <_fast_fill_16+0x328>
		gpioWrite(D7, ON);
	}
	if ((ch & 0x08)) {
1a0007b0:	f014 0508 	ands.w	r5, r4, #8
1a0007b4:	f040 8107 	bne.w	1a0009c6 <_fast_fill_16+0x336>
		gpioWrite(D11, ON);
	}
	if ((ch & 0x010)) {
1a0007b8:	f014 0f10 	tst.w	r4, #16
1a0007bc:	f040 810a 	bne.w	1a0009d4 <_fast_fill_16+0x344>
		gpioWrite(D12, ON);
	}
	if ((ch & 0x020)) {
1a0007c0:	f014 0f20 	tst.w	r4, #32
1a0007c4:	f040 810d 	bne.w	1a0009e2 <_fast_fill_16+0x352>
		gpioWrite(D13, ON);
	}
	if ((ch & 0x04)) {
1a0007c8:	2f00      	cmp	r7, #0
1a0007ca:	f040 8111 	bne.w	1a0009f0 <_fast_fill_16+0x360>
		gpioWrite(D14, ON);
	}
	if ((ch & 0x08)) {
1a0007ce:	2d00      	cmp	r5, #0
1a0007d0:	f040 8115 	bne.w	1a0009fe <_fast_fill_16+0x36e>
		gpioWrite(D15, ON);
	}

	blocks = pix / 16;
1a0007d4:	4637      	mov	r7, r6
1a0007d6:	2e00      	cmp	r6, #0
1a0007d8:	f2c0 8118 	blt.w	1a000a0c <_fast_fill_16+0x37c>
1a0007dc:	113f      	asrs	r7, r7, #4
	for (int i = 0; i < blocks; i++) {
1a0007de:	2500      	movs	r5, #0
1a0007e0:	42bd      	cmp	r5, r7
1a0007e2:	f280 8116 	bge.w	1a000a12 <_fast_fill_16+0x382>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0007e6:	4c9d      	ldr	r4, [pc, #628]	; (1a000a5c <_fast_fill_16+0x3cc>)
1a0007e8:	2100      	movs	r1, #0
1a0007ea:	f994 0000 	ldrsb.w	r0, [r4]
1a0007ee:	f002 f809 	bl	1a002804 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0007f2:	2101      	movs	r1, #1
1a0007f4:	f994 0000 	ldrsb.w	r0, [r4]
1a0007f8:	f002 f804 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0007fc:	2100      	movs	r1, #0
1a0007fe:	f994 0000 	ldrsb.w	r0, [r4]
1a000802:	f001 ffff 	bl	1a002804 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a000806:	2101      	movs	r1, #1
1a000808:	f994 0000 	ldrsb.w	r0, [r4]
1a00080c:	f001 fffa 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000810:	2100      	movs	r1, #0
1a000812:	f994 0000 	ldrsb.w	r0, [r4]
1a000816:	f001 fff5 	bl	1a002804 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00081a:	2101      	movs	r1, #1
1a00081c:	f994 0000 	ldrsb.w	r0, [r4]
1a000820:	f001 fff0 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000824:	2100      	movs	r1, #0
1a000826:	f994 0000 	ldrsb.w	r0, [r4]
1a00082a:	f001 ffeb 	bl	1a002804 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00082e:	2101      	movs	r1, #1
1a000830:	f994 0000 	ldrsb.w	r0, [r4]
1a000834:	f001 ffe6 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000838:	2100      	movs	r1, #0
1a00083a:	f994 0000 	ldrsb.w	r0, [r4]
1a00083e:	f001 ffe1 	bl	1a002804 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a000842:	2101      	movs	r1, #1
1a000844:	f994 0000 	ldrsb.w	r0, [r4]
1a000848:	f001 ffdc 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a00084c:	2100      	movs	r1, #0
1a00084e:	f994 0000 	ldrsb.w	r0, [r4]
1a000852:	f001 ffd7 	bl	1a002804 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a000856:	2101      	movs	r1, #1
1a000858:	f994 0000 	ldrsb.w	r0, [r4]
1a00085c:	f001 ffd2 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000860:	2100      	movs	r1, #0
1a000862:	f994 0000 	ldrsb.w	r0, [r4]
1a000866:	f001 ffcd 	bl	1a002804 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00086a:	2101      	movs	r1, #1
1a00086c:	f994 0000 	ldrsb.w	r0, [r4]
1a000870:	f001 ffc8 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000874:	2100      	movs	r1, #0
1a000876:	f994 0000 	ldrsb.w	r0, [r4]
1a00087a:	f001 ffc3 	bl	1a002804 <gpioWrite>
		// delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00087e:	2101      	movs	r1, #1
1a000880:	f994 0000 	ldrsb.w	r0, [r4]
1a000884:	f001 ffbe 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000888:	2100      	movs	r1, #0
1a00088a:	f994 0000 	ldrsb.w	r0, [r4]
1a00088e:	f001 ffb9 	bl	1a002804 <gpioWrite>
		// delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a000892:	2101      	movs	r1, #1
1a000894:	f994 0000 	ldrsb.w	r0, [r4]
1a000898:	f001 ffb4 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a00089c:	2100      	movs	r1, #0
1a00089e:	f994 0000 	ldrsb.w	r0, [r4]
1a0008a2:	f001 ffaf 	bl	1a002804 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0008a6:	2101      	movs	r1, #1
1a0008a8:	f994 0000 	ldrsb.w	r0, [r4]
1a0008ac:	f001 ffaa 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0008b0:	2100      	movs	r1, #0
1a0008b2:	f994 0000 	ldrsb.w	r0, [r4]
1a0008b6:	f001 ffa5 	bl	1a002804 <gpioWrite>
		// delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0008ba:	2101      	movs	r1, #1
1a0008bc:	f994 0000 	ldrsb.w	r0, [r4]
1a0008c0:	f001 ffa0 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0008c4:	2100      	movs	r1, #0
1a0008c6:	f994 0000 	ldrsb.w	r0, [r4]
1a0008ca:	f001 ff9b 	bl	1a002804 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0008ce:	2101      	movs	r1, #1
1a0008d0:	f994 0000 	ldrsb.w	r0, [r4]
1a0008d4:	f001 ff96 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0008d8:	2100      	movs	r1, #0
1a0008da:	f994 0000 	ldrsb.w	r0, [r4]
1a0008de:	f001 ff91 	bl	1a002804 <gpioWrite>
		// delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0008e2:	2101      	movs	r1, #1
1a0008e4:	f994 0000 	ldrsb.w	r0, [r4]
1a0008e8:	f001 ff8c 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a0008ec:	2100      	movs	r1, #0
1a0008ee:	f994 0000 	ldrsb.w	r0, [r4]
1a0008f2:	f001 ff87 	bl	1a002804 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a0008f6:	2101      	movs	r1, #1
1a0008f8:	f994 0000 	ldrsb.w	r0, [r4]
1a0008fc:	f001 ff82 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000900:	2100      	movs	r1, #0
1a000902:	f994 0000 	ldrsb.w	r0, [r4]
1a000906:	f001 ff7d 	bl	1a002804 <gpioWrite>
		// delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00090a:	2101      	movs	r1, #1
1a00090c:	f994 0000 	ldrsb.w	r0, [r4]
1a000910:	f001 ff78 	bl	1a002804 <gpioWrite>
		//pulse_low(P_WR, B_WR);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, OFF);
1a000914:	2100      	movs	r1, #0
1a000916:	f994 0000 	ldrsb.w	r0, [r4]
1a00091a:	f001 ff73 	bl	1a002804 <gpioWrite>
		//delayMicroseconds(1); //retardo minimo de 12nseg
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
		gpioWrite(WR, ON);
1a00091e:	2101      	movs	r1, #1
1a000920:	f994 0000 	ldrsb.w	r0, [r4]
1a000924:	f001 ff6e 	bl	1a002804 <gpioWrite>
	for (int i = 0; i < blocks; i++) {
1a000928:	3501      	adds	r5, #1
1a00092a:	e759      	b.n	1a0007e0 <_fast_fill_16+0x150>
		gpioWrite(D6, ON);
1a00092c:	2101      	movs	r1, #1
1a00092e:	4b3b      	ldr	r3, [pc, #236]	; (1a000a1c <_fast_fill_16+0x38c>)
1a000930:	f993 0000 	ldrsb.w	r0, [r3]
1a000934:	f001 ff66 	bl	1a002804 <gpioWrite>
1a000938:	e712      	b.n	1a000760 <_fast_fill_16+0xd0>
		gpioWrite(D9, ON);
1a00093a:	2101      	movs	r1, #1
1a00093c:	4b38      	ldr	r3, [pc, #224]	; (1a000a20 <_fast_fill_16+0x390>)
1a00093e:	f993 0000 	ldrsb.w	r0, [r3]
1a000942:	f001 ff5f 	bl	1a002804 <gpioWrite>
1a000946:	e70f      	b.n	1a000768 <_fast_fill_16+0xd8>
		gpioWrite(D10, ON);
1a000948:	2101      	movs	r1, #1
1a00094a:	4b36      	ldr	r3, [pc, #216]	; (1a000a24 <_fast_fill_16+0x394>)
1a00094c:	f993 0000 	ldrsb.w	r0, [r3]
1a000950:	f001 ff58 	bl	1a002804 <gpioWrite>
1a000954:	e70c      	b.n	1a000770 <_fast_fill_16+0xe0>
		gpioWrite(D8, ON);
1a000956:	2101      	movs	r1, #1
1a000958:	4b33      	ldr	r3, [pc, #204]	; (1a000a28 <_fast_fill_16+0x398>)
1a00095a:	f993 0000 	ldrsb.w	r0, [r3]
1a00095e:	f001 ff51 	bl	1a002804 <gpioWrite>
1a000962:	e709      	b.n	1a000778 <_fast_fill_16+0xe8>
		gpioWrite(D0, ON);
1a000964:	2101      	movs	r1, #1
1a000966:	4b31      	ldr	r3, [pc, #196]	; (1a000a2c <_fast_fill_16+0x39c>)
1a000968:	f993 0000 	ldrsb.w	r0, [r3]
1a00096c:	f001 ff4a 	bl	1a002804 <gpioWrite>
1a000970:	e706      	b.n	1a000780 <_fast_fill_16+0xf0>
		gpioWrite(D1, ON);
1a000972:	2101      	movs	r1, #1
1a000974:	4b2e      	ldr	r3, [pc, #184]	; (1a000a30 <_fast_fill_16+0x3a0>)
1a000976:	f993 0000 	ldrsb.w	r0, [r3]
1a00097a:	f001 ff43 	bl	1a002804 <gpioWrite>
1a00097e:	e703      	b.n	1a000788 <_fast_fill_16+0xf8>
		gpioWrite(D2, ON);
1a000980:	2101      	movs	r1, #1
1a000982:	4b2c      	ldr	r3, [pc, #176]	; (1a000a34 <_fast_fill_16+0x3a4>)
1a000984:	f993 0000 	ldrsb.w	r0, [r3]
1a000988:	f001 ff3c 	bl	1a002804 <gpioWrite>
1a00098c:	e700      	b.n	1a000790 <_fast_fill_16+0x100>
		gpioWrite(D3, ON);
1a00098e:	2101      	movs	r1, #1
1a000990:	4b29      	ldr	r3, [pc, #164]	; (1a000a38 <_fast_fill_16+0x3a8>)
1a000992:	f993 0000 	ldrsb.w	r0, [r3]
1a000996:	f001 ff35 	bl	1a002804 <gpioWrite>
1a00099a:	e6fd      	b.n	1a000798 <_fast_fill_16+0x108>
		gpioWrite(D4, ON);
1a00099c:	2101      	movs	r1, #1
1a00099e:	4b27      	ldr	r3, [pc, #156]	; (1a000a3c <_fast_fill_16+0x3ac>)
1a0009a0:	f993 0000 	ldrsb.w	r0, [r3]
1a0009a4:	f001 ff2e 	bl	1a002804 <gpioWrite>
1a0009a8:	e6fa      	b.n	1a0007a0 <_fast_fill_16+0x110>
		gpioWrite(D5, ON);
1a0009aa:	2101      	movs	r1, #1
1a0009ac:	4b24      	ldr	r3, [pc, #144]	; (1a000a40 <_fast_fill_16+0x3b0>)
1a0009ae:	f993 0000 	ldrsb.w	r0, [r3]
1a0009b2:	f001 ff27 	bl	1a002804 <gpioWrite>
1a0009b6:	e6f7      	b.n	1a0007a8 <_fast_fill_16+0x118>
		gpioWrite(D7, ON);
1a0009b8:	2101      	movs	r1, #1
1a0009ba:	4b22      	ldr	r3, [pc, #136]	; (1a000a44 <_fast_fill_16+0x3b4>)
1a0009bc:	f993 0000 	ldrsb.w	r0, [r3]
1a0009c0:	f001 ff20 	bl	1a002804 <gpioWrite>
1a0009c4:	e6f4      	b.n	1a0007b0 <_fast_fill_16+0x120>
		gpioWrite(D11, ON);
1a0009c6:	2101      	movs	r1, #1
1a0009c8:	4b1f      	ldr	r3, [pc, #124]	; (1a000a48 <_fast_fill_16+0x3b8>)
1a0009ca:	f993 0000 	ldrsb.w	r0, [r3]
1a0009ce:	f001 ff19 	bl	1a002804 <gpioWrite>
1a0009d2:	e6f1      	b.n	1a0007b8 <_fast_fill_16+0x128>
		gpioWrite(D12, ON);
1a0009d4:	2101      	movs	r1, #1
1a0009d6:	4b1d      	ldr	r3, [pc, #116]	; (1a000a4c <_fast_fill_16+0x3bc>)
1a0009d8:	f993 0000 	ldrsb.w	r0, [r3]
1a0009dc:	f001 ff12 	bl	1a002804 <gpioWrite>
1a0009e0:	e6ee      	b.n	1a0007c0 <_fast_fill_16+0x130>
		gpioWrite(D13, ON);
1a0009e2:	2101      	movs	r1, #1
1a0009e4:	4b1a      	ldr	r3, [pc, #104]	; (1a000a50 <_fast_fill_16+0x3c0>)
1a0009e6:	f993 0000 	ldrsb.w	r0, [r3]
1a0009ea:	f001 ff0b 	bl	1a002804 <gpioWrite>
1a0009ee:	e6eb      	b.n	1a0007c8 <_fast_fill_16+0x138>
		gpioWrite(D14, ON);
1a0009f0:	2101      	movs	r1, #1
1a0009f2:	4b18      	ldr	r3, [pc, #96]	; (1a000a54 <_fast_fill_16+0x3c4>)
1a0009f4:	f993 0000 	ldrsb.w	r0, [r3]
1a0009f8:	f001 ff04 	bl	1a002804 <gpioWrite>
1a0009fc:	e6e7      	b.n	1a0007ce <_fast_fill_16+0x13e>
		gpioWrite(D15, ON);
1a0009fe:	2101      	movs	r1, #1
1a000a00:	4b15      	ldr	r3, [pc, #84]	; (1a000a58 <_fast_fill_16+0x3c8>)
1a000a02:	f993 0000 	ldrsb.w	r0, [r3]
1a000a06:	f001 fefd 	bl	1a002804 <gpioWrite>
1a000a0a:	e6e3      	b.n	1a0007d4 <_fast_fill_16+0x144>
	blocks = pix / 16;
1a000a0c:	f106 070f 	add.w	r7, r6, #15
1a000a10:	e6e4      	b.n	1a0007dc <_fast_fill_16+0x14c>
	}
	if ((pix % 16) != 0)
1a000a12:	f016 0f0f 	tst.w	r6, #15
1a000a16:	d139      	bne.n	1a000a8c <_fast_fill_16+0x3fc>
			//delayMicroseconds(1); //retardo minimo de 12nseg
			//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111101111111) | 0b00000000000000000000000010000000; //PC7-WR
			gpioWrite(WR, ON);

		}
}
1a000a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000a1a:	bf00      	nop
1a000a1c:	10000ce8 	.word	0x10000ce8
1a000a20:	10000c70 	.word	0x10000c70
1a000a24:	10000ca0 	.word	0x10000ca0
1a000a28:	10000cb5 	.word	0x10000cb5
1a000a2c:	10000c7d 	.word	0x10000c7d
1a000a30:	10000cdc 	.word	0x10000cdc
1a000a34:	10000caf 	.word	0x10000caf
1a000a38:	10000c60 	.word	0x10000c60
1a000a3c:	10000ccd 	.word	0x10000ccd
1a000a40:	10000cae 	.word	0x10000cae
1a000a44:	10000cdf 	.word	0x10000cdf
1a000a48:	10000c88 	.word	0x10000c88
1a000a4c:	10000ca2 	.word	0x10000ca2
1a000a50:	10000cd5 	.word	0x10000cd5
1a000a54:	10000cd4 	.word	0x10000cd4
1a000a58:	10000cd6 	.word	0x10000cd6
1a000a5c:	10000c69 	.word	0x10000c69
			gpioWrite(WR, OFF);
1a000a60:	4d0b      	ldr	r5, [pc, #44]	; (1a000a90 <_fast_fill_16+0x400>)
1a000a62:	2100      	movs	r1, #0
1a000a64:	f995 0000 	ldrsb.w	r0, [r5]
1a000a68:	f001 fecc 	bl	1a002804 <gpioWrite>
			gpioWrite(WR, ON);
1a000a6c:	2101      	movs	r1, #1
1a000a6e:	f995 0000 	ldrsb.w	r0, [r5]
1a000a72:	f001 fec7 	bl	1a002804 <gpioWrite>
		for (int i = 0; i < (pix % 16) + 1; i++) {
1a000a76:	3401      	adds	r4, #1
1a000a78:	4272      	negs	r2, r6
1a000a7a:	f006 030f 	and.w	r3, r6, #15
1a000a7e:	f002 020f 	and.w	r2, r2, #15
1a000a82:	bf58      	it	pl
1a000a84:	4253      	negpl	r3, r2
1a000a86:	42a3      	cmp	r3, r4
1a000a88:	daea      	bge.n	1a000a60 <_fast_fill_16+0x3d0>
1a000a8a:	e7c5      	b.n	1a000a18 <_fast_fill_16+0x388>
1a000a8c:	2400      	movs	r4, #0
1a000a8e:	e7f3      	b.n	1a000a78 <_fast_fill_16+0x3e8>
1a000a90:	10000c69 	.word	0x10000c69

1a000a94 <setXY>:

void setXY(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2) {
1a000a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000a96:	4605      	mov	r5, r0
1a000a98:	460f      	mov	r7, r1
1a000a9a:	4614      	mov	r4, r2
1a000a9c:	461e      	mov	r6, r3
	if (orient == LANDSCAPE) {
1a000a9e:	4b1a      	ldr	r3, [pc, #104]	; (1a000b08 <setXY+0x74>)
1a000aa0:	781a      	ldrb	r2, [r3, #0]
1a000aa2:	4b1a      	ldr	r3, [pc, #104]	; (1a000b0c <setXY+0x78>)
1a000aa4:	781b      	ldrb	r3, [r3, #0]
1a000aa6:	429a      	cmp	r2, r3
1a000aa8:	d025      	beq.n	1a000af6 <setXY+0x62>
		y2 = disp_y_size - y2;
	swap(uint32_t, y1, y2)
}
swap(uint32_t, x1, y1);
swap(uint32_t, x2, y2);
LCD_Write_COM(0x2a);
1a000aaa:	202a      	movs	r0, #42	; 0x2a
1a000aac:	f7ff fdc8 	bl	1a000640 <LCD_Write_COM>
LCD_Write_DATA(x1 >> 8);
1a000ab0:	f3c7 2007 	ubfx	r0, r7, #8, #8
1a000ab4:	f7ff fdb0 	bl	1a000618 <LCD_Write_DATA>
LCD_Write_DATA(x1);
1a000ab8:	b2f8      	uxtb	r0, r7
1a000aba:	f7ff fdad 	bl	1a000618 <LCD_Write_DATA>
LCD_Write_DATA(x2 >> 8);
1a000abe:	f3c6 2007 	ubfx	r0, r6, #8, #8
1a000ac2:	f7ff fda9 	bl	1a000618 <LCD_Write_DATA>
LCD_Write_DATA(x2);
1a000ac6:	b2f0      	uxtb	r0, r6
1a000ac8:	f7ff fda6 	bl	1a000618 <LCD_Write_DATA>
LCD_Write_COM(0x2b);
1a000acc:	202b      	movs	r0, #43	; 0x2b
1a000ace:	f7ff fdb7 	bl	1a000640 <LCD_Write_COM>
LCD_Write_DATA(y1 >> 8);
1a000ad2:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a000ad6:	f7ff fd9f 	bl	1a000618 <LCD_Write_DATA>
LCD_Write_DATA(y1);
1a000ada:	b2e8      	uxtb	r0, r5
1a000adc:	f7ff fd9c 	bl	1a000618 <LCD_Write_DATA>
LCD_Write_DATA(y2 >> 8);
1a000ae0:	f3c4 2007 	ubfx	r0, r4, #8, #8
1a000ae4:	f7ff fd98 	bl	1a000618 <LCD_Write_DATA>
LCD_Write_DATA(y2);
1a000ae8:	b2e0      	uxtb	r0, r4
1a000aea:	f7ff fd95 	bl	1a000618 <LCD_Write_DATA>
LCD_Write_COM(0x2c);
1a000aee:	202c      	movs	r0, #44	; 0x2c
1a000af0:	f7ff fda6 	bl	1a000640 <LCD_Write_COM>
}
1a000af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		y1=disp_y_size-y1;
1a000af6:	4b06      	ldr	r3, [pc, #24]	; (1a000b10 <setXY+0x7c>)
1a000af8:	681b      	ldr	r3, [r3, #0]
		y2 = disp_y_size - y2;
1a000afa:	1b1a      	subs	r2, r3, r4
		swap(uint32_t, x2, y2)
1a000afc:	4634      	mov	r4, r6
	swap(uint32_t, y1, y2)
1a000afe:	1a1e      	subs	r6, r3, r0
		swap(uint32_t, x1, y1);
1a000b00:	460d      	mov	r5, r1
	swap(uint32_t, y1, y2)
1a000b02:	4617      	mov	r7, r2
1a000b04:	e7d1      	b.n	1a000aaa <setXY+0x16>
1a000b06:	bf00      	nop
1a000b08:	10000bf8 	.word	0x10000bf8
1a000b0c:	10000be8 	.word	0x10000be8
1a000b10:	10000c6c 	.word	0x10000c6c

1a000b14 <clrXY>:
void clrXY(void) {
1a000b14:	b508      	push	{r3, lr}
	if (orient == PORTRAIT)
1a000b16:	4b0c      	ldr	r3, [pc, #48]	; (1a000b48 <clrXY+0x34>)
1a000b18:	781a      	ldrb	r2, [r3, #0]
1a000b1a:	4b0c      	ldr	r3, [pc, #48]	; (1a000b4c <clrXY+0x38>)
1a000b1c:	781b      	ldrb	r3, [r3, #0]
1a000b1e:	429a      	cmp	r2, r3
1a000b20:	d008      	beq.n	1a000b34 <clrXY+0x20>
		setXY(0, 0, disp_y_size, disp_x_size);
1a000b22:	4b0b      	ldr	r3, [pc, #44]	; (1a000b50 <clrXY+0x3c>)
1a000b24:	681b      	ldr	r3, [r3, #0]
1a000b26:	4a0b      	ldr	r2, [pc, #44]	; (1a000b54 <clrXY+0x40>)
1a000b28:	6812      	ldr	r2, [r2, #0]
1a000b2a:	2100      	movs	r1, #0
1a000b2c:	4608      	mov	r0, r1
1a000b2e:	f7ff ffb1 	bl	1a000a94 <setXY>
}
1a000b32:	bd08      	pop	{r3, pc}
		setXY(0, 0, disp_x_size, disp_y_size);
1a000b34:	4b07      	ldr	r3, [pc, #28]	; (1a000b54 <clrXY+0x40>)
1a000b36:	681b      	ldr	r3, [r3, #0]
1a000b38:	4a05      	ldr	r2, [pc, #20]	; (1a000b50 <clrXY+0x3c>)
1a000b3a:	6812      	ldr	r2, [r2, #0]
1a000b3c:	2100      	movs	r1, #0
1a000b3e:	4608      	mov	r0, r1
1a000b40:	f7ff ffa8 	bl	1a000a94 <setXY>
1a000b44:	e7f5      	b.n	1a000b32 <clrXY+0x1e>
1a000b46:	bf00      	nop
1a000b48:	10000bf8 	.word	0x10000bf8
1a000b4c:	10000c40 	.word	0x10000c40
1a000b50:	10000ce4 	.word	0x10000ce4
1a000b54:	10000c6c 	.word	0x10000c6c

1a000b58 <clrScr>:
void clrScr(void) {
1a000b58:	b510      	push	{r4, lr}
	gpioWrite(CS, OFF);
1a000b5a:	2100      	movs	r1, #0
1a000b5c:	4b25      	ldr	r3, [pc, #148]	; (1a000bf4 <clrScr+0x9c>)
1a000b5e:	f993 0000 	ldrsb.w	r0, [r3]
1a000b62:	f001 fe4f 	bl	1a002804 <gpioWrite>
	clrXY();
1a000b66:	f7ff ffd5 	bl	1a000b14 <clrXY>
	if (display_transfer_mode != 1)
1a000b6a:	4b23      	ldr	r3, [pc, #140]	; (1a000bf8 <clrScr+0xa0>)
1a000b6c:	681b      	ldr	r3, [r3, #0]
1a000b6e:	2b01      	cmp	r3, #1
1a000b70:	d105      	bne.n	1a000b7e <clrScr+0x26>
	if (display_transfer_mode == 16)
1a000b72:	4b21      	ldr	r3, [pc, #132]	; (1a000bf8 <clrScr+0xa0>)
1a000b74:	681b      	ldr	r3, [r3, #0]
1a000b76:	2b10      	cmp	r3, #16
1a000b78:	d008      	beq.n	1a000b8c <clrScr+0x34>
		for (i = 0; i < ((disp_x_size + 1) * (disp_y_size + 1)); i++) {
1a000b7a:	2400      	movs	r4, #0
1a000b7c:	e020      	b.n	1a000bc0 <clrScr+0x68>
		gpioWrite(RS, ON);
1a000b7e:	2101      	movs	r1, #1
1a000b80:	4b1e      	ldr	r3, [pc, #120]	; (1a000bfc <clrScr+0xa4>)
1a000b82:	f993 0000 	ldrsb.w	r0, [r3]
1a000b86:	f001 fe3d 	bl	1a002804 <gpioWrite>
1a000b8a:	e7f2      	b.n	1a000b72 <clrScr+0x1a>
		_fast_fill_16(0, 0, ((disp_x_size + 1) * (disp_y_size + 1)));
1a000b8c:	4b1c      	ldr	r3, [pc, #112]	; (1a000c00 <clrScr+0xa8>)
1a000b8e:	681b      	ldr	r3, [r3, #0]
1a000b90:	4a1c      	ldr	r2, [pc, #112]	; (1a000c04 <clrScr+0xac>)
1a000b92:	6812      	ldr	r2, [r2, #0]
1a000b94:	3201      	adds	r2, #1
1a000b96:	fb03 2202 	mla	r2, r3, r2, r2
1a000b9a:	2100      	movs	r1, #0
1a000b9c:	4608      	mov	r0, r1
1a000b9e:	f7ff fd77 	bl	1a000690 <_fast_fill_16>
	gpioWrite(CS, ON);
1a000ba2:	2101      	movs	r1, #1
1a000ba4:	4b13      	ldr	r3, [pc, #76]	; (1a000bf4 <clrScr+0x9c>)
1a000ba6:	f993 0000 	ldrsb.w	r0, [r3]
1a000baa:	f001 fe2b 	bl	1a002804 <gpioWrite>
	clrXY();
1a000bae:	f7ff ffb1 	bl	1a000b14 <clrXY>
}
1a000bb2:	bd10      	pop	{r4, pc}
				LCD_Writ_Bus(0, 0, display_transfer_mode);
1a000bb4:	b2d2      	uxtb	r2, r2
1a000bb6:	2100      	movs	r1, #0
1a000bb8:	4608      	mov	r0, r1
1a000bba:	f7ff fbfd 	bl	1a0003b8 <LCD_Writ_Bus>
		for (i = 0; i < ((disp_x_size + 1) * (disp_y_size + 1)); i++) {
1a000bbe:	3401      	adds	r4, #1
1a000bc0:	4b0f      	ldr	r3, [pc, #60]	; (1a000c00 <clrScr+0xa8>)
1a000bc2:	681a      	ldr	r2, [r3, #0]
1a000bc4:	4b0f      	ldr	r3, [pc, #60]	; (1a000c04 <clrScr+0xac>)
1a000bc6:	681b      	ldr	r3, [r3, #0]
1a000bc8:	3301      	adds	r3, #1
1a000bca:	fb02 3303 	mla	r3, r2, r3, r3
1a000bce:	42a3      	cmp	r3, r4
1a000bd0:	dde7      	ble.n	1a000ba2 <clrScr+0x4a>
			if (display_transfer_mode != 1)
1a000bd2:	4b09      	ldr	r3, [pc, #36]	; (1a000bf8 <clrScr+0xa0>)
1a000bd4:	681a      	ldr	r2, [r3, #0]
1a000bd6:	2a01      	cmp	r2, #1
1a000bd8:	d1ec      	bne.n	1a000bb4 <clrScr+0x5c>
				LCD_Writ_Bus(1, 0, display_transfer_mode);
1a000bda:	b2d2      	uxtb	r2, r2
1a000bdc:	2100      	movs	r1, #0
1a000bde:	2001      	movs	r0, #1
1a000be0:	f7ff fbea 	bl	1a0003b8 <LCD_Writ_Bus>
				LCD_Writ_Bus(1, 0, display_transfer_mode);
1a000be4:	4b04      	ldr	r3, [pc, #16]	; (1a000bf8 <clrScr+0xa0>)
1a000be6:	781a      	ldrb	r2, [r3, #0]
1a000be8:	2100      	movs	r1, #0
1a000bea:	2001      	movs	r0, #1
1a000bec:	f7ff fbe4 	bl	1a0003b8 <LCD_Writ_Bus>
1a000bf0:	e7e5      	b.n	1a000bbe <clrScr+0x66>
1a000bf2:	bf00      	nop
1a000bf4:	10000ce1 	.word	0x10000ce1
1a000bf8:	10000c8c 	.word	0x10000c8c
1a000bfc:	10000ce0 	.word	0x10000ce0
1a000c00:	10000ce4 	.word	0x10000ce4
1a000c04:	10000c6c 	.word	0x10000c6c

1a000c08 <setFont>:


//para establecer el tipo de letra
void setFont(uint8_t* font) {
cfont.font = font;
1a000c08:	4b05      	ldr	r3, [pc, #20]	; (1a000c20 <setFont+0x18>)
1a000c0a:	6018      	str	r0, [r3, #0]
cfont.x_size = fontbyte(0);
1a000c0c:	7802      	ldrb	r2, [r0, #0]
1a000c0e:	711a      	strb	r2, [r3, #4]
cfont.y_size = fontbyte(1);
1a000c10:	7842      	ldrb	r2, [r0, #1]
1a000c12:	715a      	strb	r2, [r3, #5]
cfont.offset = fontbyte(2);
1a000c14:	7882      	ldrb	r2, [r0, #2]
1a000c16:	719a      	strb	r2, [r3, #6]
cfont.numchars = fontbyte(3);
1a000c18:	78c2      	ldrb	r2, [r0, #3]
1a000c1a:	71da      	strb	r2, [r3, #7]
}
1a000c1c:	4770      	bx	lr
1a000c1e:	bf00      	nop
1a000c20:	10000cc0 	.word	0x10000cc0

1a000c24 <initlcd>:
	setBackColorb(0, 0, 0);
	cfont.font = 0;
	_transparent = false;
}

void initlcd(void) {
1a000c24:	b508      	push	{r3, lr}
	LCD_Write_COM(0xE2);    //PLL multiplier, set PLL clock to 120M
1a000c26:	20e2      	movs	r0, #226	; 0xe2
1a000c28:	f7ff fd0a 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x23);     //N=0x36 for 6.5M, 0x23 for 10M crystal
1a000c2c:	2023      	movs	r0, #35	; 0x23
1a000c2e:	f7ff fcf3 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x02);   //frecuencia pll a 120mhz
1a000c32:	2002      	movs	r0, #2
1a000c34:	f7ff fcf0 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x04);
1a000c38:	2004      	movs	r0, #4
1a000c3a:	f7ff fced 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_COM(0xE0);    // PLL enable
1a000c3e:	20e0      	movs	r0, #224	; 0xe0
1a000c40:	f7ff fcfe 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x01);
1a000c44:	2001      	movs	r0, #1
1a000c46:	f7ff fce7 	bl	1a000618 <LCD_Write_DATA>
	delay(1);
1a000c4a:	2001      	movs	r0, #1
1a000c4c:	2100      	movs	r1, #0
1a000c4e:	f001 fe57 	bl	1a002900 <delay>
	//delay(10);
	LCD_Write_COM(0xE0);
1a000c52:	20e0      	movs	r0, #224	; 0xe0
1a000c54:	f7ff fcf4 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x03);
1a000c58:	2003      	movs	r0, #3
1a000c5a:	f7ff fcdd 	bl	1a000618 <LCD_Write_DATA>
	delay(1);
1a000c5e:	2001      	movs	r0, #1
1a000c60:	2100      	movs	r1, #0
1a000c62:	f001 fe4d 	bl	1a002900 <delay>
	//delay_us(100);
	LCD_Write_COM(0x01);    // software reset
1a000c66:	2001      	movs	r0, #1
1a000c68:	f7ff fcea 	bl	1a000640 <LCD_Write_COM>
	delay(5);
1a000c6c:	2005      	movs	r0, #5
1a000c6e:	2100      	movs	r1, #0
1a000c70:	f001 fe46 	bl	1a002900 <delay>
	//delay_us(500);
	LCD_Write_COM(0xE6);    //PLL setting for PCLK, depends on resolution
1a000c74:	20e6      	movs	r0, #230	; 0xe6
1a000c76:	f7ff fce3 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x04);   //para 3.43mhz de clock
1a000c7a:	2004      	movs	r0, #4
1a000c7c:	f7ff fccc 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x93);
1a000c80:	2093      	movs	r0, #147	; 0x93
1a000c82:	f7ff fcc9 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0xE0);
1a000c86:	20e0      	movs	r0, #224	; 0xe0
1a000c88:	f7ff fcc6 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xB0);    //LCD SPECIFICATION
1a000c8c:	20b0      	movs	r0, #176	; 0xb0
1a000c8e:	f7ff fcd7 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x00); // 0x24
1a000c92:	2000      	movs	r0, #0
1a000c94:	f7ff fcc0 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);
1a000c98:	2000      	movs	r0, #0
1a000c9a:	f7ff fcbd 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x03);   //Set HDP 799
1a000c9e:	2003      	movs	r0, #3
1a000ca0:	f7ff fcba 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x1F);
1a000ca4:	201f      	movs	r0, #31
1a000ca6:	f7ff fcb7 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x01);   //Set VDP 479
1a000caa:	2001      	movs	r0, #1
1a000cac:	f7ff fcb4 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0xDF);
1a000cb0:	20df      	movs	r0, #223	; 0xdf
1a000cb2:	f7ff fcb1 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);
1a000cb6:	2000      	movs	r0, #0
1a000cb8:	f7ff fcae 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xB4);    //HSYNC
1a000cbc:	20b4      	movs	r0, #180	; 0xb4
1a000cbe:	f7ff fcbf 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x03);   //Set HT  928
1a000cc2:	2003      	movs	r0, #3
1a000cc4:	f7ff fca8 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0xA0);
1a000cc8:	20a0      	movs	r0, #160	; 0xa0
1a000cca:	f7ff fca5 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);   //Set HPS 46
1a000cce:	2000      	movs	r0, #0
1a000cd0:	f7ff fca2 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x2E);
1a000cd4:	202e      	movs	r0, #46	; 0x2e
1a000cd6:	f7ff fc9f 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x30);   //Set HPW 48
1a000cda:	2030      	movs	r0, #48	; 0x30
1a000cdc:	f7ff fc9c 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);   //Set LPS 15
1a000ce0:	2000      	movs	r0, #0
1a000ce2:	f7ff fc99 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x0F);
1a000ce6:	200f      	movs	r0, #15
1a000ce8:	f7ff fc96 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);
1a000cec:	2000      	movs	r0, #0
1a000cee:	f7ff fc93 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xB6);    //VSYNC
1a000cf2:	20b6      	movs	r0, #182	; 0xb6
1a000cf4:	f7ff fca4 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x02);   //Set VT  525
1a000cf8:	2002      	movs	r0, #2
1a000cfa:	f7ff fc8d 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x0D);
1a000cfe:	200d      	movs	r0, #13
1a000d00:	f7ff fc8a 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);   //Set VPS 16
1a000d04:	2000      	movs	r0, #0
1a000d06:	f7ff fc87 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x10);
1a000d0a:	2010      	movs	r0, #16
1a000d0c:	f7ff fc84 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x10);   //Set VPW 16
1a000d10:	2010      	movs	r0, #16
1a000d12:	f7ff fc81 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);   //Set FPS 8
1a000d16:	2000      	movs	r0, #0
1a000d18:	f7ff fc7e 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x08);
1a000d1c:	2008      	movs	r0, #8
1a000d1e:	f7ff fc7b 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xBA);
1a000d22:	20ba      	movs	r0, #186	; 0xba
1a000d24:	f7ff fc8c 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x05);   //GPIO[3:0] out 1
1a000d28:	2005      	movs	r0, #5
1a000d2a:	f7ff fc75 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xB8);
1a000d2e:	20b8      	movs	r0, #184	; 0xb8
1a000d30:	f7ff fc86 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x07);     //GPIO3=input, GPIO[2:0]=output
1a000d34:	2007      	movs	r0, #7
1a000d36:	f7ff fc6f 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x01);   //GPIO0 normal
1a000d3a:	2001      	movs	r0, #1
1a000d3c:	f7ff fc6c 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0x36);    //rotation
1a000d40:	2036      	movs	r0, #54	; 0x36
1a000d42:	f7ff fc7d 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x22);   // -- Set to 0x21 to rotate 180 degrees
1a000d46:	2022      	movs	r0, #34	; 0x22
1a000d48:	f7ff fc66 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xF0);    //pixel data interface
1a000d4c:	20f0      	movs	r0, #240	; 0xf0
1a000d4e:	f7ff fc77 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x03);
1a000d52:	2003      	movs	r0, #3
1a000d54:	f7ff fc60 	bl	1a000618 <LCD_Write_DATA>

	delay(1);
1a000d58:	2001      	movs	r0, #1
1a000d5a:	2100      	movs	r1, #0
1a000d5c:	f001 fdd0 	bl	1a002900 <delay>
	//delay_us(100);

	setXY(0, 0, 799, 479);
1a000d60:	f240 13df 	movw	r3, #479	; 0x1df
1a000d64:	f240 321f 	movw	r2, #799	; 0x31f
1a000d68:	2100      	movs	r1, #0
1a000d6a:	4608      	mov	r0, r1
1a000d6c:	f7ff fe92 	bl	1a000a94 <setXY>
	LCD_Write_COM(0x29);    //display on
1a000d70:	2029      	movs	r0, #41	; 0x29
1a000d72:	f7ff fc65 	bl	1a000640 <LCD_Write_COM>

	LCD_Write_COM(0xBE);    //set PWM for B/L
1a000d76:	20be      	movs	r0, #190	; 0xbe
1a000d78:	f7ff fc62 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x06);
1a000d7c:	2006      	movs	r0, #6
1a000d7e:	f7ff fc4b 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0xF0);
1a000d82:	20f0      	movs	r0, #240	; 0xf0
1a000d84:	f7ff fc48 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x01);
1a000d88:	2001      	movs	r0, #1
1a000d8a:	f7ff fc45 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0xF0);
1a000d8e:	20f0      	movs	r0, #240	; 0xf0
1a000d90:	f7ff fc42 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);
1a000d94:	2000      	movs	r0, #0
1a000d96:	f7ff fc3f 	bl	1a000618 <LCD_Write_DATA>
	LCD_Write_DATA(0x00);
1a000d9a:	2000      	movs	r0, #0
1a000d9c:	f7ff fc3c 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0xD0);
1a000da0:	20d0      	movs	r0, #208	; 0xd0
1a000da2:	f7ff fc4d 	bl	1a000640 <LCD_Write_COM>
	LCD_Write_DATA(0x0D);
1a000da6:	200d      	movs	r0, #13
1a000da8:	f7ff fc36 	bl	1a000618 <LCD_Write_DATA>

	LCD_Write_COM(0x2C);
1a000dac:	202c      	movs	r0, #44	; 0x2c
1a000dae:	f7ff fc47 	bl	1a000640 <LCD_Write_COM>

}
1a000db2:	bd08      	pop	{r3, pc}

1a000db4 <setColorb>:
 */

#ifndef LCDFGRAFICOS_H_
#define LCDFGRAFICOS_H_
void setColorb(uint8_t r, uint8_t g, uint8_t b) {
	fch = ((r & 248) | g >> 5);
1a000db4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
1a000db8:	b240      	sxtb	r0, r0
1a000dba:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
1a000dbe:	4b05      	ldr	r3, [pc, #20]	; (1a000dd4 <setColorb+0x20>)
1a000dc0:	7018      	strb	r0, [r3, #0]
	fcl = ((g & 28) << 3 | b >> 3);
1a000dc2:	00c9      	lsls	r1, r1, #3
1a000dc4:	f021 011f 	bic.w	r1, r1, #31
1a000dc8:	b249      	sxtb	r1, r1
1a000dca:	ea41 02d2 	orr.w	r2, r1, r2, lsr #3
1a000dce:	4b02      	ldr	r3, [pc, #8]	; (1a000dd8 <setColorb+0x24>)
1a000dd0:	701a      	strb	r2, [r3, #0]
}
1a000dd2:	4770      	bx	lr
1a000dd4:	10000c61 	.word	0x10000c61
1a000dd8:	10000c68 	.word	0x10000c68

1a000ddc <setColor>:

void setColor(int color) {
	//fch=Byte(color>>8);
	//fcl=Byte(color & 0xFF);
	fch = (color >> 8);
1a000ddc:	1202      	asrs	r2, r0, #8
1a000dde:	4b02      	ldr	r3, [pc, #8]	; (1a000de8 <setColor+0xc>)
1a000de0:	701a      	strb	r2, [r3, #0]
	fcl = (color & 0xFF);
1a000de2:	4b02      	ldr	r3, [pc, #8]	; (1a000dec <setColor+0x10>)
1a000de4:	7018      	strb	r0, [r3, #0]
}
1a000de6:	4770      	bx	lr
1a000de8:	10000c61 	.word	0x10000c61
1a000dec:	10000c68 	.word	0x10000c68

1a000df0 <setBackColorb>:

void setBackColorb(uint8_t r, uint8_t g, uint8_t b) {
	bch = ((r & 248) | g >> 5);
1a000df0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
1a000df4:	b240      	sxtb	r0, r0
1a000df6:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
1a000dfa:	4b07      	ldr	r3, [pc, #28]	; (1a000e18 <setBackColorb+0x28>)
1a000dfc:	7018      	strb	r0, [r3, #0]
	bcl = ((g & 28) << 3 | b >> 3);
1a000dfe:	00c9      	lsls	r1, r1, #3
1a000e00:	f021 011f 	bic.w	r1, r1, #31
1a000e04:	b249      	sxtb	r1, r1
1a000e06:	ea41 02d2 	orr.w	r2, r1, r2, lsr #3
1a000e0a:	4b04      	ldr	r3, [pc, #16]	; (1a000e1c <setBackColorb+0x2c>)
1a000e0c:	701a      	strb	r2, [r3, #0]
	_transparent = false;
1a000e0e:	4b04      	ldr	r3, [pc, #16]	; (1a000e20 <setBackColorb+0x30>)
1a000e10:	2200      	movs	r2, #0
1a000e12:	701a      	strb	r2, [r3, #0]
}
1a000e14:	4770      	bx	lr
1a000e16:	bf00      	nop
1a000e18:	10000cac 	.word	0x10000cac
1a000e1c:	10000ca1 	.word	0x10000ca1
1a000e20:	10000cad 	.word	0x10000cad

1a000e24 <inicioLCD>:
void inicioLCD(uint8_t orientation) {
1a000e24:	b510      	push	{r4, lr}
	orient = orientation;
1a000e26:	4b1d      	ldr	r3, [pc, #116]	; (1a000e9c <inicioLCD+0x78>)
1a000e28:	7018      	strb	r0, [r3, #0]
	gpioWrite(REST, ON);
1a000e2a:	4c1d      	ldr	r4, [pc, #116]	; (1a000ea0 <inicioLCD+0x7c>)
1a000e2c:	2101      	movs	r1, #1
1a000e2e:	f994 0000 	ldrsb.w	r0, [r4]
1a000e32:	f001 fce7 	bl	1a002804 <gpioWrite>
	delay(1);
1a000e36:	2001      	movs	r0, #1
1a000e38:	2100      	movs	r1, #0
1a000e3a:	f001 fd61 	bl	1a002900 <delay>
	gpioWrite(REST, OFF);
1a000e3e:	2100      	movs	r1, #0
1a000e40:	f994 0000 	ldrsb.w	r0, [r4]
1a000e44:	f001 fcde 	bl	1a002804 <gpioWrite>
	delay(1);
1a000e48:	2001      	movs	r0, #1
1a000e4a:	2100      	movs	r1, #0
1a000e4c:	f001 fd58 	bl	1a002900 <delay>
	gpioWrite(REST, ON);
1a000e50:	2101      	movs	r1, #1
1a000e52:	f994 0000 	ldrsb.w	r0, [r4]
1a000e56:	f001 fcd5 	bl	1a002804 <gpioWrite>
	delay(1);
1a000e5a:	2001      	movs	r0, #1
1a000e5c:	2100      	movs	r1, #0
1a000e5e:	f001 fd4f 	bl	1a002900 <delay>
	gpioWrite(CS, OFF);
1a000e62:	4c10      	ldr	r4, [pc, #64]	; (1a000ea4 <inicioLCD+0x80>)
1a000e64:	2100      	movs	r1, #0
1a000e66:	f994 0000 	ldrsb.w	r0, [r4]
1a000e6a:	f001 fccb 	bl	1a002804 <gpioWrite>
	initlcd();
1a000e6e:	f7ff fed9 	bl	1a000c24 <initlcd>
	gpioWrite(CS, ON);
1a000e72:	2101      	movs	r1, #1
1a000e74:	f994 0000 	ldrsb.w	r0, [r4]
1a000e78:	f001 fcc4 	bl	1a002804 <gpioWrite>
	setColorb(255, 255, 255);
1a000e7c:	22ff      	movs	r2, #255	; 0xff
1a000e7e:	4611      	mov	r1, r2
1a000e80:	4610      	mov	r0, r2
1a000e82:	f7ff ff97 	bl	1a000db4 <setColorb>
	setBackColorb(0, 0, 0);
1a000e86:	2200      	movs	r2, #0
1a000e88:	4611      	mov	r1, r2
1a000e8a:	4610      	mov	r0, r2
1a000e8c:	f7ff ffb0 	bl	1a000df0 <setBackColorb>
	cfont.font = 0;
1a000e90:	2300      	movs	r3, #0
1a000e92:	4a05      	ldr	r2, [pc, #20]	; (1a000ea8 <inicioLCD+0x84>)
1a000e94:	6013      	str	r3, [r2, #0]
	_transparent = false;
1a000e96:	4a05      	ldr	r2, [pc, #20]	; (1a000eac <inicioLCD+0x88>)
1a000e98:	7013      	strb	r3, [r2, #0]
}
1a000e9a:	bd10      	pop	{r4, pc}
1a000e9c:	10000bf8 	.word	0x10000bf8
1a000ea0:	10000ce9 	.word	0x10000ce9
1a000ea4:	10000ce1 	.word	0x10000ce1
1a000ea8:	10000cc0 	.word	0x10000cc0
1a000eac:	10000cad 	.word	0x10000cad

1a000eb0 <drawHLine>:
		_transparent = false;
	}
}

//para dibujar una line horizontal l pixeles
void drawHLine(int x, int y, int l) {
1a000eb0:	b570      	push	{r4, r5, r6, lr}
1a000eb2:	4604      	mov	r4, r0
1a000eb4:	460e      	mov	r6, r1
	if (l < 0) {
1a000eb6:	1e15      	subs	r5, r2, #0
1a000eb8:	db18      	blt.n	1a000eec <drawHLine+0x3c>
		l = -l;
		x -= l;
	}
	//cbi(P_CS, B_CS);
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, OFF);
1a000eba:	2100      	movs	r1, #0
1a000ebc:	4b14      	ldr	r3, [pc, #80]	; (1a000f10 <drawHLine+0x60>)
1a000ebe:	f993 0000 	ldrsb.w	r0, [r3]
1a000ec2:	f001 fc9f 	bl	1a002804 <gpioWrite>

	setXY(x, y, x + l, y);
1a000ec6:	4633      	mov	r3, r6
1a000ec8:	1962      	adds	r2, r4, r5
1a000eca:	4631      	mov	r1, r6
1a000ecc:	4620      	mov	r0, r4
1a000ece:	f7ff fde1 	bl	1a000a94 <setXY>
	if (display_transfer_mode == 16) {
1a000ed2:	4b10      	ldr	r3, [pc, #64]	; (1a000f14 <drawHLine+0x64>)
1a000ed4:	681b      	ldr	r3, [r3, #0]
1a000ed6:	2b10      	cmp	r3, #16
1a000ed8:	d00b      	beq.n	1a000ef2 <drawHLine+0x42>
		_fast_fill_16(fch, fcl, l);
	}

	//sbi(P_CS, B_CS);
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, ON);
1a000eda:	2101      	movs	r1, #1
1a000edc:	4b0c      	ldr	r3, [pc, #48]	; (1a000f10 <drawHLine+0x60>)
1a000ede:	f993 0000 	ldrsb.w	r0, [r3]
1a000ee2:	f001 fc8f 	bl	1a002804 <gpioWrite>
	clrXY();
1a000ee6:	f7ff fe15 	bl	1a000b14 <clrXY>
}
1a000eea:	bd70      	pop	{r4, r5, r6, pc}
		x -= l;
1a000eec:	442c      	add	r4, r5
		l = -l;
1a000eee:	426d      	negs	r5, r5
1a000ef0:	e7e3      	b.n	1a000eba <drawHLine+0xa>
		gpioWrite(RS, ON);
1a000ef2:	2101      	movs	r1, #1
1a000ef4:	4b08      	ldr	r3, [pc, #32]	; (1a000f18 <drawHLine+0x68>)
1a000ef6:	f993 0000 	ldrsb.w	r0, [r3]
1a000efa:	f001 fc83 	bl	1a002804 <gpioWrite>
		_fast_fill_16(fch, fcl, l);
1a000efe:	462a      	mov	r2, r5
1a000f00:	4b06      	ldr	r3, [pc, #24]	; (1a000f1c <drawHLine+0x6c>)
1a000f02:	7819      	ldrb	r1, [r3, #0]
1a000f04:	4b06      	ldr	r3, [pc, #24]	; (1a000f20 <drawHLine+0x70>)
1a000f06:	7818      	ldrb	r0, [r3, #0]
1a000f08:	f7ff fbc2 	bl	1a000690 <_fast_fill_16>
1a000f0c:	e7e5      	b.n	1a000eda <drawHLine+0x2a>
1a000f0e:	bf00      	nop
1a000f10:	10000ce1 	.word	0x10000ce1
1a000f14:	10000c8c 	.word	0x10000c8c
1a000f18:	10000ce0 	.word	0x10000ce0
1a000f1c:	10000c68 	.word	0x10000c68
1a000f20:	10000c61 	.word	0x10000c61

1a000f24 <drawVLine>:

//para graficar linea horizontal l pixeles
void drawVLine(int x, int y, int l) {
1a000f24:	b570      	push	{r4, r5, r6, lr}
1a000f26:	4606      	mov	r6, r0
1a000f28:	460c      	mov	r4, r1
	if (l < 0) {
1a000f2a:	1e15      	subs	r5, r2, #0
1a000f2c:	db18      	blt.n	1a000f60 <drawVLine+0x3c>
		l = -l;
		y -= l;
	}
	//cbi(P_CS, B_CS);
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, OFF);
1a000f2e:	2100      	movs	r1, #0
1a000f30:	4b14      	ldr	r3, [pc, #80]	; (1a000f84 <drawVLine+0x60>)
1a000f32:	f993 0000 	ldrsb.w	r0, [r3]
1a000f36:	f001 fc65 	bl	1a002804 <gpioWrite>
	setXY(x, y, x, y + l);
1a000f3a:	1963      	adds	r3, r4, r5
1a000f3c:	4632      	mov	r2, r6
1a000f3e:	4621      	mov	r1, r4
1a000f40:	4630      	mov	r0, r6
1a000f42:	f7ff fda7 	bl	1a000a94 <setXY>
	if (display_transfer_mode == 16) {
1a000f46:	4b10      	ldr	r3, [pc, #64]	; (1a000f88 <drawVLine+0x64>)
1a000f48:	681b      	ldr	r3, [r3, #0]
1a000f4a:	2b10      	cmp	r3, #16
1a000f4c:	d00b      	beq.n	1a000f66 <drawVLine+0x42>
		_fast_fill_16(fch, fcl, l);
	}

	//sbi(P_CS, B_CS);
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, ON);
1a000f4e:	2101      	movs	r1, #1
1a000f50:	4b0c      	ldr	r3, [pc, #48]	; (1a000f84 <drawVLine+0x60>)
1a000f52:	f993 0000 	ldrsb.w	r0, [r3]
1a000f56:	f001 fc55 	bl	1a002804 <gpioWrite>
	clrXY();
1a000f5a:	f7ff fddb 	bl	1a000b14 <clrXY>
}
1a000f5e:	bd70      	pop	{r4, r5, r6, pc}
		y -= l;
1a000f60:	442c      	add	r4, r5
		l = -l;
1a000f62:	426d      	negs	r5, r5
1a000f64:	e7e3      	b.n	1a000f2e <drawVLine+0xa>
		gpioWrite(RS, ON);
1a000f66:	2101      	movs	r1, #1
1a000f68:	4b08      	ldr	r3, [pc, #32]	; (1a000f8c <drawVLine+0x68>)
1a000f6a:	f993 0000 	ldrsb.w	r0, [r3]
1a000f6e:	f001 fc49 	bl	1a002804 <gpioWrite>
		_fast_fill_16(fch, fcl, l);
1a000f72:	462a      	mov	r2, r5
1a000f74:	4b06      	ldr	r3, [pc, #24]	; (1a000f90 <drawVLine+0x6c>)
1a000f76:	7819      	ldrb	r1, [r3, #0]
1a000f78:	4b06      	ldr	r3, [pc, #24]	; (1a000f94 <drawVLine+0x70>)
1a000f7a:	7818      	ldrb	r0, [r3, #0]
1a000f7c:	f7ff fb88 	bl	1a000690 <_fast_fill_16>
1a000f80:	e7e5      	b.n	1a000f4e <drawVLine+0x2a>
1a000f82:	bf00      	nop
1a000f84:	10000ce1 	.word	0x10000ce1
1a000f88:	10000c8c 	.word	0x10000c8c
1a000f8c:	10000ce0 	.word	0x10000ce0
1a000f90:	10000c68 	.word	0x10000c68
1a000f94:	10000c61 	.word	0x10000c61

1a000f98 <drawLine>:

//para dibujar una linea mediante dos puntos
void drawLine(int x1, int y1, int x2, int y2) {
1a000f98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000f9c:	4605      	mov	r5, r0
1a000f9e:	460c      	mov	r4, r1
1a000fa0:	4691      	mov	r9, r2
	if (y1 == y2)
1a000fa2:	4299      	cmp	r1, r3
1a000fa4:	d033      	beq.n	1a00100e <drawLine+0x76>
1a000fa6:	461e      	mov	r6, r3
		drawHLine(x1, y1, x2 - x1);
	else if (x1 == x2)
1a000fa8:	4282      	cmp	r2, r0
1a000faa:	d037      	beq.n	1a00101c <drawLine+0x84>
		drawVLine(x1, y1, y2 - y1);
	else {
		unsigned int dx = (x2 > x1 ? x2 - x1 : x1 - x2);
1a000fac:	4282      	cmp	r2, r0
1a000fae:	dd39      	ble.n	1a001024 <drawLine+0x8c>
1a000fb0:	1a17      	subs	r7, r2, r0
		short xstep = x2 > x1 ? 1 : -1;
1a000fb2:	45a9      	cmp	r9, r5
1a000fb4:	dd38      	ble.n	1a001028 <drawLine+0x90>
1a000fb6:	f04f 0a01 	mov.w	sl, #1
		unsigned int dy = (y2 > y1 ? y2 - y1 : y1 - y2);
1a000fba:	42b4      	cmp	r4, r6
1a000fbc:	da37      	bge.n	1a00102e <drawLine+0x96>
1a000fbe:	eba6 0804 	sub.w	r8, r6, r4
		short ystep = y2 > y1 ? 1 : -1;
1a000fc2:	42b4      	cmp	r4, r6
1a000fc4:	da36      	bge.n	1a001034 <drawLine+0x9c>
1a000fc6:	f04f 0b01 	mov.w	fp, #1
		int col = x1, row = y1;

		//cbi(P_CS, B_CS);
		//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
		gpioWrite(CS, OFF);
1a000fca:	2100      	movs	r1, #0
1a000fcc:	4b26      	ldr	r3, [pc, #152]	; (1a001068 <drawLine+0xd0>)
1a000fce:	f993 0000 	ldrsb.w	r0, [r3]
1a000fd2:	f001 fc17 	bl	1a002804 <gpioWrite>
		if (dx < dy) {
1a000fd6:	4547      	cmp	r7, r8
1a000fd8:	d22f      	bcs.n	1a00103a <drawLine+0xa2>
			int t = -(dy >> 1);
1a000fda:	ea4f 0958 	mov.w	r9, r8, lsr #1
1a000fde:	f1c9 0900 	rsb	r9, r9, #0
			while (true) {
				setXY(col, row, col, row);
1a000fe2:	4623      	mov	r3, r4
1a000fe4:	462a      	mov	r2, r5
1a000fe6:	4621      	mov	r1, r4
1a000fe8:	4628      	mov	r0, r5
1a000fea:	f7ff fd53 	bl	1a000a94 <setXY>
				LCD_Write_DATAb(fch, fcl);
1a000fee:	4b1f      	ldr	r3, [pc, #124]	; (1a00106c <drawLine+0xd4>)
1a000ff0:	7819      	ldrb	r1, [r3, #0]
1a000ff2:	4b1f      	ldr	r3, [pc, #124]	; (1a001070 <drawLine+0xd8>)
1a000ff4:	7818      	ldrb	r0, [r3, #0]
1a000ff6:	f7ff fb37 	bl	1a000668 <LCD_Write_DATAb>
				if (row == y2)
1a000ffa:	42b4      	cmp	r4, r6
1a000ffc:	d00c      	beq.n	1a001018 <drawLine+0x80>
					return;
				row += ystep;
1a000ffe:	445c      	add	r4, fp
				t += dx;
				if (t >= 0) {
1a001000:	eb19 0907 	adds.w	r9, r9, r7
1a001004:	d4ed      	bmi.n	1a000fe2 <drawLine+0x4a>
					col += xstep;
1a001006:	4455      	add	r5, sl
					t -= dy;
1a001008:	eba9 0908 	sub.w	r9, r9, r8
1a00100c:	e7e9      	b.n	1a000fe2 <drawLine+0x4a>
		drawHLine(x1, y1, x2 - x1);
1a00100e:	1a12      	subs	r2, r2, r0
1a001010:	f7ff ff4e 	bl	1a000eb0 <drawHLine>
		}
		//sbi(P_CS, B_CS);
		//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
		gpioWrite(CS, ON);
	}
	clrXY();
1a001014:	f7ff fd7e 	bl	1a000b14 <clrXY>
}
1a001018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drawVLine(x1, y1, y2 - y1);
1a00101c:	1a5a      	subs	r2, r3, r1
1a00101e:	f7ff ff81 	bl	1a000f24 <drawVLine>
1a001022:	e7f7      	b.n	1a001014 <drawLine+0x7c>
		unsigned int dx = (x2 > x1 ? x2 - x1 : x1 - x2);
1a001024:	1a87      	subs	r7, r0, r2
1a001026:	e7c4      	b.n	1a000fb2 <drawLine+0x1a>
		short xstep = x2 > x1 ? 1 : -1;
1a001028:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
1a00102c:	e7c5      	b.n	1a000fba <drawLine+0x22>
		unsigned int dy = (y2 > y1 ? y2 - y1 : y1 - y2);
1a00102e:	eba4 0806 	sub.w	r8, r4, r6
1a001032:	e7c6      	b.n	1a000fc2 <drawLine+0x2a>
		short ystep = y2 > y1 ? 1 : -1;
1a001034:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
1a001038:	e7c7      	b.n	1a000fca <drawLine+0x32>
			int t = -(dx >> 1);
1a00103a:	087e      	lsrs	r6, r7, #1
1a00103c:	4276      	negs	r6, r6
				setXY(col, row, col, row);
1a00103e:	4623      	mov	r3, r4
1a001040:	462a      	mov	r2, r5
1a001042:	4621      	mov	r1, r4
1a001044:	4628      	mov	r0, r5
1a001046:	f7ff fd25 	bl	1a000a94 <setXY>
				LCD_Write_DATAb(fch, fcl);
1a00104a:	4b08      	ldr	r3, [pc, #32]	; (1a00106c <drawLine+0xd4>)
1a00104c:	7819      	ldrb	r1, [r3, #0]
1a00104e:	4b08      	ldr	r3, [pc, #32]	; (1a001070 <drawLine+0xd8>)
1a001050:	7818      	ldrb	r0, [r3, #0]
1a001052:	f7ff fb09 	bl	1a000668 <LCD_Write_DATAb>
				if (col == x2)
1a001056:	454d      	cmp	r5, r9
1a001058:	d0de      	beq.n	1a001018 <drawLine+0x80>
				col += xstep;
1a00105a:	4455      	add	r5, sl
				if (t >= 0) {
1a00105c:	eb16 0608 	adds.w	r6, r6, r8
1a001060:	d4ed      	bmi.n	1a00103e <drawLine+0xa6>
					row += ystep;
1a001062:	445c      	add	r4, fp
					t -= dx;
1a001064:	1bf6      	subs	r6, r6, r7
1a001066:	e7ea      	b.n	1a00103e <drawLine+0xa6>
1a001068:	10000ce1 	.word	0x10000ce1
1a00106c:	10000c68 	.word	0x10000c68
1a001070:	10000c61 	.word	0x10000c61

1a001074 <setPixel>:

// para enviar el dato del pixel
void setPixel(int color) {
1a001074:	b508      	push	{r3, lr}
	LCD_Write_DATAb((color >> 8), (color & 0xFF));  // rrrrrggggggbbbbb
1a001076:	b2c1      	uxtb	r1, r0
1a001078:	f3c0 2007 	ubfx	r0, r0, #8, #8
1a00107c:	f7ff faf4 	bl	1a000668 <LCD_Write_DATAb>
}
1a001080:	bd08      	pop	{r3, pc}
1a001082:	Address 0x000000001a001082 is out of bounds.


1a001084 <drawPixel>:

//para dibujar un pixel en x e y
void drawPixel(int x, int y) {
1a001084:	b570      	push	{r4, r5, r6, lr}
1a001086:	4605      	mov	r5, r0
1a001088:	460e      	mov	r6, r1
	//cbi(P_CS, B_CS);
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, OFF);
1a00108a:	4c0e      	ldr	r4, [pc, #56]	; (1a0010c4 <drawPixel+0x40>)
1a00108c:	2100      	movs	r1, #0
1a00108e:	f994 0000 	ldrsb.w	r0, [r4]
1a001092:	f001 fbb7 	bl	1a002804 <gpioWrite>
	setXY(x, y, x, y);
1a001096:	4633      	mov	r3, r6
1a001098:	462a      	mov	r2, r5
1a00109a:	4631      	mov	r1, r6
1a00109c:	4628      	mov	r0, r5
1a00109e:	f7ff fcf9 	bl	1a000a94 <setXY>
	setPixel((fch << 8) | fcl);
1a0010a2:	4b09      	ldr	r3, [pc, #36]	; (1a0010c8 <drawPixel+0x44>)
1a0010a4:	7818      	ldrb	r0, [r3, #0]
1a0010a6:	4b09      	ldr	r3, [pc, #36]	; (1a0010cc <drawPixel+0x48>)
1a0010a8:	781b      	ldrb	r3, [r3, #0]
1a0010aa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a0010ae:	f7ff ffe1 	bl	1a001074 <setPixel>
	//sbi(P_CS, B_CS);
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, ON);
1a0010b2:	2101      	movs	r1, #1
1a0010b4:	f994 0000 	ldrsb.w	r0, [r4]
1a0010b8:	f001 fba4 	bl	1a002804 <gpioWrite>
	clrXY();
1a0010bc:	f7ff fd2a 	bl	1a000b14 <clrXY>
}
1a0010c0:	bd70      	pop	{r4, r5, r6, pc}
1a0010c2:	bf00      	nop
1a0010c4:	10000ce1 	.word	0x10000ce1
1a0010c8:	10000c61 	.word	0x10000c61
1a0010cc:	10000c68 	.word	0x10000c68

1a0010d0 <printCharAscii>:

//Para imprimir un caracter ASCII en x e y
void printCharAscii(uint8_t c, int x, int y) {
1a0010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0010d4:	4604      	mov	r4, r0
1a0010d6:	4688      	mov	r8, r1
1a0010d8:	4691      	mov	r9, r2
	int j;
	int temp;

	//cbi(P_CS, B_CS);
	//REG_PIOC_CODR=(REG_PIOC_CODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, OFF);
1a0010da:	2100      	movs	r1, #0
1a0010dc:	4b75      	ldr	r3, [pc, #468]	; (1a0012b4 <printCharAscii+0x1e4>)
1a0010de:	f993 0000 	ldrsb.w	r0, [r3]
1a0010e2:	f001 fb8f 	bl	1a002804 <gpioWrite>
	if (!_transparent) {
1a0010e6:	4b74      	ldr	r3, [pc, #464]	; (1a0012b8 <printCharAscii+0x1e8>)
1a0010e8:	781b      	ldrb	r3, [r3, #0]
1a0010ea:	2b00      	cmp	r3, #0
1a0010ec:	f040 8096 	bne.w	1a00121c <printCharAscii+0x14c>
		if (orient == PORTRAIT) {
1a0010f0:	4b72      	ldr	r3, [pc, #456]	; (1a0012bc <printCharAscii+0x1ec>)
1a0010f2:	781a      	ldrb	r2, [r3, #0]
1a0010f4:	4b72      	ldr	r3, [pc, #456]	; (1a0012c0 <printCharAscii+0x1f0>)
1a0010f6:	781b      	ldrb	r3, [r3, #0]
1a0010f8:	429a      	cmp	r2, r3
1a0010fa:	d00d      	beq.n	1a001118 <printCharAscii+0x48>
					}
				}
				temp++;
			}
		} else {
			temp = ((c - cfont.offset) * ((cfont.x_size / 8) * cfont.y_size))
1a0010fc:	4a71      	ldr	r2, [pc, #452]	; (1a0012c4 <printCharAscii+0x1f4>)
1a0010fe:	7997      	ldrb	r7, [r2, #6]
1a001100:	1be4      	subs	r4, r4, r7
1a001102:	7913      	ldrb	r3, [r2, #4]
1a001104:	08db      	lsrs	r3, r3, #3
1a001106:	7957      	ldrb	r7, [r2, #5]
1a001108:	fb07 f703 	mul.w	r7, r7, r3
1a00110c:	fb07 f704 	mul.w	r7, r7, r4
1a001110:	3704      	adds	r7, #4
					+ 4;

			for (j = 0; j < ((cfont.x_size / 8) * cfont.y_size);
1a001112:	f04f 0a00 	mov.w	sl, #0
1a001116:	e06a      	b.n	1a0011ee <printCharAscii+0x11e>
			setXY(x, y, x + cfont.x_size - 1, y + cfont.y_size - 1);
1a001118:	4d6a      	ldr	r5, [pc, #424]	; (1a0012c4 <printCharAscii+0x1f4>)
1a00111a:	792a      	ldrb	r2, [r5, #4]
1a00111c:	4442      	add	r2, r8
1a00111e:	796b      	ldrb	r3, [r5, #5]
1a001120:	444b      	add	r3, r9
1a001122:	3b01      	subs	r3, #1
1a001124:	3a01      	subs	r2, #1
1a001126:	4649      	mov	r1, r9
1a001128:	4640      	mov	r0, r8
1a00112a:	f7ff fcb3 	bl	1a000a94 <setXY>
			temp = ((c - cfont.offset) * ((cfont.x_size / 8) * cfont.y_size))
1a00112e:	79ae      	ldrb	r6, [r5, #6]
1a001130:	1ba4      	subs	r4, r4, r6
1a001132:	792b      	ldrb	r3, [r5, #4]
1a001134:	08db      	lsrs	r3, r3, #3
1a001136:	796e      	ldrb	r6, [r5, #5]
1a001138:	fb06 f603 	mul.w	r6, r6, r3
1a00113c:	fb06 f604 	mul.w	r6, r6, r4
1a001140:	3604      	adds	r6, #4
			for (j = 0; j < ((cfont.x_size / 8) * cfont.y_size); j++) {
1a001142:	2700      	movs	r7, #0
1a001144:	e01d      	b.n	1a001182 <printCharAscii+0xb2>
						setPixel((bch << 8) | bcl);
1a001146:	4b60      	ldr	r3, [pc, #384]	; (1a0012c8 <printCharAscii+0x1f8>)
1a001148:	7818      	ldrb	r0, [r3, #0]
1a00114a:	4b60      	ldr	r3, [pc, #384]	; (1a0012cc <printCharAscii+0x1fc>)
1a00114c:	781b      	ldrb	r3, [r3, #0]
1a00114e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a001152:	f7ff ff8f 	bl	1a001074 <setPixel>
				for (i = 0; i < 8; i++) {
1a001156:	3401      	adds	r4, #1
1a001158:	b2e4      	uxtb	r4, r4
1a00115a:	2c07      	cmp	r4, #7
1a00115c:	d80f      	bhi.n	1a00117e <printCharAscii+0xae>
					if ((ch & (1 << (7 - i))) != 0) {
1a00115e:	f1c4 0307 	rsb	r3, r4, #7
1a001162:	fa45 f303 	asr.w	r3, r5, r3
1a001166:	f013 0f01 	tst.w	r3, #1
1a00116a:	d0ec      	beq.n	1a001146 <printCharAscii+0x76>
						setPixel((fch << 8) | fcl);
1a00116c:	4b58      	ldr	r3, [pc, #352]	; (1a0012d0 <printCharAscii+0x200>)
1a00116e:	7818      	ldrb	r0, [r3, #0]
1a001170:	4b58      	ldr	r3, [pc, #352]	; (1a0012d4 <printCharAscii+0x204>)
1a001172:	781b      	ldrb	r3, [r3, #0]
1a001174:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a001178:	f7ff ff7c 	bl	1a001074 <setPixel>
1a00117c:	e7eb      	b.n	1a001156 <printCharAscii+0x86>
				temp++;
1a00117e:	3601      	adds	r6, #1
			for (j = 0; j < ((cfont.x_size / 8) * cfont.y_size); j++) {
1a001180:	3701      	adds	r7, #1
1a001182:	4950      	ldr	r1, [pc, #320]	; (1a0012c4 <printCharAscii+0x1f4>)
1a001184:	790b      	ldrb	r3, [r1, #4]
1a001186:	08da      	lsrs	r2, r3, #3
1a001188:	794b      	ldrb	r3, [r1, #5]
1a00118a:	fb03 f302 	mul.w	r3, r3, r2
1a00118e:	42bb      	cmp	r3, r7
1a001190:	f340 8086 	ble.w	1a0012a0 <printCharAscii+0x1d0>
				ch = pgm_read_byte(&cfont.font[temp]);
1a001194:	4b4b      	ldr	r3, [pc, #300]	; (1a0012c4 <printCharAscii+0x1f4>)
1a001196:	681b      	ldr	r3, [r3, #0]
1a001198:	5d9d      	ldrb	r5, [r3, r6]
				for (i = 0; i < 8; i++) {
1a00119a:	2400      	movs	r4, #0
1a00119c:	e7dd      	b.n	1a00115a <printCharAscii+0x8a>
					ch = pgm_read_byte(&cfont.font[temp + zz]);
					for (i = 0; i < 8; i++) {
						if ((ch & (1 << i)) != 0) {
							setPixel((fch << 8) | fcl);
						} else {
							setPixel((bch << 8) | bcl);
1a00119e:	4b4a      	ldr	r3, [pc, #296]	; (1a0012c8 <printCharAscii+0x1f8>)
1a0011a0:	7818      	ldrb	r0, [r3, #0]
1a0011a2:	4b4a      	ldr	r3, [pc, #296]	; (1a0012cc <printCharAscii+0x1fc>)
1a0011a4:	781b      	ldrb	r3, [r3, #0]
1a0011a6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a0011aa:	f7ff ff63 	bl	1a001074 <setPixel>
					for (i = 0; i < 8; i++) {
1a0011ae:	3401      	adds	r4, #1
1a0011b0:	b2e4      	uxtb	r4, r4
1a0011b2:	2c07      	cmp	r4, #7
1a0011b4:	d80d      	bhi.n	1a0011d2 <printCharAscii+0x102>
						if ((ch & (1 << i)) != 0) {
1a0011b6:	fa45 f304 	asr.w	r3, r5, r4
1a0011ba:	f013 0f01 	tst.w	r3, #1
1a0011be:	d0ee      	beq.n	1a00119e <printCharAscii+0xce>
							setPixel((fch << 8) | fcl);
1a0011c0:	4b43      	ldr	r3, [pc, #268]	; (1a0012d0 <printCharAscii+0x200>)
1a0011c2:	7818      	ldrb	r0, [r3, #0]
1a0011c4:	4b43      	ldr	r3, [pc, #268]	; (1a0012d4 <printCharAscii+0x204>)
1a0011c6:	781b      	ldrb	r3, [r3, #0]
1a0011c8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a0011cc:	f7ff ff52 	bl	1a001074 <setPixel>
1a0011d0:	e7ed      	b.n	1a0011ae <printCharAscii+0xde>
				for (int zz = (cfont.x_size / 8) - 1; zz >= 0; zz--) {
1a0011d2:	3e01      	subs	r6, #1
1a0011d4:	2e00      	cmp	r6, #0
1a0011d6:	db05      	blt.n	1a0011e4 <printCharAscii+0x114>
					ch = pgm_read_byte(&cfont.font[temp + zz]);
1a0011d8:	4b3a      	ldr	r3, [pc, #232]	; (1a0012c4 <printCharAscii+0x1f4>)
1a0011da:	681a      	ldr	r2, [r3, #0]
1a0011dc:	19bb      	adds	r3, r7, r6
1a0011de:	5cd5      	ldrb	r5, [r2, r3]
					for (i = 0; i < 8; i++) {
1a0011e0:	2400      	movs	r4, #0
1a0011e2:	e7e6      	b.n	1a0011b2 <printCharAscii+0xe2>
						}
					}
				}
				temp += (cfont.x_size / 8);
1a0011e4:	4b37      	ldr	r3, [pc, #220]	; (1a0012c4 <printCharAscii+0x1f4>)
1a0011e6:	791b      	ldrb	r3, [r3, #4]
1a0011e8:	08db      	lsrs	r3, r3, #3
1a0011ea:	441f      	add	r7, r3
					j += (cfont.x_size / 8)) {
1a0011ec:	449a      	add	sl, r3
			for (j = 0; j < ((cfont.x_size / 8) * cfont.y_size);
1a0011ee:	4935      	ldr	r1, [pc, #212]	; (1a0012c4 <printCharAscii+0x1f4>)
1a0011f0:	790a      	ldrb	r2, [r1, #4]
1a0011f2:	08d3      	lsrs	r3, r2, #3
1a0011f4:	7949      	ldrb	r1, [r1, #5]
1a0011f6:	fb01 f103 	mul.w	r1, r1, r3
1a0011fa:	4551      	cmp	r1, sl
1a0011fc:	dd50      	ble.n	1a0012a0 <printCharAscii+0x1d0>
				setXY(x, y + (j / (cfont.x_size / 8)), x + cfont.x_size - 1,
1a0011fe:	fb9a f3f3 	sdiv	r3, sl, r3
1a001202:	eb03 0109 	add.w	r1, r3, r9
1a001206:	4442      	add	r2, r8
1a001208:	460b      	mov	r3, r1
1a00120a:	3a01      	subs	r2, #1
1a00120c:	4640      	mov	r0, r8
1a00120e:	f7ff fc41 	bl	1a000a94 <setXY>
				for (int zz = (cfont.x_size / 8) - 1; zz >= 0; zz--) {
1a001212:	4b2c      	ldr	r3, [pc, #176]	; (1a0012c4 <printCharAscii+0x1f4>)
1a001214:	791e      	ldrb	r6, [r3, #4]
1a001216:	08f6      	lsrs	r6, r6, #3
1a001218:	3e01      	subs	r6, #1
1a00121a:	e7db      	b.n	1a0011d4 <printCharAscii+0x104>
			}
		}
	} else {
		temp = ((c - cfont.offset) * ((cfont.x_size / 8) * cfont.y_size)) + 4;
1a00121c:	4a29      	ldr	r2, [pc, #164]	; (1a0012c4 <printCharAscii+0x1f4>)
1a00121e:	7993      	ldrb	r3, [r2, #6]
1a001220:	1ae4      	subs	r4, r4, r3
1a001222:	7913      	ldrb	r3, [r2, #4]
1a001224:	08db      	lsrs	r3, r3, #3
1a001226:	f892 a005 	ldrb.w	sl, [r2, #5]
1a00122a:	fb0a fa03 	mul.w	sl, sl, r3
1a00122e:	fb0a f404 	mul.w	r4, sl, r4
1a001232:	f104 0a04 	add.w	sl, r4, #4
		for (j = 0; j < cfont.y_size; j++) {
1a001236:	2700      	movs	r7, #0
1a001238:	e02c      	b.n	1a001294 <printCharAscii+0x1c4>
			for (int zz = 0; zz < (cfont.x_size / 8); zz++) {
				ch = pgm_read_byte(&cfont.font[temp + zz]);
				for (i = 0; i < 8; i++) {

					if ((ch & (1 << (7 - i))) != 0) {
						setXY(x + i + (zz * 8), y + j, x + i + (zz * 8) + 1,
1a00123a:	eb04 0008 	add.w	r0, r4, r8
1a00123e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
1a001242:	eb07 0109 	add.w	r1, r7, r9
1a001246:	1c4b      	adds	r3, r1, #1
1a001248:	1c42      	adds	r2, r0, #1
1a00124a:	f7ff fc23 	bl	1a000a94 <setXY>
								y + j + 1);
						setPixel((fch << 8) | fcl);
1a00124e:	4b20      	ldr	r3, [pc, #128]	; (1a0012d0 <printCharAscii+0x200>)
1a001250:	7818      	ldrb	r0, [r3, #0]
1a001252:	4b20      	ldr	r3, [pc, #128]	; (1a0012d4 <printCharAscii+0x204>)
1a001254:	781b      	ldrb	r3, [r3, #0]
1a001256:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a00125a:	f7ff ff0b 	bl	1a001074 <setPixel>
				for (i = 0; i < 8; i++) {
1a00125e:	3401      	adds	r4, #1
1a001260:	b2e4      	uxtb	r4, r4
1a001262:	2c07      	cmp	r4, #7
1a001264:	d807      	bhi.n	1a001276 <printCharAscii+0x1a6>
					if ((ch & (1 << (7 - i))) != 0) {
1a001266:	f1c4 0307 	rsb	r3, r4, #7
1a00126a:	fa45 f303 	asr.w	r3, r5, r3
1a00126e:	f013 0f01 	tst.w	r3, #1
1a001272:	d0f4      	beq.n	1a00125e <printCharAscii+0x18e>
1a001274:	e7e1      	b.n	1a00123a <printCharAscii+0x16a>
			for (int zz = 0; zz < (cfont.x_size / 8); zz++) {
1a001276:	3601      	adds	r6, #1
1a001278:	4b12      	ldr	r3, [pc, #72]	; (1a0012c4 <printCharAscii+0x1f4>)
1a00127a:	791b      	ldrb	r3, [r3, #4]
1a00127c:	08db      	lsrs	r3, r3, #3
1a00127e:	42b3      	cmp	r3, r6
1a001280:	dd06      	ble.n	1a001290 <printCharAscii+0x1c0>
				ch = pgm_read_byte(&cfont.font[temp + zz]);
1a001282:	4b10      	ldr	r3, [pc, #64]	; (1a0012c4 <printCharAscii+0x1f4>)
1a001284:	681a      	ldr	r2, [r3, #0]
1a001286:	eb0a 0306 	add.w	r3, sl, r6
1a00128a:	5cd5      	ldrb	r5, [r2, r3]
				for (i = 0; i < 8; i++) {
1a00128c:	2400      	movs	r4, #0
1a00128e:	e7e8      	b.n	1a001262 <printCharAscii+0x192>
					}
				}
			}
			temp += (cfont.x_size / 8);
1a001290:	449a      	add	sl, r3
		for (j = 0; j < cfont.y_size; j++) {
1a001292:	3701      	adds	r7, #1
1a001294:	4b0b      	ldr	r3, [pc, #44]	; (1a0012c4 <printCharAscii+0x1f4>)
1a001296:	795b      	ldrb	r3, [r3, #5]
1a001298:	42bb      	cmp	r3, r7
1a00129a:	dd01      	ble.n	1a0012a0 <printCharAscii+0x1d0>
			for (int zz = 0; zz < (cfont.x_size / 8); zz++) {
1a00129c:	2600      	movs	r6, #0
1a00129e:	e7eb      	b.n	1a001278 <printCharAscii+0x1a8>
		}
	}

	//sbi(P_CS, B_CS);
	//REG_PIOC_SODR=(REG_PIOC_SODR & 0b11111111111111111111111011111111) | 0b00000000000000000000000100000000; //PC8-CS
	gpioWrite(CS, ON);
1a0012a0:	2101      	movs	r1, #1
1a0012a2:	4b04      	ldr	r3, [pc, #16]	; (1a0012b4 <printCharAscii+0x1e4>)
1a0012a4:	f993 0000 	ldrsb.w	r0, [r3]
1a0012a8:	f001 faac 	bl	1a002804 <gpioWrite>
	clrXY();
1a0012ac:	f7ff fc32 	bl	1a000b14 <clrXY>
}
1a0012b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0012b4:	10000ce1 	.word	0x10000ce1
1a0012b8:	10000cad 	.word	0x10000cad
1a0012bc:	10000bf8 	.word	0x10000bf8
1a0012c0:	10000c40 	.word	0x10000c40
1a0012c4:	10000cc0 	.word	0x10000cc0
1a0012c8:	10000cac 	.word	0x10000cac
1a0012cc:	10000ca1 	.word	0x10000ca1
1a0012d0:	10000c61 	.word	0x10000c61
1a0012d4:	10000c68 	.word	0x10000c68

1a0012d8 <main>:
extern uint8_t Dingbats1_XL[];
short ResH = 800;
short ResV = 480;

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main(void) {
1a0012d8:	b500      	push	{lr}
1a0012da:	b083      	sub	sp, #12
	// ---------- CONFIGURACIONES ------------------------------

	// Inicializar y configurar la plataforma
	boardConfig();
1a0012dc:	f001 fad6 	bl	1a00288c <boardInit>
	inicio();		//inicializacion
1a0012e0:	f000 f86c 	bl	1a0013bc <inicio>

	/*configura lcd y selecciona el modelo*/
	Conflcd(CTE70, 38, 39, 40, 41);	//configura RS, WR, CS y rest pero no se usan por ahora vienen por defecto
1a0012e4:	2329      	movs	r3, #41	; 0x29
1a0012e6:	9300      	str	r3, [sp, #0]
1a0012e8:	2328      	movs	r3, #40	; 0x28
1a0012ea:	2227      	movs	r2, #39	; 0x27
1a0012ec:	2126      	movs	r1, #38	; 0x26
1a0012ee:	4830      	ldr	r0, [pc, #192]	; (1a0013b0 <main+0xd8>)
1a0012f0:	6800      	ldr	r0, [r0, #0]
1a0012f2:	f7ff f805 	bl	1a000300 <Conflcd>
	inicioLCD(LANDSCAPE); //inicializa LCD
1a0012f6:	4b2f      	ldr	r3, [pc, #188]	; (1a0013b4 <main+0xdc>)
1a0012f8:	7818      	ldrb	r0, [r3, #0]
1a0012fa:	f7ff fd93 	bl	1a000e24 <inicioLCD>
	setFont(BigFont); //configura letra pantalla
1a0012fe:	482e      	ldr	r0, [pc, #184]	; (1a0013b8 <main+0xe0>)
1a001300:	f7ff fc82 	bl	1a000c08 <setFont>
	clrScr();  //borra lcd
1a001304:	f7ff fc28 	bl	1a000b58 <clrScr>

	/* Retardo bloqueante durante 100ms */

	delay(1000);
1a001308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00130c:	2100      	movs	r1, #0
1a00130e:	f001 faf7 	bl	1a002900 <delay>

	// ---------- REPETIR POR SIEMPRE --------------------------
	while ( TRUE) {
		setColor(VGA_GREEN);
1a001312:	f44f 6080 	mov.w	r0, #1024	; 0x400
1a001316:	f7ff fd61 	bl	1a000ddc <setColor>
		drawVLine(100, 100, 200);
1a00131a:	22c8      	movs	r2, #200	; 0xc8
1a00131c:	2164      	movs	r1, #100	; 0x64
1a00131e:	4608      	mov	r0, r1
1a001320:	f7ff fe00 	bl	1a000f24 <drawVLine>
		delay(500);
1a001324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001328:	2100      	movs	r1, #0
1a00132a:	f001 fae9 	bl	1a002900 <delay>
		drawHLine(100, 100, 400);
1a00132e:	f44f 72c8 	mov.w	r2, #400	; 0x190
1a001332:	2164      	movs	r1, #100	; 0x64
1a001334:	4608      	mov	r0, r1
1a001336:	f7ff fdbb 	bl	1a000eb0 <drawHLine>
		delay(500);
1a00133a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00133e:	2100      	movs	r1, #0
1a001340:	f001 fade 	bl	1a002900 <delay>
		setColor(VGA_WHITE);
1a001344:	f64f 70ff 	movw	r0, #65535	; 0xffff
1a001348:	f7ff fd48 	bl	1a000ddc <setColor>
		drawLine(200, 200, 400, 200);
1a00134c:	23c8      	movs	r3, #200	; 0xc8
1a00134e:	f44f 72c8 	mov.w	r2, #400	; 0x190
1a001352:	4619      	mov	r1, r3
1a001354:	4618      	mov	r0, r3
1a001356:	f7ff fe1f 	bl	1a000f98 <drawLine>
		delay(500);
1a00135a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00135e:	2100      	movs	r1, #0
1a001360:	f001 face 	bl	1a002900 <delay>
		setColor(VGA_RED);
1a001364:	f44f 4078 	mov.w	r0, #63488	; 0xf800
1a001368:	f7ff fd38 	bl	1a000ddc <setColor>
		drawPixel(380, 470);
1a00136c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
1a001370:	f44f 70be 	mov.w	r0, #380	; 0x17c
1a001374:	f7ff fe86 	bl	1a001084 <drawPixel>
		delay(500);
1a001378:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00137c:	2100      	movs	r1, #0
1a00137e:	f001 fabf 	bl	1a002900 <delay>
		setFont(BigFont);
1a001382:	480d      	ldr	r0, [pc, #52]	; (1a0013b8 <main+0xe0>)
1a001384:	f7ff fc40 	bl	1a000c08 <setFont>
		printCharAscii(97, 300, 350);
1a001388:	f44f 72af 	mov.w	r2, #350	; 0x15e
1a00138c:	f44f 7196 	mov.w	r1, #300	; 0x12c
1a001390:	2061      	movs	r0, #97	; 0x61
1a001392:	f7ff fe9d 	bl	1a0010d0 <printCharAscii>
		delay(500);
1a001396:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00139a:	2100      	movs	r1, #0
1a00139c:	f001 fab0 	bl	1a002900 <delay>
		clrScr();
1a0013a0:	f7ff fbda 	bl	1a000b58 <clrScr>
		delay(500);
1a0013a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a0013a8:	2100      	movs	r1, #0
1a0013aa:	f001 faa9 	bl	1a002900 <delay>
1a0013ae:	e7b0      	b.n	1a001312 <main+0x3a>
1a0013b0:	10000be4 	.word	0x10000be4
1a0013b4:	10000be8 	.word	0x10000be8
1a0013b8:	10000000 	.word	0x10000000

1a0013bc <inicio>:
// Bibliotecas
#include "sapi.h"        // <= Biblioteca sAPI
#include "inicio.h"

void inicio() {
1a0013bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Inicializar UART_USB a 115200 baudios */
	uartConfig(UART_USB, 230400);
1a0013c0:	f44f 3161 	mov.w	r1, #230400	; 0x38400
1a0013c4:	2003      	movs	r0, #3
1a0013c6:	f001 f82d 	bl	1a002424 <uartInit>
	uartConfig(UART_232, 230400);
1a0013ca:	f44f 3161 	mov.w	r1, #230400	; 0x38400
1a0013ce:	2005      	movs	r0, #5
1a0013d0:	f001 f828 	bl	1a002424 <uartInit>
	/* Inicializar AnalogIO */
	adcConfig(ADC_ENABLE); /* ADC */
1a0013d4:	2000      	movs	r0, #0
1a0013d6:	f001 f8c9 	bl	1a00256c <adcInit>
	/***configuracion de pines*/
	D0 = GPIO0;
1a0013da:	2020      	movs	r0, #32
1a0013dc:	4b58      	ldr	r3, [pc, #352]	; (1a001540 <inicio+0x184>)
1a0013de:	7018      	strb	r0, [r3, #0]
	D1 = GPIO1;
1a0013e0:	f8df b19c 	ldr.w	fp, [pc, #412]	; 1a001580 <inicio+0x1c4>
1a0013e4:	230f      	movs	r3, #15
1a0013e6:	f88b 3000 	strb.w	r3, [fp]
	D2 = GPIO2;
1a0013ea:	f8df a198 	ldr.w	sl, [pc, #408]	; 1a001584 <inicio+0x1c8>
1a0013ee:	231f      	movs	r3, #31
1a0013f0:	f88a 3000 	strb.w	r3, [sl]
	D3 = GPIO3;
1a0013f4:	f8df 9190 	ldr.w	r9, [pc, #400]	; 1a001588 <inicio+0x1cc>
1a0013f8:	230e      	movs	r3, #14
1a0013fa:	f889 3000 	strb.w	r3, [r9]
	D4 = GPIO4;
1a0013fe:	f8df 818c 	ldr.w	r8, [pc, #396]	; 1a00158c <inicio+0x1d0>
1a001402:	231e      	movs	r3, #30
1a001404:	f888 3000 	strb.w	r3, [r8]
	D5 = GPIO5;
1a001408:	230d      	movs	r3, #13
1a00140a:	4a4e      	ldr	r2, [pc, #312]	; (1a001544 <inicio+0x188>)
1a00140c:	7013      	strb	r3, [r2, #0]
	D6 = GPIO6;
1a00140e:	231d      	movs	r3, #29
1a001410:	494d      	ldr	r1, [pc, #308]	; (1a001548 <inicio+0x18c>)
1a001412:	700b      	strb	r3, [r1, #0]
	D7 = GPIO7;
1a001414:	230c      	movs	r3, #12
1a001416:	4c4d      	ldr	r4, [pc, #308]	; (1a00154c <inicio+0x190>)
1a001418:	7023      	strb	r3, [r4, #0]
	D8 = GPIO8;
1a00141a:	230b      	movs	r3, #11
1a00141c:	4d4c      	ldr	r5, [pc, #304]	; (1a001550 <inicio+0x194>)
1a00141e:	702b      	strb	r3, [r5, #0]
	D9 = LCDEN;
1a001420:	2321      	movs	r3, #33	; 0x21
1a001422:	4e4c      	ldr	r6, [pc, #304]	; (1a001554 <inicio+0x198>)
1a001424:	7033      	strb	r3, [r6, #0]
	D10 = LCD1;
1a001426:	2310      	movs	r3, #16
1a001428:	4f4b      	ldr	r7, [pc, #300]	; (1a001558 <inicio+0x19c>)
1a00142a:	703b      	strb	r3, [r7, #0]
	D11 = LCD2;
1a00142c:	2311      	movs	r3, #17
1a00142e:	494b      	ldr	r1, [pc, #300]	; (1a00155c <inicio+0x1a0>)
1a001430:	700b      	strb	r3, [r1, #0]
	D12 = LCD3;
1a001432:	2312      	movs	r3, #18
1a001434:	4c4a      	ldr	r4, [pc, #296]	; (1a001560 <inicio+0x1a4>)
1a001436:	7023      	strb	r3, [r4, #0]
	D13 = LCD4;
1a001438:	2314      	movs	r3, #20
1a00143a:	4d4a      	ldr	r5, [pc, #296]	; (1a001564 <inicio+0x1a8>)
1a00143c:	702b      	strb	r3, [r5, #0]
	D14 = LCDRS;
1a00143e:	2313      	movs	r3, #19
1a001440:	4e49      	ldr	r6, [pc, #292]	; (1a001568 <inicio+0x1ac>)
1a001442:	7033      	strb	r3, [r6, #0]
	D15 = T_COL0;
1a001444:	2302      	movs	r3, #2
1a001446:	4f49      	ldr	r7, [pc, #292]	; (1a00156c <inicio+0x1b0>)
1a001448:	703b      	strb	r3, [r7, #0]
	RS = T_FIL2;
1a00144a:	4f49      	ldr	r7, [pc, #292]	; (1a001570 <inicio+0x1b4>)
1a00144c:	2303      	movs	r3, #3
1a00144e:	703b      	strb	r3, [r7, #0]
	WR = T_FIL3;
1a001450:	4e48      	ldr	r6, [pc, #288]	; (1a001574 <inicio+0x1b8>)
1a001452:	2304      	movs	r3, #4
1a001454:	7033      	strb	r3, [r6, #0]
	CS = T_FIL0;
1a001456:	4d48      	ldr	r5, [pc, #288]	; (1a001578 <inicio+0x1bc>)
1a001458:	2305      	movs	r3, #5
1a00145a:	702b      	strb	r3, [r5, #0]
	REST = T_COL1;
1a00145c:	4c47      	ldr	r4, [pc, #284]	; (1a00157c <inicio+0x1c0>)
1a00145e:	2306      	movs	r3, #6
1a001460:	7023      	strb	r3, [r4, #0]
	/***Inicializacion de pines*/
	gpioInit(D0, GPIO_OUTPUT);
1a001462:	2101      	movs	r1, #1
1a001464:	f001 f8f8 	bl	1a002658 <gpioInit>
	gpioInit(D1, GPIO_OUTPUT);
1a001468:	2101      	movs	r1, #1
1a00146a:	f99b 0000 	ldrsb.w	r0, [fp]
1a00146e:	f001 f8f3 	bl	1a002658 <gpioInit>
	gpioInit(D2, GPIO_OUTPUT);
1a001472:	2101      	movs	r1, #1
1a001474:	f99a 0000 	ldrsb.w	r0, [sl]
1a001478:	f001 f8ee 	bl	1a002658 <gpioInit>
	gpioInit(D3, GPIO_OUTPUT);
1a00147c:	2101      	movs	r1, #1
1a00147e:	f999 0000 	ldrsb.w	r0, [r9]
1a001482:	f001 f8e9 	bl	1a002658 <gpioInit>
	gpioInit(D4, GPIO_OUTPUT);
1a001486:	2101      	movs	r1, #1
1a001488:	f998 0000 	ldrsb.w	r0, [r8]
1a00148c:	f001 f8e4 	bl	1a002658 <gpioInit>
	gpioInit(D5, GPIO_OUTPUT);
1a001490:	2101      	movs	r1, #1
1a001492:	4a2c      	ldr	r2, [pc, #176]	; (1a001544 <inicio+0x188>)
1a001494:	f992 0000 	ldrsb.w	r0, [r2]
1a001498:	f001 f8de 	bl	1a002658 <gpioInit>
	gpioInit(D6, GPIO_OUTPUT);
1a00149c:	2101      	movs	r1, #1
1a00149e:	4b2a      	ldr	r3, [pc, #168]	; (1a001548 <inicio+0x18c>)
1a0014a0:	f993 0000 	ldrsb.w	r0, [r3]
1a0014a4:	f001 f8d8 	bl	1a002658 <gpioInit>
	gpioInit(D7, GPIO_OUTPUT);
1a0014a8:	2101      	movs	r1, #1
1a0014aa:	4b28      	ldr	r3, [pc, #160]	; (1a00154c <inicio+0x190>)
1a0014ac:	f993 0000 	ldrsb.w	r0, [r3]
1a0014b0:	f001 f8d2 	bl	1a002658 <gpioInit>
	gpioInit(D8, GPIO_OUTPUT);
1a0014b4:	2101      	movs	r1, #1
1a0014b6:	4b26      	ldr	r3, [pc, #152]	; (1a001550 <inicio+0x194>)
1a0014b8:	f993 0000 	ldrsb.w	r0, [r3]
1a0014bc:	f001 f8cc 	bl	1a002658 <gpioInit>
	gpioInit(D9, GPIO_OUTPUT);
1a0014c0:	2101      	movs	r1, #1
1a0014c2:	4b24      	ldr	r3, [pc, #144]	; (1a001554 <inicio+0x198>)
1a0014c4:	f993 0000 	ldrsb.w	r0, [r3]
1a0014c8:	f001 f8c6 	bl	1a002658 <gpioInit>
	gpioInit(D10, GPIO_OUTPUT);
1a0014cc:	2101      	movs	r1, #1
1a0014ce:	4b22      	ldr	r3, [pc, #136]	; (1a001558 <inicio+0x19c>)
1a0014d0:	f993 0000 	ldrsb.w	r0, [r3]
1a0014d4:	f001 f8c0 	bl	1a002658 <gpioInit>
	gpioInit(D11, GPIO_OUTPUT);
1a0014d8:	2101      	movs	r1, #1
1a0014da:	4b20      	ldr	r3, [pc, #128]	; (1a00155c <inicio+0x1a0>)
1a0014dc:	f993 0000 	ldrsb.w	r0, [r3]
1a0014e0:	f001 f8ba 	bl	1a002658 <gpioInit>
	gpioInit(D12, GPIO_OUTPUT);
1a0014e4:	2101      	movs	r1, #1
1a0014e6:	4b1e      	ldr	r3, [pc, #120]	; (1a001560 <inicio+0x1a4>)
1a0014e8:	f993 0000 	ldrsb.w	r0, [r3]
1a0014ec:	f001 f8b4 	bl	1a002658 <gpioInit>
	gpioInit(D13, GPIO_OUTPUT);
1a0014f0:	2101      	movs	r1, #1
1a0014f2:	4b1c      	ldr	r3, [pc, #112]	; (1a001564 <inicio+0x1a8>)
1a0014f4:	f993 0000 	ldrsb.w	r0, [r3]
1a0014f8:	f001 f8ae 	bl	1a002658 <gpioInit>
	gpioInit(D14, GPIO_OUTPUT);
1a0014fc:	2101      	movs	r1, #1
1a0014fe:	4b1a      	ldr	r3, [pc, #104]	; (1a001568 <inicio+0x1ac>)
1a001500:	f993 0000 	ldrsb.w	r0, [r3]
1a001504:	f001 f8a8 	bl	1a002658 <gpioInit>
	gpioInit(D15, GPIO_OUTPUT);
1a001508:	2101      	movs	r1, #1
1a00150a:	4b18      	ldr	r3, [pc, #96]	; (1a00156c <inicio+0x1b0>)
1a00150c:	f993 0000 	ldrsb.w	r0, [r3]
1a001510:	f001 f8a2 	bl	1a002658 <gpioInit>
	gpioInit(RS, GPIO_OUTPUT);
1a001514:	2101      	movs	r1, #1
1a001516:	f997 0000 	ldrsb.w	r0, [r7]
1a00151a:	f001 f89d 	bl	1a002658 <gpioInit>
	gpioInit(WR, GPIO_OUTPUT);
1a00151e:	2101      	movs	r1, #1
1a001520:	f996 0000 	ldrsb.w	r0, [r6]
1a001524:	f001 f898 	bl	1a002658 <gpioInit>
	gpioInit(CS, GPIO_OUTPUT);
1a001528:	2101      	movs	r1, #1
1a00152a:	f995 0000 	ldrsb.w	r0, [r5]
1a00152e:	f001 f893 	bl	1a002658 <gpioInit>
	gpioInit(REST, GPIO_OUTPUT);
1a001532:	2101      	movs	r1, #1
1a001534:	f994 0000 	ldrsb.w	r0, [r4]
1a001538:	f001 f88e 	bl	1a002658 <gpioInit>
	//gpioMap_t pin

	/*Inicializacion de variables  */

}
1a00153c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001540:	10000c7d 	.word	0x10000c7d
1a001544:	10000cae 	.word	0x10000cae
1a001548:	10000ce8 	.word	0x10000ce8
1a00154c:	10000cdf 	.word	0x10000cdf
1a001550:	10000cb5 	.word	0x10000cb5
1a001554:	10000c70 	.word	0x10000c70
1a001558:	10000ca0 	.word	0x10000ca0
1a00155c:	10000c88 	.word	0x10000c88
1a001560:	10000ca2 	.word	0x10000ca2
1a001564:	10000cd5 	.word	0x10000cd5
1a001568:	10000cd4 	.word	0x10000cd4
1a00156c:	10000cd6 	.word	0x10000cd6
1a001570:	10000ce0 	.word	0x10000ce0
1a001574:	10000c69 	.word	0x10000c69
1a001578:	10000ce1 	.word	0x10000ce1
1a00157c:	10000ce9 	.word	0x10000ce9
1a001580:	10000cdc 	.word	0x10000cdc
1a001584:	10000caf 	.word	0x10000caf
1a001588:	10000c60 	.word	0x10000c60
1a00158c:	10000ccd 	.word	0x10000ccd

1a001590 <initialise_monitor_handles>:
}
1a001590:	4770      	bx	lr
1a001592:	Address 0x000000001a001592 is out of bounds.


1a001594 <Reset_Handler>:
void Reset_Handler(void) {
1a001594:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a001596:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001598:	4b19      	ldr	r3, [pc, #100]	; (1a001600 <Reset_Handler+0x6c>)
1a00159a:	4a1a      	ldr	r2, [pc, #104]	; (1a001604 <Reset_Handler+0x70>)
1a00159c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00159e:	3304      	adds	r3, #4
1a0015a0:	4a19      	ldr	r2, [pc, #100]	; (1a001608 <Reset_Handler+0x74>)
1a0015a2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0015a4:	2300      	movs	r3, #0
1a0015a6:	e005      	b.n	1a0015b4 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0015a8:	4a18      	ldr	r2, [pc, #96]	; (1a00160c <Reset_Handler+0x78>)
1a0015aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0015ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0015b2:	3301      	adds	r3, #1
1a0015b4:	2b07      	cmp	r3, #7
1a0015b6:	d9f7      	bls.n	1a0015a8 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0015b8:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0015ba:	4b15      	ldr	r3, [pc, #84]	; (1a001610 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0015bc:	e007      	b.n	1a0015ce <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0015be:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0015c2:	689a      	ldr	r2, [r3, #8]
1a0015c4:	6859      	ldr	r1, [r3, #4]
1a0015c6:	6818      	ldr	r0, [r3, #0]
1a0015c8:	f7fe fddf 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0015cc:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0015ce:	4a11      	ldr	r2, [pc, #68]	; (1a001614 <Reset_Handler+0x80>)
1a0015d0:	4293      	cmp	r3, r2
1a0015d2:	d3f4      	bcc.n	1a0015be <Reset_Handler+0x2a>
1a0015d4:	e006      	b.n	1a0015e4 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0015d6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0015d8:	6859      	ldr	r1, [r3, #4]
1a0015da:	f854 0b08 	ldr.w	r0, [r4], #8
1a0015de:	f7fe fde3 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0015e2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0015e4:	4a0c      	ldr	r2, [pc, #48]	; (1a001618 <Reset_Handler+0x84>)
1a0015e6:	4293      	cmp	r3, r2
1a0015e8:	d3f5      	bcc.n	1a0015d6 <Reset_Handler+0x42>
    SystemInit();
1a0015ea:	f000 fef1 	bl	1a0023d0 <SystemInit>
    __libc_init_array();
1a0015ee:	f001 fb25 	bl	1a002c3c <__libc_init_array>
    initialise_monitor_handles();
1a0015f2:	f7ff ffcd 	bl	1a001590 <initialise_monitor_handles>
    main();
1a0015f6:	f7ff fe6f 	bl	1a0012d8 <main>
        __asm__ volatile("wfi");
1a0015fa:	bf30      	wfi
1a0015fc:	e7fd      	b.n	1a0015fa <Reset_Handler+0x66>
1a0015fe:	bf00      	nop
1a001600:	40053100 	.word	0x40053100
1a001604:	10df1000 	.word	0x10df1000
1a001608:	01dff7ff 	.word	0x01dff7ff
1a00160c:	e000e280 	.word	0xe000e280
1a001610:	1a000114 	.word	0x1a000114
1a001614:	1a000150 	.word	0x1a000150
1a001618:	1a000178 	.word	0x1a000178

1a00161c <_fini>:
void _fini(void) {}
1a00161c:	4770      	bx	lr

1a00161e <_init>:
void _init(void) {}
1a00161e:	4770      	bx	lr

1a001620 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001620:	2200      	movs	r2, #0
1a001622:	2a05      	cmp	r2, #5
1a001624:	d819      	bhi.n	1a00165a <Board_LED_Init+0x3a>
{
1a001626:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a001628:	490c      	ldr	r1, [pc, #48]	; (1a00165c <Board_LED_Init+0x3c>)
1a00162a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00162e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a001632:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a001634:	4b0a      	ldr	r3, [pc, #40]	; (1a001660 <Board_LED_Init+0x40>)
1a001636:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00163a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00163e:	2001      	movs	r0, #1
1a001640:	40a0      	lsls	r0, r4
1a001642:	4301      	orrs	r1, r0
1a001644:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a001648:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a00164c:	2100      	movs	r1, #0
1a00164e:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001650:	3201      	adds	r2, #1
1a001652:	2a05      	cmp	r2, #5
1a001654:	d9e8      	bls.n	1a001628 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a001656:	bc70      	pop	{r4, r5, r6}
1a001658:	4770      	bx	lr
1a00165a:	4770      	bx	lr
1a00165c:	1a002db4 	.word	0x1a002db4
1a001660:	400f4000 	.word	0x400f4000

1a001664 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001664:	2300      	movs	r3, #0
1a001666:	2b03      	cmp	r3, #3
1a001668:	d816      	bhi.n	1a001698 <Board_TEC_Init+0x34>
{
1a00166a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00166c:	490b      	ldr	r1, [pc, #44]	; (1a00169c <Board_TEC_Init+0x38>)
1a00166e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001672:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001676:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001678:	4c09      	ldr	r4, [pc, #36]	; (1a0016a0 <Board_TEC_Init+0x3c>)
1a00167a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00167e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a001682:	2001      	movs	r0, #1
1a001684:	40a8      	lsls	r0, r5
1a001686:	ea21 0100 	bic.w	r1, r1, r0
1a00168a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00168e:	3301      	adds	r3, #1
1a001690:	2b03      	cmp	r3, #3
1a001692:	d9eb      	bls.n	1a00166c <Board_TEC_Init+0x8>
   }
}
1a001694:	bc30      	pop	{r4, r5}
1a001696:	4770      	bx	lr
1a001698:	4770      	bx	lr
1a00169a:	bf00      	nop
1a00169c:	1a002dac 	.word	0x1a002dac
1a0016a0:	400f4000 	.word	0x400f4000

1a0016a4 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0016a4:	2300      	movs	r3, #0
1a0016a6:	2b08      	cmp	r3, #8
1a0016a8:	d816      	bhi.n	1a0016d8 <Board_GPIO_Init+0x34>
{
1a0016aa:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0016ac:	490b      	ldr	r1, [pc, #44]	; (1a0016dc <Board_GPIO_Init+0x38>)
1a0016ae:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0016b2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0016b6:	784d      	ldrb	r5, [r1, #1]
1a0016b8:	4c09      	ldr	r4, [pc, #36]	; (1a0016e0 <Board_GPIO_Init+0x3c>)
1a0016ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0016be:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0016c2:	2001      	movs	r0, #1
1a0016c4:	40a8      	lsls	r0, r5
1a0016c6:	ea21 0100 	bic.w	r1, r1, r0
1a0016ca:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0016ce:	3301      	adds	r3, #1
1a0016d0:	2b08      	cmp	r3, #8
1a0016d2:	d9eb      	bls.n	1a0016ac <Board_GPIO_Init+0x8>
   }
}
1a0016d4:	bc30      	pop	{r4, r5}
1a0016d6:	4770      	bx	lr
1a0016d8:	4770      	bx	lr
1a0016da:	bf00      	nop
1a0016dc:	1a002dc0 	.word	0x1a002dc0
1a0016e0:	400f4000 	.word	0x400f4000

1a0016e4 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0016e4:	b510      	push	{r4, lr}
1a0016e6:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0016e8:	4c08      	ldr	r4, [pc, #32]	; (1a00170c <Board_ADC_Init+0x28>)
1a0016ea:	4669      	mov	r1, sp
1a0016ec:	4620      	mov	r0, r4
1a0016ee:	f000 f9fb 	bl	1a001ae8 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0016f2:	4a07      	ldr	r2, [pc, #28]	; (1a001710 <Board_ADC_Init+0x2c>)
1a0016f4:	4669      	mov	r1, sp
1a0016f6:	4620      	mov	r0, r4
1a0016f8:	f000 fa32 	bl	1a001b60 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0016fc:	2200      	movs	r2, #0
1a0016fe:	4669      	mov	r1, sp
1a001700:	4620      	mov	r0, r4
1a001702:	f000 fa46 	bl	1a001b92 <Chip_ADC_SetResolution>
}
1a001706:	b002      	add	sp, #8
1a001708:	bd10      	pop	{r4, pc}
1a00170a:	bf00      	nop
1a00170c:	400e3000 	.word	0x400e3000
1a001710:	00061a80 	.word	0x00061a80

1a001714 <Board_SPI_Init>:
{
1a001714:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a001716:	4c0b      	ldr	r4, [pc, #44]	; (1a001744 <Board_SPI_Init+0x30>)
1a001718:	4620      	mov	r0, r4
1a00171a:	f000 fe3d 	bl	1a002398 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00171e:	6863      	ldr	r3, [r4, #4]
1a001720:	f023 0304 	bic.w	r3, r3, #4
1a001724:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001726:	6823      	ldr	r3, [r4, #0]
1a001728:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00172c:	f043 0307 	orr.w	r3, r3, #7
1a001730:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a001732:	4905      	ldr	r1, [pc, #20]	; (1a001748 <Board_SPI_Init+0x34>)
1a001734:	4620      	mov	r0, r4
1a001736:	f000 fe10 	bl	1a00235a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00173a:	6863      	ldr	r3, [r4, #4]
1a00173c:	f043 0302 	orr.w	r3, r3, #2
1a001740:	6063      	str	r3, [r4, #4]
}
1a001742:	bd10      	pop	{r4, pc}
1a001744:	400c5000 	.word	0x400c5000
1a001748:	000186a0 	.word	0x000186a0

1a00174c <Board_I2C_Init>:
{
1a00174c:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a00174e:	2000      	movs	r0, #0
1a001750:	f000 f8a4 	bl	1a00189c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001754:	4b04      	ldr	r3, [pc, #16]	; (1a001768 <Board_I2C_Init+0x1c>)
1a001756:	f640 0208 	movw	r2, #2056	; 0x808
1a00175a:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00175e:	4903      	ldr	r1, [pc, #12]	; (1a00176c <Board_I2C_Init+0x20>)
1a001760:	2000      	movs	r0, #0
1a001762:	f000 f8ad 	bl	1a0018c0 <Chip_I2C_SetClockRate>
}
1a001766:	bd08      	pop	{r3, pc}
1a001768:	40086000 	.word	0x40086000
1a00176c:	000f4240 	.word	0x000f4240

1a001770 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a001770:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a001772:	4c07      	ldr	r4, [pc, #28]	; (1a001790 <Board_Debug_Init+0x20>)
1a001774:	4620      	mov	r0, r4
1a001776:	f000 f8d5 	bl	1a001924 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00177a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00177e:	4620      	mov	r0, r4
1a001780:	f000 f91a 	bl	1a0019b8 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001784:	2303      	movs	r3, #3
1a001786:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001788:	2301      	movs	r3, #1
1a00178a:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a00178c:	bd10      	pop	{r4, pc}
1a00178e:	bf00      	nop
1a001790:	400c1000 	.word	0x400c1000

1a001794 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001794:	b508      	push	{r3, lr}
   DEBUGINIT();
1a001796:	f7ff ffeb 	bl	1a001770 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00179a:	4809      	ldr	r0, [pc, #36]	; (1a0017c0 <Board_Init+0x2c>)
1a00179c:	f000 fd10 	bl	1a0021c0 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0017a0:	f7ff ff80 	bl	1a0016a4 <Board_GPIO_Init>
   Board_ADC_Init();
1a0017a4:	f7ff ff9e 	bl	1a0016e4 <Board_ADC_Init>
   Board_SPI_Init();
1a0017a8:	f7ff ffb4 	bl	1a001714 <Board_SPI_Init>
   Board_I2C_Init();
1a0017ac:	f7ff ffce 	bl	1a00174c <Board_I2C_Init>

   Board_LED_Init();
1a0017b0:	f7ff ff36 	bl	1a001620 <Board_LED_Init>
   Board_TEC_Init();
1a0017b4:	f7ff ff56 	bl	1a001664 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0017b8:	f000 fa18 	bl	1a001bec <SystemCoreClockUpdate>
}
1a0017bc:	bd08      	pop	{r3, pc}
1a0017be:	bf00      	nop
1a0017c0:	400f4000 	.word	0x400f4000

1a0017c4 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a0017c4:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0017c6:	f7ff ffd3 	bl	1a001770 <Board_Debug_Init>
1a0017ca:	bd08      	pop	{r3, pc}

1a0017cc <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0017cc:	2300      	movs	r3, #0
1a0017ce:	2b1c      	cmp	r3, #28
1a0017d0:	d812      	bhi.n	1a0017f8 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0017d2:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0017d4:	4a09      	ldr	r2, [pc, #36]	; (1a0017fc <Board_SetupMuxing+0x30>)
1a0017d6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0017da:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0017de:	784a      	ldrb	r2, [r1, #1]
1a0017e0:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0017e2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0017e6:	4906      	ldr	r1, [pc, #24]	; (1a001800 <Board_SetupMuxing+0x34>)
1a0017e8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0017ec:	3301      	adds	r3, #1
1a0017ee:	2b1c      	cmp	r3, #28
1a0017f0:	d9f0      	bls.n	1a0017d4 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0017f2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0017f6:	4770      	bx	lr
1a0017f8:	4770      	bx	lr
1a0017fa:	bf00      	nop
1a0017fc:	1a002ddc 	.word	0x1a002ddc
1a001800:	40086000 	.word	0x40086000

1a001804 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001804:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001806:	4a17      	ldr	r2, [pc, #92]	; (1a001864 <Board_SetupClocking+0x60>)
1a001808:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00180c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001810:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001814:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001818:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00181c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001820:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001824:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001828:	2201      	movs	r2, #1
1a00182a:	490f      	ldr	r1, [pc, #60]	; (1a001868 <Board_SetupClocking+0x64>)
1a00182c:	2006      	movs	r0, #6
1a00182e:	f000 fcc9 	bl	1a0021c4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001832:	2400      	movs	r4, #0
1a001834:	b14c      	cbz	r4, 1a00184a <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001836:	4b0b      	ldr	r3, [pc, #44]	; (1a001864 <Board_SetupClocking+0x60>)
1a001838:	685a      	ldr	r2, [r3, #4]
1a00183a:	f022 020c 	bic.w	r2, r2, #12
1a00183e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001840:	685a      	ldr	r2, [r3, #4]
1a001842:	f042 0203 	orr.w	r2, r2, #3
1a001846:	605a      	str	r2, [r3, #4]
}
1a001848:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00184a:	4808      	ldr	r0, [pc, #32]	; (1a00186c <Board_SetupClocking+0x68>)
1a00184c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001850:	2301      	movs	r3, #1
1a001852:	788a      	ldrb	r2, [r1, #2]
1a001854:	7849      	ldrb	r1, [r1, #1]
1a001856:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00185a:	f000 fbf3 	bl	1a002044 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00185e:	3401      	adds	r4, #1
1a001860:	e7e8      	b.n	1a001834 <Board_SetupClocking+0x30>
1a001862:	bf00      	nop
1a001864:	40043000 	.word	0x40043000
1a001868:	0c28cb00 	.word	0x0c28cb00
1a00186c:	1a002dd8 	.word	0x1a002dd8

1a001870 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001870:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a001872:	f7ff ffab 	bl	1a0017cc <Board_SetupMuxing>
    Board_SetupClocking();
1a001876:	f7ff ffc5 	bl	1a001804 <Board_SetupClocking>
}
1a00187a:	bd08      	pop	{r3, pc}

1a00187c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00187c:	2901      	cmp	r1, #1
1a00187e:	d109      	bne.n	1a001894 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001880:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001884:	0082      	lsls	r2, r0, #2
1a001886:	4b04      	ldr	r3, [pc, #16]	; (1a001898 <Chip_I2C_EventHandler+0x1c>)
1a001888:	4413      	add	r3, r2
1a00188a:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a00188c:	7d13      	ldrb	r3, [r2, #20]
1a00188e:	b2db      	uxtb	r3, r3
1a001890:	2b04      	cmp	r3, #4
1a001892:	d0fb      	beq.n	1a00188c <Chip_I2C_EventHandler+0x10>
}
1a001894:	4770      	bx	lr
1a001896:	bf00      	nop
1a001898:	10000bfc 	.word	0x10000bfc

1a00189c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a00189c:	b570      	push	{r4, r5, r6, lr}
1a00189e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0018a0:	4e06      	ldr	r6, [pc, #24]	; (1a0018bc <Chip_I2C_Init+0x20>)
1a0018a2:	00c4      	lsls	r4, r0, #3
1a0018a4:	1a22      	subs	r2, r4, r0
1a0018a6:	0093      	lsls	r3, r2, #2
1a0018a8:	4433      	add	r3, r6
1a0018aa:	8898      	ldrh	r0, [r3, #4]
1a0018ac:	f000 fc2e 	bl	1a00210c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0018b0:	1b64      	subs	r4, r4, r5
1a0018b2:	00a3      	lsls	r3, r4, #2
1a0018b4:	58f3      	ldr	r3, [r6, r3]
1a0018b6:	226c      	movs	r2, #108	; 0x6c
1a0018b8:	619a      	str	r2, [r3, #24]
}
1a0018ba:	bd70      	pop	{r4, r5, r6, pc}
1a0018bc:	10000bfc 	.word	0x10000bfc

1a0018c0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0018c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0018c4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0018c6:	4e0b      	ldr	r6, [pc, #44]	; (1a0018f4 <Chip_I2C_SetClockRate+0x34>)
1a0018c8:	00c5      	lsls	r5, r0, #3
1a0018ca:	1a2b      	subs	r3, r5, r0
1a0018cc:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0018d0:	eb06 0308 	add.w	r3, r6, r8
1a0018d4:	8898      	ldrh	r0, [r3, #4]
1a0018d6:	f000 fc4d 	bl	1a002174 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0018da:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0018de:	f856 3008 	ldr.w	r3, [r6, r8]
1a0018e2:	0842      	lsrs	r2, r0, #1
1a0018e4:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0018e6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0018ea:	691a      	ldr	r2, [r3, #16]
1a0018ec:	1a80      	subs	r0, r0, r2
1a0018ee:	6158      	str	r0, [r3, #20]
}
1a0018f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0018f4:	10000bfc 	.word	0x10000bfc

1a0018f8 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0018f8:	4b09      	ldr	r3, [pc, #36]	; (1a001920 <Chip_UART_GetIndex+0x28>)
1a0018fa:	4298      	cmp	r0, r3
1a0018fc:	d009      	beq.n	1a001912 <Chip_UART_GetIndex+0x1a>
1a0018fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001902:	4298      	cmp	r0, r3
1a001904:	d007      	beq.n	1a001916 <Chip_UART_GetIndex+0x1e>
1a001906:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00190a:	4298      	cmp	r0, r3
1a00190c:	d005      	beq.n	1a00191a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00190e:	2000      	movs	r0, #0
1a001910:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001912:	2002      	movs	r0, #2
1a001914:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001916:	2003      	movs	r0, #3
1a001918:	4770      	bx	lr
			return 1;
1a00191a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a00191c:	4770      	bx	lr
1a00191e:	bf00      	nop
1a001920:	400c1000 	.word	0x400c1000

1a001924 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001924:	b530      	push	{r4, r5, lr}
1a001926:	b083      	sub	sp, #12
1a001928:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00192a:	f7ff ffe5 	bl	1a0018f8 <Chip_UART_GetIndex>
1a00192e:	2301      	movs	r3, #1
1a001930:	461a      	mov	r2, r3
1a001932:	4619      	mov	r1, r3
1a001934:	4d0e      	ldr	r5, [pc, #56]	; (1a001970 <Chip_UART_Init+0x4c>)
1a001936:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00193a:	f000 fbc9 	bl	1a0020d0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00193e:	2307      	movs	r3, #7
1a001940:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001942:	2300      	movs	r3, #0
1a001944:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001946:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001948:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00194a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a00194c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00194e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001950:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001952:	4b08      	ldr	r3, [pc, #32]	; (1a001974 <Chip_UART_Init+0x50>)
1a001954:	429c      	cmp	r4, r3
1a001956:	d006      	beq.n	1a001966 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001958:	2303      	movs	r3, #3
1a00195a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00195c:	2310      	movs	r3, #16
1a00195e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001960:	9b01      	ldr	r3, [sp, #4]
}
1a001962:	b003      	add	sp, #12
1a001964:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001966:	2300      	movs	r3, #0
1a001968:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00196a:	69a3      	ldr	r3, [r4, #24]
1a00196c:	9301      	str	r3, [sp, #4]
1a00196e:	e7f3      	b.n	1a001958 <Chip_UART_Init+0x34>
1a001970:	1a002e58 	.word	0x1a002e58
1a001974:	40082000 	.word	0x40082000

1a001978 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001978:	b538      	push	{r3, r4, r5, lr}
1a00197a:	4605      	mov	r5, r0
1a00197c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00197e:	f7ff ffbb 	bl	1a0018f8 <Chip_UART_GetIndex>
1a001982:	4b0c      	ldr	r3, [pc, #48]	; (1a0019b4 <Chip_UART_SetBaud+0x3c>)
1a001984:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001988:	f000 fbf4 	bl	1a002174 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a00198c:	0123      	lsls	r3, r4, #4
1a00198e:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a001992:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001994:	68ea      	ldr	r2, [r5, #12]
1a001996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00199a:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a00199c:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a00199e:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0019a2:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0019a4:	68ea      	ldr	r2, [r5, #12]
1a0019a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0019aa:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0019ac:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0019b0:	0900      	lsrs	r0, r0, #4
1a0019b2:	bd38      	pop	{r3, r4, r5, pc}
1a0019b4:	1a002e50 	.word	0x1a002e50

1a0019b8 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0019b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0019bc:	b083      	sub	sp, #12
1a0019be:	9001      	str	r0, [sp, #4]
1a0019c0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0019c2:	f7ff ff99 	bl	1a0018f8 <Chip_UART_GetIndex>
1a0019c6:	4b32      	ldr	r3, [pc, #200]	; (1a001a90 <Chip_UART_SetBaudFDR+0xd8>)
1a0019c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0019cc:	f000 fbd2 	bl	1a002174 <Chip_Clock_GetRate>
1a0019d0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0019d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0019d6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0019d8:	f04f 0b00 	mov.w	fp, #0
1a0019dc:	46a2      	mov	sl, r4
1a0019de:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0019e0:	e02a      	b.n	1a001a38 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0019e2:	4242      	negs	r2, r0
				div ++;
1a0019e4:	1c4b      	adds	r3, r1, #1
1a0019e6:	e017      	b.n	1a001a18 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0019e8:	b30a      	cbz	r2, 1a001a2e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0019ea:	4617      	mov	r7, r2
			sd = d;
1a0019ec:	46ab      	mov	fp, r5
			sm = m;
1a0019ee:	46a2      	mov	sl, r4
			sdiv = div;
1a0019f0:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0019f2:	3501      	adds	r5, #1
1a0019f4:	42ac      	cmp	r4, r5
1a0019f6:	d91e      	bls.n	1a001a36 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0019f8:	0933      	lsrs	r3, r6, #4
1a0019fa:	0730      	lsls	r0, r6, #28
1a0019fc:	fba4 0100 	umull	r0, r1, r4, r0
1a001a00:	fb04 1103 	mla	r1, r4, r3, r1
1a001a04:	1962      	adds	r2, r4, r5
1a001a06:	fb08 f202 	mul.w	r2, r8, r2
1a001a0a:	2300      	movs	r3, #0
1a001a0c:	f000 ff94 	bl	1a002938 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001a10:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a001a12:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001a14:	2800      	cmp	r0, #0
1a001a16:	dbe4      	blt.n	1a0019e2 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001a18:	4297      	cmp	r7, r2
1a001a1a:	d3ea      	bcc.n	1a0019f2 <Chip_UART_SetBaudFDR+0x3a>
1a001a1c:	2b00      	cmp	r3, #0
1a001a1e:	d0e8      	beq.n	1a0019f2 <Chip_UART_SetBaudFDR+0x3a>
1a001a20:	0c19      	lsrs	r1, r3, #16
1a001a22:	d1e6      	bne.n	1a0019f2 <Chip_UART_SetBaudFDR+0x3a>
1a001a24:	2b02      	cmp	r3, #2
1a001a26:	d8df      	bhi.n	1a0019e8 <Chip_UART_SetBaudFDR+0x30>
1a001a28:	2d00      	cmp	r5, #0
1a001a2a:	d0dd      	beq.n	1a0019e8 <Chip_UART_SetBaudFDR+0x30>
1a001a2c:	e7e1      	b.n	1a0019f2 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a001a2e:	4617      	mov	r7, r2
			sd = d;
1a001a30:	46ab      	mov	fp, r5
			sm = m;
1a001a32:	46a2      	mov	sl, r4
			sdiv = div;
1a001a34:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a001a36:	3401      	adds	r4, #1
1a001a38:	b11f      	cbz	r7, 1a001a42 <Chip_UART_SetBaudFDR+0x8a>
1a001a3a:	2c0f      	cmp	r4, #15
1a001a3c:	d801      	bhi.n	1a001a42 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a001a3e:	2500      	movs	r5, #0
1a001a40:	e7d8      	b.n	1a0019f4 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001a42:	f1b9 0f00 	cmp.w	r9, #0
1a001a46:	d01e      	beq.n	1a001a86 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001a48:	9a01      	ldr	r2, [sp, #4]
1a001a4a:	4611      	mov	r1, r2
1a001a4c:	68d3      	ldr	r3, [r2, #12]
1a001a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001a52:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a001a54:	fa5f f389 	uxtb.w	r3, r9
1a001a58:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a001a5a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001a5e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001a60:	68d3      	ldr	r3, [r2, #12]
1a001a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001a66:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001a68:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001a6c:	b2db      	uxtb	r3, r3
1a001a6e:	f00b 020f 	and.w	r2, fp, #15
1a001a72:	4313      	orrs	r3, r2
1a001a74:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001a76:	0933      	lsrs	r3, r6, #4
1a001a78:	fb0a f303 	mul.w	r3, sl, r3
1a001a7c:	44da      	add	sl, fp
1a001a7e:	fb09 f90a 	mul.w	r9, r9, sl
1a001a82:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001a86:	4648      	mov	r0, r9
1a001a88:	b003      	add	sp, #12
1a001a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001a8e:	bf00      	nop
1a001a90:	1a002e50 	.word	0x1a002e50

1a001a94 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a001a94:	4b03      	ldr	r3, [pc, #12]	; (1a001aa4 <Chip_ADC_GetClockIndex+0x10>)
1a001a96:	4298      	cmp	r0, r3
1a001a98:	d001      	beq.n	1a001a9e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a001a9a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001a9c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a001a9e:	2004      	movs	r0, #4
1a001aa0:	4770      	bx	lr
1a001aa2:	bf00      	nop
1a001aa4:	400e4000 	.word	0x400e4000

1a001aa8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001aa8:	b570      	push	{r4, r5, r6, lr}
1a001aaa:	460d      	mov	r5, r1
1a001aac:	4614      	mov	r4, r2
1a001aae:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001ab0:	f7ff fff0 	bl	1a001a94 <Chip_ADC_GetClockIndex>
1a001ab4:	f000 fb5e 	bl	1a002174 <Chip_Clock_GetRate>
	if (burstMode) {
1a001ab8:	b155      	cbz	r5, 1a001ad0 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a001aba:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001abe:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001ac2:	0064      	lsls	r4, r4, #1
1a001ac4:	fbb0 f0f4 	udiv	r0, r0, r4
1a001ac8:	b2c0      	uxtb	r0, r0
1a001aca:	3801      	subs	r0, #1
	return div;
}
1a001acc:	b2c0      	uxtb	r0, r0
1a001ace:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a001ad0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001ad4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a001ad8:	e7f1      	b.n	1a001abe <getClkDiv+0x16>

1a001ada <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a001ada:	6803      	ldr	r3, [r0, #0]
1a001adc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a001ae0:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a001ae4:	6001      	str	r1, [r0, #0]
}
1a001ae6:	4770      	bx	lr

1a001ae8 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001ae8:	b538      	push	{r3, r4, r5, lr}
1a001aea:	4605      	mov	r5, r0
1a001aec:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001aee:	f7ff ffd1 	bl	1a001a94 <Chip_ADC_GetClockIndex>
1a001af2:	2301      	movs	r3, #1
1a001af4:	461a      	mov	r2, r3
1a001af6:	4619      	mov	r1, r3
1a001af8:	f000 faea 	bl	1a0020d0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001afc:	2100      	movs	r1, #0
1a001afe:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001b00:	4a08      	ldr	r2, [pc, #32]	; (1a001b24 <Chip_ADC_Init+0x3c>)
1a001b02:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001b04:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a001b06:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001b08:	230b      	movs	r3, #11
1a001b0a:	4628      	mov	r0, r5
1a001b0c:	f7ff ffcc 	bl	1a001aa8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001b10:	0200      	lsls	r0, r0, #8
1a001b12:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001b16:	7920      	ldrb	r0, [r4, #4]
1a001b18:	0440      	lsls	r0, r0, #17
1a001b1a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001b1e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001b20:	6028      	str	r0, [r5, #0]
}
1a001b22:	bd38      	pop	{r3, r4, r5, pc}
1a001b24:	00061a80 	.word	0x00061a80

1a001b28 <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a001b28:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a001b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
1a001b2e:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a001b30:	2200      	movs	r2, #0
1a001b32:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a001b34:	f7ff ffae 	bl	1a001a94 <Chip_ADC_GetClockIndex>
1a001b38:	f000 fb02 	bl	1a002140 <Chip_Clock_Disable>
}
1a001b3c:	bd08      	pop	{r3, pc}

1a001b3e <Chip_ADC_Int_SetChannelCmd>:
}

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a001b3e:	2a01      	cmp	r2, #1
1a001b40:	d006      	beq.n	1a001b50 <Chip_ADC_Int_SetChannelCmd+0x12>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a001b42:	68c3      	ldr	r3, [r0, #12]
1a001b44:	2201      	movs	r2, #1
1a001b46:	408a      	lsls	r2, r1
1a001b48:	ea23 0302 	bic.w	r3, r3, r2
1a001b4c:	60c3      	str	r3, [r0, #12]
1a001b4e:	4770      	bx	lr
{
1a001b50:	b410      	push	{r4}
		pADC->INTEN |= (1UL << channel);
1a001b52:	68c4      	ldr	r4, [r0, #12]
1a001b54:	408a      	lsls	r2, r1
1a001b56:	4314      	orrs	r4, r2
1a001b58:	60c4      	str	r4, [r0, #12]
	}
}
1a001b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001b5e:	4770      	bx	lr

1a001b60 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001b60:	b570      	push	{r4, r5, r6, lr}
1a001b62:	4605      	mov	r5, r0
1a001b64:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001b66:	6804      	ldr	r4, [r0, #0]
1a001b68:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001b6c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001b70:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001b72:	790b      	ldrb	r3, [r1, #4]
1a001b74:	f1c3 030b 	rsb	r3, r3, #11
1a001b78:	b2db      	uxtb	r3, r3
1a001b7a:	7949      	ldrb	r1, [r1, #5]
1a001b7c:	f7ff ff94 	bl	1a001aa8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001b80:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001b84:	7933      	ldrb	r3, [r6, #4]
1a001b86:	045b      	lsls	r3, r3, #17
1a001b88:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a001b8c:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a001b8e:	602b      	str	r3, [r5, #0]
}
1a001b90:	bd70      	pop	{r4, r5, r6, pc}

1a001b92 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001b92:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001b94:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001b96:	680a      	ldr	r2, [r1, #0]
1a001b98:	f7ff ffe2 	bl	1a001b60 <Chip_ADC_SetSampleRate>
}
1a001b9c:	bd08      	pop	{r3, pc}

1a001b9e <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a001b9e:	2a01      	cmp	r2, #1
1a001ba0:	d00a      	beq.n	1a001bb8 <Chip_ADC_EnableChannel+0x1a>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a001ba2:	6802      	ldr	r2, [r0, #0]
1a001ba4:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
1a001ba8:	6002      	str	r2, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a001baa:	6803      	ldr	r3, [r0, #0]
1a001bac:	2201      	movs	r2, #1
1a001bae:	408a      	lsls	r2, r1
1a001bb0:	ea23 0302 	bic.w	r3, r3, r2
1a001bb4:	6003      	str	r3, [r0, #0]
1a001bb6:	4770      	bx	lr
{
1a001bb8:	b410      	push	{r4}
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a001bba:	6804      	ldr	r4, [r0, #0]
1a001bbc:	408a      	lsls	r2, r1
1a001bbe:	4314      	orrs	r4, r2
1a001bc0:	6004      	str	r4, [r0, #0]
	}
}
1a001bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001bc6:	4770      	bx	lr

1a001bc8 <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a001bc8:	b538      	push	{r3, r4, r5, lr}
1a001bca:	4604      	mov	r4, r0
1a001bcc:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a001bce:	2100      	movs	r1, #0
1a001bd0:	f7ff ff83 	bl	1a001ada <setStartMode>
	
    if (NewState == DISABLE) {
1a001bd4:	b925      	cbnz	r5, 1a001be0 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a001bd6:	6823      	ldr	r3, [r4, #0]
1a001bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a001bdc:	6023      	str	r3, [r4, #0]
	}
	else {
		pADC->CR |= ADC_CR_BURST;
	}
}
1a001bde:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR |= ADC_CR_BURST;
1a001be0:	6823      	ldr	r3, [r4, #0]
1a001be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a001be6:	6023      	str	r3, [r4, #0]
}
1a001be8:	e7f9      	b.n	1a001bde <Chip_ADC_SetBurstCmd+0x16>
1a001bea:	Address 0x000000001a001bea is out of bounds.


1a001bec <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001bec:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001bee:	2069      	movs	r0, #105	; 0x69
1a001bf0:	f000 fac0 	bl	1a002174 <Chip_Clock_GetRate>
1a001bf4:	4b01      	ldr	r3, [pc, #4]	; (1a001bfc <SystemCoreClockUpdate+0x10>)
1a001bf6:	6018      	str	r0, [r3, #0]
}
1a001bf8:	bd08      	pop	{r3, pc}
1a001bfa:	bf00      	nop
1a001bfc:	10000cf0 	.word	0x10000cf0

1a001c00 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001c00:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001c02:	680b      	ldr	r3, [r1, #0]
1a001c04:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001c08:	d002      	beq.n	1a001c10 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a001c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001c0e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001c10:	4607      	mov	r7, r0
1a001c12:	2501      	movs	r5, #1
1a001c14:	e03a      	b.n	1a001c8c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a001c16:	694b      	ldr	r3, [r1, #20]
1a001c18:	fb03 f302 	mul.w	r3, r3, r2
1a001c1c:	fbb3 f3f5 	udiv	r3, r3, r5
1a001c20:	e01c      	b.n	1a001c5c <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001c22:	461c      	mov	r4, r3
	if (val < 0)
1a001c24:	ebb0 0c04 	subs.w	ip, r0, r4
1a001c28:	d427      	bmi.n	1a001c7a <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a001c2a:	4567      	cmp	r7, ip
1a001c2c:	d906      	bls.n	1a001c3c <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a001c2e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001c30:	1c77      	adds	r7, r6, #1
1a001c32:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001c34:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a001c36:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001c38:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a001c3a:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a001c3c:	3201      	adds	r2, #1
1a001c3e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001c42:	dc1d      	bgt.n	1a001c80 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a001c44:	680c      	ldr	r4, [r1, #0]
1a001c46:	f014 0f40 	tst.w	r4, #64	; 0x40
1a001c4a:	d0e4      	beq.n	1a001c16 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001c4c:	1c73      	adds	r3, r6, #1
1a001c4e:	fa02 fc03 	lsl.w	ip, r2, r3
1a001c52:	694b      	ldr	r3, [r1, #20]
1a001c54:	fb03 f30c 	mul.w	r3, r3, ip
1a001c58:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001c5c:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001c98 <pll_calc_divs+0x98>
1a001c60:	4563      	cmp	r3, ip
1a001c62:	d9eb      	bls.n	1a001c3c <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001c64:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a001c9c <pll_calc_divs+0x9c>
1a001c68:	4563      	cmp	r3, ip
1a001c6a:	d809      	bhi.n	1a001c80 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a001c6c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001c70:	d1d7      	bne.n	1a001c22 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a001c72:	1c74      	adds	r4, r6, #1
1a001c74:	fa23 f404 	lsr.w	r4, r3, r4
1a001c78:	e7d4      	b.n	1a001c24 <pll_calc_divs+0x24>
		return -val;
1a001c7a:	f1cc 0c00 	rsb	ip, ip, #0
1a001c7e:	e7d4      	b.n	1a001c2a <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001c80:	3601      	adds	r6, #1
1a001c82:	2e03      	cmp	r6, #3
1a001c84:	dc01      	bgt.n	1a001c8a <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a001c86:	2201      	movs	r2, #1
1a001c88:	e7d9      	b.n	1a001c3e <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a001c8a:	3501      	adds	r5, #1
1a001c8c:	2d04      	cmp	r5, #4
1a001c8e:	dc01      	bgt.n	1a001c94 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001c90:	2600      	movs	r6, #0
1a001c92:	e7f6      	b.n	1a001c82 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001c94:	bcf0      	pop	{r4, r5, r6, r7}
1a001c96:	4770      	bx	lr
1a001c98:	094c5eff 	.word	0x094c5eff
1a001c9c:	1312d000 	.word	0x1312d000

1a001ca0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001ca2:	b099      	sub	sp, #100	; 0x64
1a001ca4:	4605      	mov	r5, r0
1a001ca6:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001ca8:	225c      	movs	r2, #92	; 0x5c
1a001caa:	2100      	movs	r1, #0
1a001cac:	a801      	add	r0, sp, #4
1a001cae:	f000 fff7 	bl	1a002ca0 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001cb2:	2380      	movs	r3, #128	; 0x80
1a001cb4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001cb6:	6963      	ldr	r3, [r4, #20]
1a001cb8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001cba:	7923      	ldrb	r3, [r4, #4]
1a001cbc:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001cc0:	4669      	mov	r1, sp
1a001cc2:	4628      	mov	r0, r5
1a001cc4:	f7ff ff9c 	bl	1a001c00 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001cc8:	9b06      	ldr	r3, [sp, #24]
1a001cca:	42ab      	cmp	r3, r5
1a001ccc:	d027      	beq.n	1a001d1e <pll_get_frac+0x7e>
	if (val < 0)
1a001cce:	1aeb      	subs	r3, r5, r3
1a001cd0:	d42e      	bmi.n	1a001d30 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001cd2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001cda:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001cdc:	6963      	ldr	r3, [r4, #20]
1a001cde:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001ce0:	7923      	ldrb	r3, [r4, #4]
1a001ce2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001ce6:	a910      	add	r1, sp, #64	; 0x40
1a001ce8:	4628      	mov	r0, r5
1a001cea:	f7ff ff89 	bl	1a001c00 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001cee:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001cf0:	42ab      	cmp	r3, r5
1a001cf2:	d01f      	beq.n	1a001d34 <pll_get_frac+0x94>
	if (val < 0)
1a001cf4:	1aeb      	subs	r3, r5, r3
1a001cf6:	d425      	bmi.n	1a001d44 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001cf8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001cfa:	4b2b      	ldr	r3, [pc, #172]	; (1a001da8 <pll_get_frac+0x108>)
1a001cfc:	429d      	cmp	r5, r3
1a001cfe:	d923      	bls.n	1a001d48 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a001d02:	1aed      	subs	r5, r5, r3
1a001d04:	d433      	bmi.n	1a001d6e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001d06:	42ae      	cmp	r6, r5
1a001d08:	dc3b      	bgt.n	1a001d82 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a001d0a:	42be      	cmp	r6, r7
1a001d0c:	dc31      	bgt.n	1a001d72 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a001d0e:	466d      	mov	r5, sp
1a001d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001d1c:	e006      	b.n	1a001d2c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a001d1e:	466d      	mov	r5, sp
1a001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001d2c:	b019      	add	sp, #100	; 0x64
1a001d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001d30:	425b      	negs	r3, r3
1a001d32:	e7ce      	b.n	1a001cd2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a001d34:	ad10      	add	r5, sp, #64	; 0x40
1a001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001d42:	e7f3      	b.n	1a001d2c <pll_get_frac+0x8c>
		return -val;
1a001d44:	425b      	negs	r3, r3
1a001d46:	e7d7      	b.n	1a001cf8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001d48:	2340      	movs	r3, #64	; 0x40
1a001d4a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001d4c:	6963      	ldr	r3, [r4, #20]
1a001d4e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001d50:	a908      	add	r1, sp, #32
1a001d52:	4628      	mov	r0, r5
1a001d54:	f7ff ff54 	bl	1a001c00 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001d5a:	42ab      	cmp	r3, r5
1a001d5c:	d1d0      	bne.n	1a001d00 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001d5e:	ad08      	add	r5, sp, #32
1a001d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001d6c:	e7de      	b.n	1a001d2c <pll_get_frac+0x8c>
		return -val;
1a001d6e:	426d      	negs	r5, r5
1a001d70:	e7c9      	b.n	1a001d06 <pll_get_frac+0x66>
			*ppll = pll[2];
1a001d72:	ad10      	add	r5, sp, #64	; 0x40
1a001d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001d80:	e7d4      	b.n	1a001d2c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001d82:	42af      	cmp	r7, r5
1a001d84:	db07      	blt.n	1a001d96 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001d86:	ad08      	add	r5, sp, #32
1a001d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001d94:	e7ca      	b.n	1a001d2c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001d96:	ad10      	add	r5, sp, #64	; 0x40
1a001d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001da4:	e7c2      	b.n	1a001d2c <pll_get_frac+0x8c>
1a001da6:	bf00      	nop
1a001da8:	068e7780 	.word	0x068e7780

1a001dac <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001dac:	b430      	push	{r4, r5}
1a001dae:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001db0:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001db2:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001db4:	e000      	b.n	1a001db8 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001db6:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001db8:	281c      	cmp	r0, #28
1a001dba:	d118      	bne.n	1a001dee <Chip_Clock_FindBaseClock+0x42>
1a001dbc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001dc0:	0051      	lsls	r1, r2, #1
1a001dc2:	4a0c      	ldr	r2, [pc, #48]	; (1a001df4 <Chip_Clock_FindBaseClock+0x48>)
1a001dc4:	440a      	add	r2, r1
1a001dc6:	7914      	ldrb	r4, [r2, #4]
1a001dc8:	4284      	cmp	r4, r0
1a001dca:	d010      	beq.n	1a001dee <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001dcc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001dd0:	004a      	lsls	r2, r1, #1
1a001dd2:	4908      	ldr	r1, [pc, #32]	; (1a001df4 <Chip_Clock_FindBaseClock+0x48>)
1a001dd4:	5a8a      	ldrh	r2, [r1, r2]
1a001dd6:	42aa      	cmp	r2, r5
1a001dd8:	d8ed      	bhi.n	1a001db6 <Chip_Clock_FindBaseClock+0xa>
1a001dda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001dde:	0051      	lsls	r1, r2, #1
1a001de0:	4a04      	ldr	r2, [pc, #16]	; (1a001df4 <Chip_Clock_FindBaseClock+0x48>)
1a001de2:	440a      	add	r2, r1
1a001de4:	8852      	ldrh	r2, [r2, #2]
1a001de6:	42aa      	cmp	r2, r5
1a001de8:	d3e5      	bcc.n	1a001db6 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001dea:	4620      	mov	r0, r4
1a001dec:	e7e4      	b.n	1a001db8 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001dee:	bc30      	pop	{r4, r5}
1a001df0:	4770      	bx	lr
1a001df2:	bf00      	nop
1a001df4:	1a002e6c 	.word	0x1a002e6c

1a001df8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001df8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001dfe:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001e00:	4a0d      	ldr	r2, [pc, #52]	; (1a001e38 <Chip_Clock_EnableCrystal+0x40>)
1a001e02:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001e04:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001e08:	6992      	ldr	r2, [r2, #24]
1a001e0a:	428a      	cmp	r2, r1
1a001e0c:	d001      	beq.n	1a001e12 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001e0e:	4a0a      	ldr	r2, [pc, #40]	; (1a001e38 <Chip_Clock_EnableCrystal+0x40>)
1a001e10:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001e12:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001e16:	4a09      	ldr	r2, [pc, #36]	; (1a001e3c <Chip_Clock_EnableCrystal+0x44>)
1a001e18:	6811      	ldr	r1, [r2, #0]
1a001e1a:	4a09      	ldr	r2, [pc, #36]	; (1a001e40 <Chip_Clock_EnableCrystal+0x48>)
1a001e1c:	4291      	cmp	r1, r2
1a001e1e:	d901      	bls.n	1a001e24 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001e20:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001e24:	4a04      	ldr	r2, [pc, #16]	; (1a001e38 <Chip_Clock_EnableCrystal+0x40>)
1a001e26:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001e28:	9b01      	ldr	r3, [sp, #4]
1a001e2a:	1e5a      	subs	r2, r3, #1
1a001e2c:	9201      	str	r2, [sp, #4]
1a001e2e:	2b00      	cmp	r3, #0
1a001e30:	d1fa      	bne.n	1a001e28 <Chip_Clock_EnableCrystal+0x30>
}
1a001e32:	b002      	add	sp, #8
1a001e34:	4770      	bx	lr
1a001e36:	bf00      	nop
1a001e38:	40050000 	.word	0x40050000
1a001e3c:	1a002dd4 	.word	0x1a002dd4
1a001e40:	01312cff 	.word	0x01312cff

1a001e44 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001e44:	3012      	adds	r0, #18
1a001e46:	4b05      	ldr	r3, [pc, #20]	; (1a001e5c <Chip_Clock_GetDividerSource+0x18>)
1a001e48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001e4c:	f010 0f01 	tst.w	r0, #1
1a001e50:	d102      	bne.n	1a001e58 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001e52:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001e56:	4770      	bx	lr
		return CLKINPUT_PD;
1a001e58:	2011      	movs	r0, #17
}
1a001e5a:	4770      	bx	lr
1a001e5c:	40050000 	.word	0x40050000

1a001e60 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001e60:	f100 0212 	add.w	r2, r0, #18
1a001e64:	4b03      	ldr	r3, [pc, #12]	; (1a001e74 <Chip_Clock_GetDividerDivisor+0x14>)
1a001e66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001e6a:	4b03      	ldr	r3, [pc, #12]	; (1a001e78 <Chip_Clock_GetDividerDivisor+0x18>)
1a001e6c:	5c18      	ldrb	r0, [r3, r0]
}
1a001e6e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001e72:	4770      	bx	lr
1a001e74:	40050000 	.word	0x40050000
1a001e78:	1a002e64 	.word	0x1a002e64

1a001e7c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001e7c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001e7e:	2810      	cmp	r0, #16
1a001e80:	d80a      	bhi.n	1a001e98 <Chip_Clock_GetClockInputHz+0x1c>
1a001e82:	e8df f000 	tbb	[pc, r0]
1a001e86:	0b44      	.short	0x0b44
1a001e88:	0921180d 	.word	0x0921180d
1a001e8c:	2d2a2724 	.word	0x2d2a2724
1a001e90:	34300909 	.word	0x34300909
1a001e94:	3c38      	.short	0x3c38
1a001e96:	40          	.byte	0x40
1a001e97:	00          	.byte	0x00
	uint32_t rate = 0;
1a001e98:	2000      	movs	r0, #0
1a001e9a:	e03a      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001e9c:	481e      	ldr	r0, [pc, #120]	; (1a001f18 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001e9e:	e038      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001ea0:	4b1e      	ldr	r3, [pc, #120]	; (1a001f1c <Chip_Clock_GetClockInputHz+0xa0>)
1a001ea2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001ea6:	f003 0307 	and.w	r3, r3, #7
1a001eaa:	2b04      	cmp	r3, #4
1a001eac:	d001      	beq.n	1a001eb2 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001eae:	481c      	ldr	r0, [pc, #112]	; (1a001f20 <Chip_Clock_GetClockInputHz+0xa4>)
1a001eb0:	e02f      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001eb2:	2000      	movs	r0, #0
1a001eb4:	e02d      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001eb6:	4b19      	ldr	r3, [pc, #100]	; (1a001f1c <Chip_Clock_GetClockInputHz+0xa0>)
1a001eb8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001ebc:	f003 0307 	and.w	r3, r3, #7
1a001ec0:	2b04      	cmp	r3, #4
1a001ec2:	d027      	beq.n	1a001f14 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001ec4:	4816      	ldr	r0, [pc, #88]	; (1a001f20 <Chip_Clock_GetClockInputHz+0xa4>)
1a001ec6:	e024      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001ec8:	4b16      	ldr	r3, [pc, #88]	; (1a001f24 <Chip_Clock_GetClockInputHz+0xa8>)
1a001eca:	6818      	ldr	r0, [r3, #0]
		break;
1a001ecc:	e021      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001ece:	4b16      	ldr	r3, [pc, #88]	; (1a001f28 <Chip_Clock_GetClockInputHz+0xac>)
1a001ed0:	6818      	ldr	r0, [r3, #0]
		break;
1a001ed2:	e01e      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001ed4:	4b15      	ldr	r3, [pc, #84]	; (1a001f2c <Chip_Clock_GetClockInputHz+0xb0>)
1a001ed6:	6818      	ldr	r0, [r3, #0]
		break;
1a001ed8:	e01b      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001eda:	4b14      	ldr	r3, [pc, #80]	; (1a001f2c <Chip_Clock_GetClockInputHz+0xb0>)
1a001edc:	6858      	ldr	r0, [r3, #4]
		break;
1a001ede:	e018      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001ee0:	f000 f868 	bl	1a001fb4 <Chip_Clock_GetMainPLLHz>
		break;
1a001ee4:	e015      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001ee6:	2100      	movs	r1, #0
1a001ee8:	f000 f89a 	bl	1a002020 <Chip_Clock_GetDivRate>
		break;
1a001eec:	e011      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001eee:	2101      	movs	r1, #1
1a001ef0:	f000 f896 	bl	1a002020 <Chip_Clock_GetDivRate>
		break;
1a001ef4:	e00d      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001ef6:	2102      	movs	r1, #2
1a001ef8:	f000 f892 	bl	1a002020 <Chip_Clock_GetDivRate>
		break;
1a001efc:	e009      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001efe:	2103      	movs	r1, #3
1a001f00:	f000 f88e 	bl	1a002020 <Chip_Clock_GetDivRate>
		break;
1a001f04:	e005      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001f06:	2104      	movs	r1, #4
1a001f08:	f000 f88a 	bl	1a002020 <Chip_Clock_GetDivRate>
		break;
1a001f0c:	e001      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a001f0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001f12:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001f14:	4806      	ldr	r0, [pc, #24]	; (1a001f30 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001f16:	e7fc      	b.n	1a001f12 <Chip_Clock_GetClockInputHz+0x96>
1a001f18:	00b71b00 	.word	0x00b71b00
1a001f1c:	40043000 	.word	0x40043000
1a001f20:	017d7840 	.word	0x017d7840
1a001f24:	1a002da8 	.word	0x1a002da8
1a001f28:	1a002dd4 	.word	0x1a002dd4
1a001f2c:	10000c44 	.word	0x10000c44
1a001f30:	02faf080 	.word	0x02faf080

1a001f34 <Chip_Clock_CalcMainPLLValue>:
{
1a001f34:	b538      	push	{r3, r4, r5, lr}
1a001f36:	4605      	mov	r5, r0
1a001f38:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001f3a:	7908      	ldrb	r0, [r1, #4]
1a001f3c:	f7ff ff9e 	bl	1a001e7c <Chip_Clock_GetClockInputHz>
1a001f40:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001f42:	4b19      	ldr	r3, [pc, #100]	; (1a001fa8 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001f44:	442b      	add	r3, r5
1a001f46:	4a19      	ldr	r2, [pc, #100]	; (1a001fac <Chip_Clock_CalcMainPLLValue+0x78>)
1a001f48:	4293      	cmp	r3, r2
1a001f4a:	d821      	bhi.n	1a001f90 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001f4c:	b318      	cbz	r0, 1a001f96 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001f4e:	2380      	movs	r3, #128	; 0x80
1a001f50:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001f52:	2300      	movs	r3, #0
1a001f54:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001f56:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001f58:	fbb5 f3f0 	udiv	r3, r5, r0
1a001f5c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001f5e:	4a14      	ldr	r2, [pc, #80]	; (1a001fb0 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001f60:	4295      	cmp	r5, r2
1a001f62:	d903      	bls.n	1a001f6c <Chip_Clock_CalcMainPLLValue+0x38>
1a001f64:	fb03 f000 	mul.w	r0, r3, r0
1a001f68:	42a8      	cmp	r0, r5
1a001f6a:	d007      	beq.n	1a001f7c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001f6c:	4621      	mov	r1, r4
1a001f6e:	4628      	mov	r0, r5
1a001f70:	f7ff fe96 	bl	1a001ca0 <pll_get_frac>
		if (!ppll->nsel) {
1a001f74:	68a3      	ldr	r3, [r4, #8]
1a001f76:	b18b      	cbz	r3, 1a001f9c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001f78:	3b01      	subs	r3, #1
1a001f7a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001f7c:	6923      	ldr	r3, [r4, #16]
1a001f7e:	b183      	cbz	r3, 1a001fa2 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001f80:	68e2      	ldr	r2, [r4, #12]
1a001f82:	b10a      	cbz	r2, 1a001f88 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001f84:	3a01      	subs	r2, #1
1a001f86:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001f88:	3b01      	subs	r3, #1
1a001f8a:	6123      	str	r3, [r4, #16]
	return 0;
1a001f8c:	2000      	movs	r0, #0
}
1a001f8e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001f94:	e7fb      	b.n	1a001f8e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001f9a:	e7f8      	b.n	1a001f8e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001fa0:	e7f5      	b.n	1a001f8e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001fa6:	e7f2      	b.n	1a001f8e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001fa8:	ff6b3a10 	.word	0xff6b3a10
1a001fac:	0b940510 	.word	0x0b940510
1a001fb0:	094c5eff 	.word	0x094c5eff

1a001fb4 <Chip_Clock_GetMainPLLHz>:
{
1a001fb4:	b530      	push	{r4, r5, lr}
1a001fb6:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001fb8:	4d17      	ldr	r5, [pc, #92]	; (1a002018 <Chip_Clock_GetMainPLLHz+0x64>)
1a001fba:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001fbc:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001fc0:	f7ff ff5c 	bl	1a001e7c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001fc4:	4b15      	ldr	r3, [pc, #84]	; (1a00201c <Chip_Clock_GetMainPLLHz+0x68>)
1a001fc6:	681b      	ldr	r3, [r3, #0]
1a001fc8:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001fca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001fcc:	f013 0f01 	tst.w	r3, #1
1a001fd0:	d020      	beq.n	1a002014 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001fd2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001fd6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001fda:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001fde:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001fe2:	3301      	adds	r3, #1
	n = nsel + 1;
1a001fe4:	3201      	adds	r2, #1
	p = ptab[psel];
1a001fe6:	f10d 0c08 	add.w	ip, sp, #8
1a001fea:	4461      	add	r1, ip
1a001fec:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001ff0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001ff4:	d108      	bne.n	1a002008 <Chip_Clock_GetMainPLLHz+0x54>
1a001ff6:	b93d      	cbnz	r5, 1a002008 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001ff8:	0049      	lsls	r1, r1, #1
1a001ffa:	fbb3 f3f1 	udiv	r3, r3, r1
1a001ffe:	fbb0 f0f2 	udiv	r0, r0, r2
1a002002:	fb00 f003 	mul.w	r0, r0, r3
1a002006:	e003      	b.n	1a002010 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a002008:	fbb0 f0f2 	udiv	r0, r0, r2
1a00200c:	fb03 f000 	mul.w	r0, r3, r0
}
1a002010:	b003      	add	sp, #12
1a002012:	bd30      	pop	{r4, r5, pc}
		return 0;
1a002014:	2000      	movs	r0, #0
1a002016:	e7fb      	b.n	1a002010 <Chip_Clock_GetMainPLLHz+0x5c>
1a002018:	40050000 	.word	0x40050000
1a00201c:	1a002e60 	.word	0x1a002e60

1a002020 <Chip_Clock_GetDivRate>:
{
1a002020:	b538      	push	{r3, r4, r5, lr}
1a002022:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002024:	4608      	mov	r0, r1
1a002026:	f7ff ff0d 	bl	1a001e44 <Chip_Clock_GetDividerSource>
1a00202a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00202c:	4620      	mov	r0, r4
1a00202e:	f7ff ff17 	bl	1a001e60 <Chip_Clock_GetDividerDivisor>
1a002032:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002034:	4628      	mov	r0, r5
1a002036:	f7ff ff21 	bl	1a001e7c <Chip_Clock_GetClockInputHz>
1a00203a:	3401      	adds	r4, #1
}
1a00203c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002040:	bd38      	pop	{r3, r4, r5, pc}
1a002042:	Address 0x000000001a002042 is out of bounds.


1a002044 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002044:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002046:	f100 0416 	add.w	r4, r0, #22
1a00204a:	00a4      	lsls	r4, r4, #2
1a00204c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002050:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002054:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002056:	281b      	cmp	r0, #27
1a002058:	d813      	bhi.n	1a002082 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00205a:	2911      	cmp	r1, #17
1a00205c:	d01a      	beq.n	1a002094 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00205e:	4d0e      	ldr	r5, [pc, #56]	; (1a002098 <Chip_Clock_SetBaseClock+0x54>)
1a002060:	4025      	ands	r5, r4

			if (autoblocken) {
1a002062:	b10a      	cbz	r2, 1a002068 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002064:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002068:	b10b      	cbz	r3, 1a00206e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00206a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00206e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002072:	3016      	adds	r0, #22
1a002074:	0080      	lsls	r0, r0, #2
1a002076:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00207a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00207e:	6045      	str	r5, [r0, #4]
1a002080:	e008      	b.n	1a002094 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002082:	f044 0401 	orr.w	r4, r4, #1
1a002086:	3016      	adds	r0, #22
1a002088:	0080      	lsls	r0, r0, #2
1a00208a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00208e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002092:	6044      	str	r4, [r0, #4]
	}
}
1a002094:	bc30      	pop	{r4, r5}
1a002096:	4770      	bx	lr
1a002098:	e0fff7fe 	.word	0xe0fff7fe

1a00209c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00209c:	281b      	cmp	r0, #27
1a00209e:	d80c      	bhi.n	1a0020ba <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0020a0:	3016      	adds	r0, #22
1a0020a2:	0080      	lsls	r0, r0, #2
1a0020a4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0020a8:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0020ac:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0020ae:	f010 0f01 	tst.w	r0, #1
1a0020b2:	d104      	bne.n	1a0020be <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0020b4:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0020b8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0020ba:	2011      	movs	r0, #17
1a0020bc:	4770      	bx	lr
		return CLKINPUT_PD;
1a0020be:	2011      	movs	r0, #17
}
1a0020c0:	4770      	bx	lr

1a0020c2 <Chip_Clock_GetBaseClocktHz>:
{
1a0020c2:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0020c4:	f7ff ffea 	bl	1a00209c <Chip_Clock_GetBaseClock>
1a0020c8:	f7ff fed8 	bl	1a001e7c <Chip_Clock_GetClockInputHz>
}
1a0020cc:	bd08      	pop	{r3, pc}
1a0020ce:	Address 0x000000001a0020ce is out of bounds.


1a0020d0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0020d0:	b971      	cbnz	r1, 1a0020f0 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0020d2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0020d4:	b10a      	cbz	r2, 1a0020da <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0020d6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0020da:	2b02      	cmp	r3, #2
1a0020dc:	d00a      	beq.n	1a0020f4 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0020de:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0020e2:	d30a      	bcc.n	1a0020fa <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0020e4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0020e8:	4b06      	ldr	r3, [pc, #24]	; (1a002104 <Chip_Clock_EnableOpts+0x34>)
1a0020ea:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0020ee:	4770      	bx	lr
		reg |= (1 << 1);
1a0020f0:	2103      	movs	r1, #3
1a0020f2:	e7ef      	b.n	1a0020d4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0020f4:	f041 0120 	orr.w	r1, r1, #32
1a0020f8:	e7f1      	b.n	1a0020de <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0020fa:	3020      	adds	r0, #32
1a0020fc:	4b02      	ldr	r3, [pc, #8]	; (1a002108 <Chip_Clock_EnableOpts+0x38>)
1a0020fe:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002102:	4770      	bx	lr
1a002104:	40052000 	.word	0x40052000
1a002108:	40051000 	.word	0x40051000

1a00210c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00210c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002110:	d309      	bcc.n	1a002126 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002112:	4a09      	ldr	r2, [pc, #36]	; (1a002138 <Chip_Clock_Enable+0x2c>)
1a002114:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002118:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00211c:	f043 0301 	orr.w	r3, r3, #1
1a002120:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002124:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002126:	4a05      	ldr	r2, [pc, #20]	; (1a00213c <Chip_Clock_Enable+0x30>)
1a002128:	3020      	adds	r0, #32
1a00212a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00212e:	f043 0301 	orr.w	r3, r3, #1
1a002132:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002136:	4770      	bx	lr
1a002138:	40052000 	.word	0x40052000
1a00213c:	40051000 	.word	0x40051000

1a002140 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a002140:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002144:	d309      	bcc.n	1a00215a <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a002146:	4a09      	ldr	r2, [pc, #36]	; (1a00216c <Chip_Clock_Disable+0x2c>)
1a002148:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00214c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002150:	f023 0301 	bic.w	r3, r3, #1
1a002154:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002158:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a00215a:	4a05      	ldr	r2, [pc, #20]	; (1a002170 <Chip_Clock_Disable+0x30>)
1a00215c:	3020      	adds	r0, #32
1a00215e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002162:	f023 0301 	bic.w	r3, r3, #1
1a002166:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00216a:	4770      	bx	lr
1a00216c:	40052000 	.word	0x40052000
1a002170:	40051000 	.word	0x40051000

1a002174 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002174:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002176:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00217a:	d309      	bcc.n	1a002190 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00217c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002180:	4a0d      	ldr	r2, [pc, #52]	; (1a0021b8 <Chip_Clock_GetRate+0x44>)
1a002182:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002186:	f014 0f01 	tst.w	r4, #1
1a00218a:	d107      	bne.n	1a00219c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00218c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00218e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002190:	f100 0320 	add.w	r3, r0, #32
1a002194:	4a09      	ldr	r2, [pc, #36]	; (1a0021bc <Chip_Clock_GetRate+0x48>)
1a002196:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00219a:	e7f4      	b.n	1a002186 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00219c:	f7ff fe06 	bl	1a001dac <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0021a0:	f7ff ff8f 	bl	1a0020c2 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0021a4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0021a8:	d103      	bne.n	1a0021b2 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0021aa:	2301      	movs	r3, #1
		rate = rate / div;
1a0021ac:	fbb0 f0f3 	udiv	r0, r0, r3
1a0021b0:	e7ed      	b.n	1a00218e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0021b2:	2302      	movs	r3, #2
1a0021b4:	e7fa      	b.n	1a0021ac <Chip_Clock_GetRate+0x38>
1a0021b6:	bf00      	nop
1a0021b8:	40052000 	.word	0x40052000
1a0021bc:	40051000 	.word	0x40051000

1a0021c0 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0021c0:	4770      	bx	lr
1a0021c2:	Address 0x000000001a0021c2 is out of bounds.


1a0021c4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0021c4:	b570      	push	{r4, r5, r6, lr}
1a0021c6:	b08a      	sub	sp, #40	; 0x28
1a0021c8:	4605      	mov	r5, r0
1a0021ca:	460e      	mov	r6, r1
1a0021cc:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0021ce:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0021d2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0021d4:	2806      	cmp	r0, #6
1a0021d6:	d018      	beq.n	1a00220a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0021d8:	2300      	movs	r3, #0
1a0021da:	2201      	movs	r2, #1
1a0021dc:	4629      	mov	r1, r5
1a0021de:	2004      	movs	r0, #4
1a0021e0:	f7ff ff30 	bl	1a002044 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0021e4:	4a4a      	ldr	r2, [pc, #296]	; (1a002310 <Chip_SetupCoreClock+0x14c>)
1a0021e6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0021e8:	f043 0301 	orr.w	r3, r3, #1
1a0021ec:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0021ee:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0021f2:	a901      	add	r1, sp, #4
1a0021f4:	4630      	mov	r0, r6
1a0021f6:	f7ff fe9d 	bl	1a001f34 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0021fa:	4b46      	ldr	r3, [pc, #280]	; (1a002314 <Chip_SetupCoreClock+0x150>)
1a0021fc:	429e      	cmp	r6, r3
1a0021fe:	d916      	bls.n	1a00222e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002200:	9b01      	ldr	r3, [sp, #4]
1a002202:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002206:	d003      	beq.n	1a002210 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002208:	e7fe      	b.n	1a002208 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00220a:	f7ff fdf5 	bl	1a001df8 <Chip_Clock_EnableCrystal>
1a00220e:	e7e3      	b.n	1a0021d8 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a002210:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002214:	d005      	beq.n	1a002222 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00221a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a00221c:	2500      	movs	r5, #0
			direct = 1;
1a00221e:	2601      	movs	r6, #1
1a002220:	e007      	b.n	1a002232 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002222:	9b04      	ldr	r3, [sp, #16]
1a002224:	3301      	adds	r3, #1
1a002226:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002228:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00222a:	2600      	movs	r6, #0
1a00222c:	e001      	b.n	1a002232 <Chip_SetupCoreClock+0x6e>
1a00222e:	2500      	movs	r5, #0
1a002230:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002232:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002236:	9b01      	ldr	r3, [sp, #4]
1a002238:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00223c:	9a05      	ldr	r2, [sp, #20]
1a00223e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002242:	9a03      	ldr	r2, [sp, #12]
1a002244:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002248:	9a04      	ldr	r2, [sp, #16]
1a00224a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00224e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002252:	4a2f      	ldr	r2, [pc, #188]	; (1a002310 <Chip_SetupCoreClock+0x14c>)
1a002254:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002256:	4b2e      	ldr	r3, [pc, #184]	; (1a002310 <Chip_SetupCoreClock+0x14c>)
1a002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00225a:	f013 0f01 	tst.w	r3, #1
1a00225e:	d0fa      	beq.n	1a002256 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002260:	2300      	movs	r3, #0
1a002262:	2201      	movs	r2, #1
1a002264:	2109      	movs	r1, #9
1a002266:	2004      	movs	r0, #4
1a002268:	f7ff feec 	bl	1a002044 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00226c:	b306      	cbz	r6, 1a0022b0 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00226e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002272:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002274:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002276:	1e5a      	subs	r2, r3, #1
1a002278:	9209      	str	r2, [sp, #36]	; 0x24
1a00227a:	2b00      	cmp	r3, #0
1a00227c:	d1fa      	bne.n	1a002274 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00227e:	9b01      	ldr	r3, [sp, #4]
1a002280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002284:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002286:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00228a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00228e:	9a05      	ldr	r2, [sp, #20]
1a002290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002294:	9a03      	ldr	r2, [sp, #12]
1a002296:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00229a:	9a04      	ldr	r2, [sp, #16]
1a00229c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0022a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0022a4:	4a1a      	ldr	r2, [pc, #104]	; (1a002310 <Chip_SetupCoreClock+0x14c>)
1a0022a6:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0022a8:	2c00      	cmp	r4, #0
1a0022aa:	d12e      	bne.n	1a00230a <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0022ac:	b00a      	add	sp, #40	; 0x28
1a0022ae:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a0022b0:	2d00      	cmp	r5, #0
1a0022b2:	d0f9      	beq.n	1a0022a8 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0022b4:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0022b8:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0022ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0022bc:	1e5a      	subs	r2, r3, #1
1a0022be:	9209      	str	r2, [sp, #36]	; 0x24
1a0022c0:	2b00      	cmp	r3, #0
1a0022c2:	d1fa      	bne.n	1a0022ba <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a0022c4:	9b04      	ldr	r3, [sp, #16]
1a0022c6:	1e5a      	subs	r2, r3, #1
1a0022c8:	9204      	str	r2, [sp, #16]
1a0022ca:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0022ce:	9b01      	ldr	r3, [sp, #4]
1a0022d0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0022d4:	9905      	ldr	r1, [sp, #20]
1a0022d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0022da:	9903      	ldr	r1, [sp, #12]
1a0022dc:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0022e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0022e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0022e8:	4a09      	ldr	r2, [pc, #36]	; (1a002310 <Chip_SetupCoreClock+0x14c>)
1a0022ea:	6453      	str	r3, [r2, #68]	; 0x44
1a0022ec:	e7dc      	b.n	1a0022a8 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0022ee:	480a      	ldr	r0, [pc, #40]	; (1a002318 <Chip_SetupCoreClock+0x154>)
1a0022f0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0022f4:	78cb      	ldrb	r3, [r1, #3]
1a0022f6:	788a      	ldrb	r2, [r1, #2]
1a0022f8:	7849      	ldrb	r1, [r1, #1]
1a0022fa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0022fe:	f7ff fea1 	bl	1a002044 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002302:	3401      	adds	r4, #1
1a002304:	2c11      	cmp	r4, #17
1a002306:	d9f2      	bls.n	1a0022ee <Chip_SetupCoreClock+0x12a>
1a002308:	e7d0      	b.n	1a0022ac <Chip_SetupCoreClock+0xe8>
1a00230a:	2400      	movs	r4, #0
1a00230c:	e7fa      	b.n	1a002304 <Chip_SetupCoreClock+0x140>
1a00230e:	bf00      	nop
1a002310:	40050000 	.word	0x40050000
1a002314:	068e7780 	.word	0x068e7780
1a002318:	1a002ed8 	.word	0x1a002ed8

1a00231c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00231c:	4b03      	ldr	r3, [pc, #12]	; (1a00232c <Chip_SSP_GetClockIndex+0x10>)
1a00231e:	4298      	cmp	r0, r3
1a002320:	d001      	beq.n	1a002326 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002322:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002324:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002326:	20a5      	movs	r0, #165	; 0xa5
1a002328:	4770      	bx	lr
1a00232a:	bf00      	nop
1a00232c:	400c5000 	.word	0x400c5000

1a002330 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002330:	4b04      	ldr	r3, [pc, #16]	; (1a002344 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a002332:	4298      	cmp	r0, r3
1a002334:	d002      	beq.n	1a00233c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002336:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00233a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00233c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002340:	4770      	bx	lr
1a002342:	bf00      	nop
1a002344:	400c5000 	.word	0x400c5000

1a002348 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002348:	6803      	ldr	r3, [r0, #0]
1a00234a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00234e:	0209      	lsls	r1, r1, #8
1a002350:	b289      	uxth	r1, r1
1a002352:	4319      	orrs	r1, r3
1a002354:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a002356:	6102      	str	r2, [r0, #16]
}
1a002358:	4770      	bx	lr

1a00235a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00235a:	b570      	push	{r4, r5, r6, lr}
1a00235c:	4606      	mov	r6, r0
1a00235e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002360:	f7ff ffe6 	bl	1a002330 <Chip_SSP_GetPeriphClockIndex>
1a002364:	f7ff ff06 	bl	1a002174 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002368:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00236a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00236e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a002370:	e000      	b.n	1a002374 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002372:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a002374:	42ab      	cmp	r3, r5
1a002376:	d90b      	bls.n	1a002390 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002378:	1c4c      	adds	r4, r1, #1
1a00237a:	fb02 f304 	mul.w	r3, r2, r4
1a00237e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002382:	429d      	cmp	r5, r3
1a002384:	d2f6      	bcs.n	1a002374 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a002386:	2cff      	cmp	r4, #255	; 0xff
1a002388:	d9f3      	bls.n	1a002372 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00238a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00238c:	2100      	movs	r1, #0
1a00238e:	e7f1      	b.n	1a002374 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002390:	4630      	mov	r0, r6
1a002392:	f7ff ffd9 	bl	1a002348 <Chip_SSP_SetClockRate>
}
1a002396:	bd70      	pop	{r4, r5, r6, pc}

1a002398 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002398:	b510      	push	{r4, lr}
1a00239a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00239c:	f7ff ffbe 	bl	1a00231c <Chip_SSP_GetClockIndex>
1a0023a0:	f7ff feb4 	bl	1a00210c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0023a4:	4620      	mov	r0, r4
1a0023a6:	f7ff ffc3 	bl	1a002330 <Chip_SSP_GetPeriphClockIndex>
1a0023aa:	f7ff feaf 	bl	1a00210c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0023ae:	6863      	ldr	r3, [r4, #4]
1a0023b0:	f023 0304 	bic.w	r3, r3, #4
1a0023b4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0023b6:	6823      	ldr	r3, [r4, #0]
1a0023b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0023bc:	f043 0307 	orr.w	r3, r3, #7
1a0023c0:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0023c2:	4902      	ldr	r1, [pc, #8]	; (1a0023cc <Chip_SSP_Init+0x34>)
1a0023c4:	4620      	mov	r0, r4
1a0023c6:	f7ff ffc8 	bl	1a00235a <Chip_SSP_SetBitRate>
}
1a0023ca:	bd10      	pop	{r4, pc}
1a0023cc:	000186a0 	.word	0x000186a0

1a0023d0 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0023d0:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0023d2:	4a0b      	ldr	r2, [pc, #44]	; (1a002400 <SystemInit+0x30>)
1a0023d4:	4b0b      	ldr	r3, [pc, #44]	; (1a002404 <SystemInit+0x34>)
1a0023d6:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0023d8:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0023dc:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0023de:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0023e2:	2b20      	cmp	r3, #32
1a0023e4:	d004      	beq.n	1a0023f0 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0023e6:	f7ff fa43 	bl	1a001870 <Board_SystemInit>
   Board_Init();
1a0023ea:	f7ff f9d3 	bl	1a001794 <Board_Init>
}
1a0023ee:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0023f0:	4a04      	ldr	r2, [pc, #16]	; (1a002404 <SystemInit+0x34>)
1a0023f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0023f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0023fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0023fe:	e7f2      	b.n	1a0023e6 <SystemInit+0x16>
1a002400:	1a000000 	.word	0x1a000000
1a002404:	e000ed00 	.word	0xe000ed00

1a002408 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002408:	4b04      	ldr	r3, [pc, #16]	; (1a00241c <cyclesCounterInit+0x14>)
1a00240a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a00240c:	4a04      	ldr	r2, [pc, #16]	; (1a002420 <cyclesCounterInit+0x18>)
1a00240e:	6813      	ldr	r3, [r2, #0]
1a002410:	f043 0301 	orr.w	r3, r3, #1
1a002414:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002416:	2001      	movs	r0, #1
1a002418:	4770      	bx	lr
1a00241a:	bf00      	nop
1a00241c:	10000c34 	.word	0x10000c34
1a002420:	e0001000 	.word	0xe0001000

1a002424 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a002424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002428:	4680      	mov	r8, r0
1a00242a:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a00242c:	4c19      	ldr	r4, [pc, #100]	; (1a002494 <uartInit+0x70>)
1a00242e:	0045      	lsls	r5, r0, #1
1a002430:	182a      	adds	r2, r5, r0
1a002432:	0093      	lsls	r3, r2, #2
1a002434:	18e6      	adds	r6, r4, r3
1a002436:	58e7      	ldr	r7, [r4, r3]
1a002438:	4638      	mov	r0, r7
1a00243a:	f7ff fa73 	bl	1a001924 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00243e:	4649      	mov	r1, r9
1a002440:	4638      	mov	r0, r7
1a002442:	f7ff fa99 	bl	1a001978 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a002446:	2307      	movs	r3, #7
1a002448:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00244a:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a00244c:	2301      	movs	r3, #1
1a00244e:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a002450:	7930      	ldrb	r0, [r6, #4]
1a002452:	7973      	ldrb	r3, [r6, #5]
1a002454:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002456:	f042 0218 	orr.w	r2, r2, #24
1a00245a:	490f      	ldr	r1, [pc, #60]	; (1a002498 <uartInit+0x74>)
1a00245c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002464:	79f0      	ldrb	r0, [r6, #7]
1a002466:	7a33      	ldrb	r3, [r6, #8]
1a002468:	7a72      	ldrb	r2, [r6, #9]
1a00246a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00246e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a002476:	f1b8 0f01 	cmp.w	r8, #1
1a00247a:	d001      	beq.n	1a002480 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a00247c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002480:	4a06      	ldr	r2, [pc, #24]	; (1a00249c <uartInit+0x78>)
1a002482:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002484:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002488:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00248a:	221a      	movs	r2, #26
1a00248c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a002490:	e7f4      	b.n	1a00247c <uartInit+0x58>
1a002492:	bf00      	nop
1a002494:	1a002f20 	.word	0x1a002f20
1a002498:	40086000 	.word	0x40086000
1a00249c:	40081000 	.word	0x40081000

1a0024a0 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a0024a0:	4b01      	ldr	r3, [pc, #4]	; (1a0024a8 <tickRead+0x8>)
1a0024a2:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0024a6:	4770      	bx	lr
1a0024a8:	10000c50 	.word	0x10000c50

1a0024ac <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0024ac:	b118      	cbz	r0, 1a0024b6 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0024ae:	4b04      	ldr	r3, [pc, #16]	; (1a0024c0 <tickPowerSet+0x14>)
1a0024b0:	2207      	movs	r2, #7
1a0024b2:	601a      	str	r2, [r3, #0]
1a0024b4:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a0024b6:	4b02      	ldr	r3, [pc, #8]	; (1a0024c0 <tickPowerSet+0x14>)
1a0024b8:	2200      	movs	r2, #0
1a0024ba:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0024bc:	4770      	bx	lr
1a0024be:	bf00      	nop
1a0024c0:	e000e010 	.word	0xe000e010

1a0024c4 <tickInit>:
{
1a0024c4:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0024c6:	ea50 0401 	orrs.w	r4, r0, r1
1a0024ca:	d02a      	beq.n	1a002522 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0024cc:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0024d0:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0024d4:	2b00      	cmp	r3, #0
1a0024d6:	bf08      	it	eq
1a0024d8:	2a32      	cmpeq	r2, #50	; 0x32
1a0024da:	d227      	bcs.n	1a00252c <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0024dc:	4b14      	ldr	r3, [pc, #80]	; (1a002530 <tickInit+0x6c>)
1a0024de:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0024e2:	4b14      	ldr	r3, [pc, #80]	; (1a002534 <tickInit+0x70>)
1a0024e4:	681b      	ldr	r3, [r3, #0]
1a0024e6:	fba3 4500 	umull	r4, r5, r3, r0
1a0024ea:	fb03 5501 	mla	r5, r3, r1, r5
1a0024ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0024f2:	2300      	movs	r3, #0
1a0024f4:	4620      	mov	r0, r4
1a0024f6:	4629      	mov	r1, r5
1a0024f8:	f000 fa1e 	bl	1a002938 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0024fc:	3801      	subs	r0, #1
1a0024fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a002502:	d209      	bcs.n	1a002518 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a002504:	4b0c      	ldr	r3, [pc, #48]	; (1a002538 <tickInit+0x74>)
1a002506:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a002508:	4a0c      	ldr	r2, [pc, #48]	; (1a00253c <tickInit+0x78>)
1a00250a:	21e0      	movs	r1, #224	; 0xe0
1a00250c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a002510:	2200      	movs	r2, #0
1a002512:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a002514:	2207      	movs	r2, #7
1a002516:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a002518:	2001      	movs	r0, #1
1a00251a:	f7ff ffc7 	bl	1a0024ac <tickPowerSet>
      bool_t ret_val = 1;
1a00251e:	2001      	movs	r0, #1
}
1a002520:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a002522:	2000      	movs	r0, #0
1a002524:	f7ff ffc2 	bl	1a0024ac <tickPowerSet>
         ret_val = 0;
1a002528:	2000      	movs	r0, #0
1a00252a:	e7f9      	b.n	1a002520 <tickInit+0x5c>
            ret_val = 0;
1a00252c:	2000      	movs	r0, #0
1a00252e:	e7f7      	b.n	1a002520 <tickInit+0x5c>
1a002530:	10000c38 	.word	0x10000c38
1a002534:	10000cf0 	.word	0x10000cf0
1a002538:	e000e010 	.word	0xe000e010
1a00253c:	e000ed00 	.word	0xe000ed00

1a002540 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a002540:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a002542:	4a07      	ldr	r2, [pc, #28]	; (1a002560 <SysTick_Handler+0x20>)
1a002544:	6813      	ldr	r3, [r2, #0]
1a002546:	6851      	ldr	r1, [r2, #4]
1a002548:	3301      	adds	r3, #1
1a00254a:	f141 0100 	adc.w	r1, r1, #0
1a00254e:	6013      	str	r3, [r2, #0]
1a002550:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002552:	4b04      	ldr	r3, [pc, #16]	; (1a002564 <SysTick_Handler+0x24>)
1a002554:	681b      	ldr	r3, [r3, #0]
1a002556:	b113      	cbz	r3, 1a00255e <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a002558:	4a03      	ldr	r2, [pc, #12]	; (1a002568 <SysTick_Handler+0x28>)
1a00255a:	6810      	ldr	r0, [r2, #0]
1a00255c:	4798      	blx	r3
   }
}
1a00255e:	bd08      	pop	{r3, pc}
1a002560:	10000c50 	.word	0x10000c50
1a002564:	10000c58 	.word	0x10000c58
1a002568:	10000c4c 	.word	0x10000c4c

1a00256c <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a00256c:	b530      	push	{r4, r5, lr}
1a00256e:	b083      	sub	sp, #12
   T_FIL3  ---- 7   ADC0_0 (ANALOG_SEL)
   T_COL1  ---- 132 ADC0_4 (ANALOG_SEL)
   ENET_MDC --- 140 ADC1_6 (ANALOG_SEL)
   */
   
   switch(config) {
1a002570:	b118      	cbz	r0, 1a00257a <adcInit+0xe>
1a002572:	2801      	cmp	r0, #1
1a002574:	d04a      	beq.n	1a00260c <adcInit+0xa0>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a002576:	b003      	add	sp, #12
1a002578:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a00257a:	4b26      	ldr	r3, [pc, #152]	; (1a002614 <adcInit+0xa8>)
1a00257c:	466d      	mov	r5, sp
1a00257e:	e893 0003 	ldmia.w	r3, {r0, r1}
1a002582:	e885 0003 	stmia.w	r5, {r0, r1}
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a002586:	4c24      	ldr	r4, [pc, #144]	; (1a002618 <adcInit+0xac>)
1a002588:	4629      	mov	r1, r5
1a00258a:	4620      	mov	r0, r4
1a00258c:	f7ff faac 	bl	1a001ae8 <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a002590:	2100      	movs	r1, #0
1a002592:	4620      	mov	r0, r4
1a002594:	f7ff fb18 	bl	1a001bc8 <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a002598:	4a20      	ldr	r2, [pc, #128]	; (1a00261c <adcInit+0xb0>)
1a00259a:	4629      	mov	r1, r5
1a00259c:	4620      	mov	r0, r4
1a00259e:	f7ff fadf 	bl	1a001b60 <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH1, DISABLE );
1a0025a2:	2200      	movs	r2, #0
1a0025a4:	2101      	movs	r1, #1
1a0025a6:	4620      	mov	r0, r4
1a0025a8:	f7ff faf9 	bl	1a001b9e <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a0025ac:	2200      	movs	r2, #0
1a0025ae:	2101      	movs	r1, #1
1a0025b0:	4620      	mov	r0, r4
1a0025b2:	f7ff fac4 	bl	1a001b3e <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a0025b6:	2200      	movs	r2, #0
1a0025b8:	2102      	movs	r1, #2
1a0025ba:	4620      	mov	r0, r4
1a0025bc:	f7ff faef 	bl	1a001b9e <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a0025c0:	2200      	movs	r2, #0
1a0025c2:	2102      	movs	r1, #2
1a0025c4:	4620      	mov	r0, r4
1a0025c6:	f7ff faba 	bl	1a001b3e <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a0025ca:	2200      	movs	r2, #0
1a0025cc:	2103      	movs	r1, #3
1a0025ce:	4620      	mov	r0, r4
1a0025d0:	f7ff fae5 	bl	1a001b9e <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a0025d4:	2200      	movs	r2, #0
1a0025d6:	2103      	movs	r1, #3
1a0025d8:	4620      	mov	r0, r4
1a0025da:	f7ff fab0 	bl	1a001b3e <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a0025de:	2200      	movs	r2, #0
1a0025e0:	2104      	movs	r1, #4
1a0025e2:	4620      	mov	r0, r4
1a0025e4:	f7ff fadb 	bl	1a001b9e <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a0025e8:	2200      	movs	r2, #0
1a0025ea:	2104      	movs	r1, #4
1a0025ec:	4620      	mov	r0, r4
1a0025ee:	f7ff faa6 	bl	1a001b3e <Chip_ADC_Int_SetChannelCmd>
	LPC_SCU->ENAIO[ADC_ID] |= 1UL << channel;
1a0025f2:	4a0b      	ldr	r2, [pc, #44]	; (1a002620 <adcInit+0xb4>)
1a0025f4:	f8d2 3c88 	ldr.w	r3, [r2, #3208]	; 0xc88
1a0025f8:	f043 0310 	orr.w	r3, r3, #16
1a0025fc:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH5, DISABLE ); // Revisar codigo
1a002600:	2200      	movs	r2, #0
1a002602:	2105      	movs	r1, #5
1a002604:	4620      	mov	r0, r4
1a002606:	f7ff fa9a 	bl	1a001b3e <Chip_ADC_Int_SetChannelCmd>
      break;
1a00260a:	e7b4      	b.n	1a002576 <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a00260c:	4802      	ldr	r0, [pc, #8]	; (1a002618 <adcInit+0xac>)
1a00260e:	f7ff fa8b 	bl	1a001b28 <Chip_ADC_DeInit>
}
1a002612:	e7b0      	b.n	1a002576 <adcInit+0xa>
1a002614:	1a002f68 	.word	0x1a002f68
1a002618:	400e3000 	.word	0x400e3000
1a00261c:	00030d40 	.word	0x00030d40
1a002620:	40086000 	.word	0x40086000

1a002624 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002624:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002626:	4d0b      	ldr	r5, [pc, #44]	; (1a002654 <gpioObtainPinInit+0x30>)
1a002628:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00262c:	182c      	adds	r4, r5, r0
1a00262e:	5628      	ldrsb	r0, [r5, r0]
1a002630:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002632:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002636:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002638:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00263c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00263e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002642:	9b02      	ldr	r3, [sp, #8]
1a002644:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002646:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00264a:	9b03      	ldr	r3, [sp, #12]
1a00264c:	701a      	strb	r2, [r3, #0]
}
1a00264e:	bc30      	pop	{r4, r5}
1a002650:	4770      	bx	lr
1a002652:	bf00      	nop
1a002654:	1a002f70 	.word	0x1a002f70

1a002658 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a002658:	f110 0f02 	cmn.w	r0, #2
1a00265c:	f000 80c7 	beq.w	1a0027ee <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a002660:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002664:	f000 80c5 	beq.w	1a0027f2 <gpioInit+0x19a>
{
1a002668:	b570      	push	{r4, r5, r6, lr}
1a00266a:	b084      	sub	sp, #16
1a00266c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00266e:	2300      	movs	r3, #0
1a002670:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002674:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002678:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00267c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002680:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002684:	f10d 030b 	add.w	r3, sp, #11
1a002688:	9301      	str	r3, [sp, #4]
1a00268a:	ab03      	add	r3, sp, #12
1a00268c:	9300      	str	r3, [sp, #0]
1a00268e:	f10d 030d 	add.w	r3, sp, #13
1a002692:	f10d 020e 	add.w	r2, sp, #14
1a002696:	f10d 010f 	add.w	r1, sp, #15
1a00269a:	f7ff ffc3 	bl	1a002624 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00269e:	2c05      	cmp	r4, #5
1a0026a0:	f200 80a9 	bhi.w	1a0027f6 <gpioInit+0x19e>
1a0026a4:	e8df f004 	tbb	[pc, r4]
1a0026a8:	45278109 	.word	0x45278109
1a0026ac:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0026ae:	4853      	ldr	r0, [pc, #332]	; (1a0027fc <gpioInit+0x1a4>)
1a0026b0:	f7ff fd86 	bl	1a0021c0 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0026b4:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0026b6:	b004      	add	sp, #16
1a0026b8:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0026ba:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0026be:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0026c2:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0026c6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0026ca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0026ce:	494c      	ldr	r1, [pc, #304]	; (1a002800 <gpioInit+0x1a8>)
1a0026d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0026d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0026d8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0026dc:	2001      	movs	r0, #1
1a0026de:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0026e2:	4c46      	ldr	r4, [pc, #280]	; (1a0027fc <gpioInit+0x1a4>)
1a0026e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0026e8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0026ec:	ea22 0201 	bic.w	r2, r2, r1
1a0026f0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0026f4:	e7df      	b.n	1a0026b6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0026f6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0026fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0026fe:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002702:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a002706:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00270a:	493d      	ldr	r1, [pc, #244]	; (1a002800 <gpioInit+0x1a8>)
1a00270c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002710:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002714:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002718:	2001      	movs	r0, #1
1a00271a:	fa00 f102 	lsl.w	r1, r0, r2
1a00271e:	4c37      	ldr	r4, [pc, #220]	; (1a0027fc <gpioInit+0x1a4>)
1a002720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002724:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002728:	ea22 0201 	bic.w	r2, r2, r1
1a00272c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002730:	e7c1      	b.n	1a0026b6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002732:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002736:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00273a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00273e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002742:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002746:	492e      	ldr	r1, [pc, #184]	; (1a002800 <gpioInit+0x1a8>)
1a002748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00274c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002750:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002754:	2001      	movs	r0, #1
1a002756:	fa00 f102 	lsl.w	r1, r0, r2
1a00275a:	4c28      	ldr	r4, [pc, #160]	; (1a0027fc <gpioInit+0x1a4>)
1a00275c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002760:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002764:	ea22 0201 	bic.w	r2, r2, r1
1a002768:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00276c:	e7a3      	b.n	1a0026b6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00276e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002772:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002776:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00277a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00277e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002782:	491f      	ldr	r1, [pc, #124]	; (1a002800 <gpioInit+0x1a8>)
1a002784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002788:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00278c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002790:	2001      	movs	r0, #1
1a002792:	fa00 f102 	lsl.w	r1, r0, r2
1a002796:	4c19      	ldr	r4, [pc, #100]	; (1a0027fc <gpioInit+0x1a4>)
1a002798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00279c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0027a0:	ea22 0201 	bic.w	r2, r2, r1
1a0027a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0027a8:	e785      	b.n	1a0026b6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0027aa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0027ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0027b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0027b6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0027ba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0027be:	4910      	ldr	r1, [pc, #64]	; (1a002800 <gpioInit+0x1a8>)
1a0027c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0027c4:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0027c8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0027cc:	2001      	movs	r0, #1
1a0027ce:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0027d2:	4b0a      	ldr	r3, [pc, #40]	; (1a0027fc <gpioInit+0x1a4>)
1a0027d4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0027d8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0027dc:	4331      	orrs	r1, r6
1a0027de:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0027e2:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0027e4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0027e8:	2100      	movs	r1, #0
1a0027ea:	5499      	strb	r1, [r3, r2]
1a0027ec:	e763      	b.n	1a0026b6 <gpioInit+0x5e>
	  return FALSE;
1a0027ee:	2000      	movs	r0, #0
1a0027f0:	4770      	bx	lr
	  return FALSE;
1a0027f2:	2000      	movs	r0, #0
}
1a0027f4:	4770      	bx	lr
      ret_val = 0;
1a0027f6:	2000      	movs	r0, #0
1a0027f8:	e75d      	b.n	1a0026b6 <gpioInit+0x5e>
1a0027fa:	bf00      	nop
1a0027fc:	400f4000 	.word	0x400f4000
1a002800:	40086000 	.word	0x40086000

1a002804 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a002804:	f110 0f02 	cmn.w	r0, #2
1a002808:	d02d      	beq.n	1a002866 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a00280a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00280e:	d02c      	beq.n	1a00286a <gpioWrite+0x66>
{
1a002810:	b510      	push	{r4, lr}
1a002812:	b084      	sub	sp, #16
1a002814:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002816:	2300      	movs	r3, #0
1a002818:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00281c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002820:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002824:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002828:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00282c:	f10d 030b 	add.w	r3, sp, #11
1a002830:	9301      	str	r3, [sp, #4]
1a002832:	ab03      	add	r3, sp, #12
1a002834:	9300      	str	r3, [sp, #0]
1a002836:	f10d 030d 	add.w	r3, sp, #13
1a00283a:	f10d 020e 	add.w	r2, sp, #14
1a00283e:	f10d 010f 	add.w	r1, sp, #15
1a002842:	f7ff feef 	bl	1a002624 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002846:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00284a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00284e:	1c21      	adds	r1, r4, #0
1a002850:	bf18      	it	ne
1a002852:	2101      	movne	r1, #1
1a002854:	015b      	lsls	r3, r3, #5
1a002856:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00285a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00285e:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a002860:	2001      	movs	r0, #1
}
1a002862:	b004      	add	sp, #16
1a002864:	bd10      	pop	{r4, pc}
	  return FALSE;
1a002866:	2000      	movs	r0, #0
1a002868:	4770      	bx	lr
	  return FALSE;
1a00286a:	2000      	movs	r0, #0
}
1a00286c:	4770      	bx	lr
1a00286e:	Address 0x000000001a00286e is out of bounds.


1a002870 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a002870:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a002872:	4b04      	ldr	r3, [pc, #16]	; (1a002884 <USB0_IRQHandler+0x14>)
1a002874:	681b      	ldr	r3, [r3, #0]
1a002876:	681b      	ldr	r3, [r3, #0]
1a002878:	68db      	ldr	r3, [r3, #12]
1a00287a:	4a03      	ldr	r2, [pc, #12]	; (1a002888 <USB0_IRQHandler+0x18>)
1a00287c:	6810      	ldr	r0, [r2, #0]
1a00287e:	4798      	blx	r3
}
1a002880:	bd08      	pop	{r3, pc}
1a002882:	bf00      	nop
1a002884:	10000cf4 	.word	0x10000cf4
1a002888:	10000c5c 	.word	0x10000c5c

1a00288c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00288c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00288e:	f7ff f9ad 	bl	1a001bec <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a002892:	4b1a      	ldr	r3, [pc, #104]	; (1a0028fc <boardInit+0x70>)
1a002894:	6818      	ldr	r0, [r3, #0]
1a002896:	f7ff fdb7 	bl	1a002408 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a00289a:	2001      	movs	r0, #1
1a00289c:	2100      	movs	r1, #0
1a00289e:	f7ff fe11 	bl	1a0024c4 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0028a2:	2105      	movs	r1, #5
1a0028a4:	2000      	movs	r0, #0
1a0028a6:	f7ff fed7 	bl	1a002658 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0028aa:	2100      	movs	r1, #0
1a0028ac:	2024      	movs	r0, #36	; 0x24
1a0028ae:	f7ff fed3 	bl	1a002658 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0028b2:	2100      	movs	r1, #0
1a0028b4:	2025      	movs	r0, #37	; 0x25
1a0028b6:	f7ff fecf 	bl	1a002658 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0028ba:	2100      	movs	r1, #0
1a0028bc:	2026      	movs	r0, #38	; 0x26
1a0028be:	f7ff fecb 	bl	1a002658 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0028c2:	2100      	movs	r1, #0
1a0028c4:	2027      	movs	r0, #39	; 0x27
1a0028c6:	f7ff fec7 	bl	1a002658 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0028ca:	2101      	movs	r1, #1
1a0028cc:	2028      	movs	r0, #40	; 0x28
1a0028ce:	f7ff fec3 	bl	1a002658 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0028d2:	2101      	movs	r1, #1
1a0028d4:	2029      	movs	r0, #41	; 0x29
1a0028d6:	f7ff febf 	bl	1a002658 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0028da:	2101      	movs	r1, #1
1a0028dc:	202a      	movs	r0, #42	; 0x2a
1a0028de:	f7ff febb 	bl	1a002658 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0028e2:	2101      	movs	r1, #1
1a0028e4:	202b      	movs	r0, #43	; 0x2b
1a0028e6:	f7ff feb7 	bl	1a002658 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0028ea:	2101      	movs	r1, #1
1a0028ec:	202c      	movs	r0, #44	; 0x2c
1a0028ee:	f7ff feb3 	bl	1a002658 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0028f2:	2101      	movs	r1, #1
1a0028f4:	202d      	movs	r0, #45	; 0x2d
1a0028f6:	f7ff feaf 	bl	1a002658 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0028fa:	bd08      	pop	{r3, pc}
1a0028fc:	10000cf0 	.word	0x10000cf0

1a002900 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a002900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002904:	4680      	mov	r8, r0
1a002906:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a002908:	f7ff fdca 	bl	1a0024a0 <tickRead>
1a00290c:	4606      	mov	r6, r0
1a00290e:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a002910:	f7ff fdc6 	bl	1a0024a0 <tickRead>
1a002914:	1b84      	subs	r4, r0, r6
1a002916:	eb61 0507 	sbc.w	r5, r1, r7
1a00291a:	4b06      	ldr	r3, [pc, #24]	; (1a002934 <delay+0x34>)
1a00291c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002920:	4640      	mov	r0, r8
1a002922:	4649      	mov	r1, r9
1a002924:	f000 f808 	bl	1a002938 <__aeabi_uldivmod>
1a002928:	428d      	cmp	r5, r1
1a00292a:	bf08      	it	eq
1a00292c:	4284      	cmpeq	r4, r0
1a00292e:	d3ef      	bcc.n	1a002910 <delay+0x10>
}
1a002930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002934:	10000c38 	.word	0x10000c38

1a002938 <__aeabi_uldivmod>:
1a002938:	b953      	cbnz	r3, 1a002950 <__aeabi_uldivmod+0x18>
1a00293a:	b94a      	cbnz	r2, 1a002950 <__aeabi_uldivmod+0x18>
1a00293c:	2900      	cmp	r1, #0
1a00293e:	bf08      	it	eq
1a002940:	2800      	cmpeq	r0, #0
1a002942:	bf1c      	itt	ne
1a002944:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002948:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00294c:	f000 b974 	b.w	1a002c38 <__aeabi_idiv0>
1a002950:	f1ad 0c08 	sub.w	ip, sp, #8
1a002954:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002958:	f000 f806 	bl	1a002968 <__udivmoddi4>
1a00295c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002964:	b004      	add	sp, #16
1a002966:	4770      	bx	lr

1a002968 <__udivmoddi4>:
1a002968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00296c:	9e08      	ldr	r6, [sp, #32]
1a00296e:	4604      	mov	r4, r0
1a002970:	4688      	mov	r8, r1
1a002972:	2b00      	cmp	r3, #0
1a002974:	f040 8085 	bne.w	1a002a82 <__udivmoddi4+0x11a>
1a002978:	428a      	cmp	r2, r1
1a00297a:	4615      	mov	r5, r2
1a00297c:	d948      	bls.n	1a002a10 <__udivmoddi4+0xa8>
1a00297e:	fab2 f282 	clz	r2, r2
1a002982:	b14a      	cbz	r2, 1a002998 <__udivmoddi4+0x30>
1a002984:	f1c2 0720 	rsb	r7, r2, #32
1a002988:	fa01 f302 	lsl.w	r3, r1, r2
1a00298c:	fa20 f707 	lsr.w	r7, r0, r7
1a002990:	4095      	lsls	r5, r2
1a002992:	ea47 0803 	orr.w	r8, r7, r3
1a002996:	4094      	lsls	r4, r2
1a002998:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00299c:	0c23      	lsrs	r3, r4, #16
1a00299e:	fbb8 f7fe 	udiv	r7, r8, lr
1a0029a2:	fa1f fc85 	uxth.w	ip, r5
1a0029a6:	fb0e 8817 	mls	r8, lr, r7, r8
1a0029aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0029ae:	fb07 f10c 	mul.w	r1, r7, ip
1a0029b2:	4299      	cmp	r1, r3
1a0029b4:	d909      	bls.n	1a0029ca <__udivmoddi4+0x62>
1a0029b6:	18eb      	adds	r3, r5, r3
1a0029b8:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0029bc:	f080 80e3 	bcs.w	1a002b86 <__udivmoddi4+0x21e>
1a0029c0:	4299      	cmp	r1, r3
1a0029c2:	f240 80e0 	bls.w	1a002b86 <__udivmoddi4+0x21e>
1a0029c6:	3f02      	subs	r7, #2
1a0029c8:	442b      	add	r3, r5
1a0029ca:	1a5b      	subs	r3, r3, r1
1a0029cc:	b2a4      	uxth	r4, r4
1a0029ce:	fbb3 f0fe 	udiv	r0, r3, lr
1a0029d2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0029d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0029da:	fb00 fc0c 	mul.w	ip, r0, ip
1a0029de:	45a4      	cmp	ip, r4
1a0029e0:	d909      	bls.n	1a0029f6 <__udivmoddi4+0x8e>
1a0029e2:	192c      	adds	r4, r5, r4
1a0029e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0029e8:	f080 80cb 	bcs.w	1a002b82 <__udivmoddi4+0x21a>
1a0029ec:	45a4      	cmp	ip, r4
1a0029ee:	f240 80c8 	bls.w	1a002b82 <__udivmoddi4+0x21a>
1a0029f2:	3802      	subs	r0, #2
1a0029f4:	442c      	add	r4, r5
1a0029f6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0029fa:	eba4 040c 	sub.w	r4, r4, ip
1a0029fe:	2700      	movs	r7, #0
1a002a00:	b11e      	cbz	r6, 1a002a0a <__udivmoddi4+0xa2>
1a002a02:	40d4      	lsrs	r4, r2
1a002a04:	2300      	movs	r3, #0
1a002a06:	e9c6 4300 	strd	r4, r3, [r6]
1a002a0a:	4639      	mov	r1, r7
1a002a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002a10:	2a00      	cmp	r2, #0
1a002a12:	d053      	beq.n	1a002abc <__udivmoddi4+0x154>
1a002a14:	fab2 f282 	clz	r2, r2
1a002a18:	2a00      	cmp	r2, #0
1a002a1a:	f040 80b6 	bne.w	1a002b8a <__udivmoddi4+0x222>
1a002a1e:	1b49      	subs	r1, r1, r5
1a002a20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002a24:	fa1f f885 	uxth.w	r8, r5
1a002a28:	2701      	movs	r7, #1
1a002a2a:	fbb1 fcfe 	udiv	ip, r1, lr
1a002a2e:	0c23      	lsrs	r3, r4, #16
1a002a30:	fb0e 111c 	mls	r1, lr, ip, r1
1a002a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002a38:	fb08 f10c 	mul.w	r1, r8, ip
1a002a3c:	4299      	cmp	r1, r3
1a002a3e:	d907      	bls.n	1a002a50 <__udivmoddi4+0xe8>
1a002a40:	18eb      	adds	r3, r5, r3
1a002a42:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a002a46:	d202      	bcs.n	1a002a4e <__udivmoddi4+0xe6>
1a002a48:	4299      	cmp	r1, r3
1a002a4a:	f200 80ec 	bhi.w	1a002c26 <__udivmoddi4+0x2be>
1a002a4e:	4684      	mov	ip, r0
1a002a50:	1a59      	subs	r1, r3, r1
1a002a52:	b2a3      	uxth	r3, r4
1a002a54:	fbb1 f0fe 	udiv	r0, r1, lr
1a002a58:	fb0e 1410 	mls	r4, lr, r0, r1
1a002a5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002a60:	fb08 f800 	mul.w	r8, r8, r0
1a002a64:	45a0      	cmp	r8, r4
1a002a66:	d907      	bls.n	1a002a78 <__udivmoddi4+0x110>
1a002a68:	192c      	adds	r4, r5, r4
1a002a6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002a6e:	d202      	bcs.n	1a002a76 <__udivmoddi4+0x10e>
1a002a70:	45a0      	cmp	r8, r4
1a002a72:	f200 80dc 	bhi.w	1a002c2e <__udivmoddi4+0x2c6>
1a002a76:	4618      	mov	r0, r3
1a002a78:	eba4 0408 	sub.w	r4, r4, r8
1a002a7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002a80:	e7be      	b.n	1a002a00 <__udivmoddi4+0x98>
1a002a82:	428b      	cmp	r3, r1
1a002a84:	d908      	bls.n	1a002a98 <__udivmoddi4+0x130>
1a002a86:	2e00      	cmp	r6, #0
1a002a88:	d078      	beq.n	1a002b7c <__udivmoddi4+0x214>
1a002a8a:	2700      	movs	r7, #0
1a002a8c:	e9c6 0100 	strd	r0, r1, [r6]
1a002a90:	4638      	mov	r0, r7
1a002a92:	4639      	mov	r1, r7
1a002a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002a98:	fab3 f783 	clz	r7, r3
1a002a9c:	b97f      	cbnz	r7, 1a002abe <__udivmoddi4+0x156>
1a002a9e:	428b      	cmp	r3, r1
1a002aa0:	d302      	bcc.n	1a002aa8 <__udivmoddi4+0x140>
1a002aa2:	4282      	cmp	r2, r0
1a002aa4:	f200 80bd 	bhi.w	1a002c22 <__udivmoddi4+0x2ba>
1a002aa8:	1a84      	subs	r4, r0, r2
1a002aaa:	eb61 0303 	sbc.w	r3, r1, r3
1a002aae:	2001      	movs	r0, #1
1a002ab0:	4698      	mov	r8, r3
1a002ab2:	2e00      	cmp	r6, #0
1a002ab4:	d0a9      	beq.n	1a002a0a <__udivmoddi4+0xa2>
1a002ab6:	e9c6 4800 	strd	r4, r8, [r6]
1a002aba:	e7a6      	b.n	1a002a0a <__udivmoddi4+0xa2>
1a002abc:	deff      	udf	#255	; 0xff
1a002abe:	f1c7 0520 	rsb	r5, r7, #32
1a002ac2:	40bb      	lsls	r3, r7
1a002ac4:	fa22 fc05 	lsr.w	ip, r2, r5
1a002ac8:	ea4c 0c03 	orr.w	ip, ip, r3
1a002acc:	fa01 f407 	lsl.w	r4, r1, r7
1a002ad0:	fa20 f805 	lsr.w	r8, r0, r5
1a002ad4:	fa21 f305 	lsr.w	r3, r1, r5
1a002ad8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002adc:	ea48 0404 	orr.w	r4, r8, r4
1a002ae0:	fbb3 f9fe 	udiv	r9, r3, lr
1a002ae4:	0c21      	lsrs	r1, r4, #16
1a002ae6:	fb0e 3319 	mls	r3, lr, r9, r3
1a002aea:	fa1f f88c 	uxth.w	r8, ip
1a002aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002af2:	fb09 fa08 	mul.w	sl, r9, r8
1a002af6:	459a      	cmp	sl, r3
1a002af8:	fa02 f207 	lsl.w	r2, r2, r7
1a002afc:	fa00 f107 	lsl.w	r1, r0, r7
1a002b00:	d90b      	bls.n	1a002b1a <__udivmoddi4+0x1b2>
1a002b02:	eb1c 0303 	adds.w	r3, ip, r3
1a002b06:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002b0a:	f080 8088 	bcs.w	1a002c1e <__udivmoddi4+0x2b6>
1a002b0e:	459a      	cmp	sl, r3
1a002b10:	f240 8085 	bls.w	1a002c1e <__udivmoddi4+0x2b6>
1a002b14:	f1a9 0902 	sub.w	r9, r9, #2
1a002b18:	4463      	add	r3, ip
1a002b1a:	eba3 030a 	sub.w	r3, r3, sl
1a002b1e:	b2a4      	uxth	r4, r4
1a002b20:	fbb3 f0fe 	udiv	r0, r3, lr
1a002b24:	fb0e 3310 	mls	r3, lr, r0, r3
1a002b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002b2c:	fb00 f808 	mul.w	r8, r0, r8
1a002b30:	45a0      	cmp	r8, r4
1a002b32:	d908      	bls.n	1a002b46 <__udivmoddi4+0x1de>
1a002b34:	eb1c 0404 	adds.w	r4, ip, r4
1a002b38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002b3c:	d26b      	bcs.n	1a002c16 <__udivmoddi4+0x2ae>
1a002b3e:	45a0      	cmp	r8, r4
1a002b40:	d969      	bls.n	1a002c16 <__udivmoddi4+0x2ae>
1a002b42:	3802      	subs	r0, #2
1a002b44:	4464      	add	r4, ip
1a002b46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002b4a:	eba4 0408 	sub.w	r4, r4, r8
1a002b4e:	fba0 8902 	umull	r8, r9, r0, r2
1a002b52:	454c      	cmp	r4, r9
1a002b54:	46c6      	mov	lr, r8
1a002b56:	464b      	mov	r3, r9
1a002b58:	d354      	bcc.n	1a002c04 <__udivmoddi4+0x29c>
1a002b5a:	d051      	beq.n	1a002c00 <__udivmoddi4+0x298>
1a002b5c:	2e00      	cmp	r6, #0
1a002b5e:	d069      	beq.n	1a002c34 <__udivmoddi4+0x2cc>
1a002b60:	ebb1 020e 	subs.w	r2, r1, lr
1a002b64:	eb64 0403 	sbc.w	r4, r4, r3
1a002b68:	fa04 f505 	lsl.w	r5, r4, r5
1a002b6c:	fa22 f307 	lsr.w	r3, r2, r7
1a002b70:	40fc      	lsrs	r4, r7
1a002b72:	431d      	orrs	r5, r3
1a002b74:	e9c6 5400 	strd	r5, r4, [r6]
1a002b78:	2700      	movs	r7, #0
1a002b7a:	e746      	b.n	1a002a0a <__udivmoddi4+0xa2>
1a002b7c:	4637      	mov	r7, r6
1a002b7e:	4630      	mov	r0, r6
1a002b80:	e743      	b.n	1a002a0a <__udivmoddi4+0xa2>
1a002b82:	4618      	mov	r0, r3
1a002b84:	e737      	b.n	1a0029f6 <__udivmoddi4+0x8e>
1a002b86:	4607      	mov	r7, r0
1a002b88:	e71f      	b.n	1a0029ca <__udivmoddi4+0x62>
1a002b8a:	f1c2 0320 	rsb	r3, r2, #32
1a002b8e:	fa20 f703 	lsr.w	r7, r0, r3
1a002b92:	4095      	lsls	r5, r2
1a002b94:	fa01 f002 	lsl.w	r0, r1, r2
1a002b98:	fa21 f303 	lsr.w	r3, r1, r3
1a002b9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002ba0:	4338      	orrs	r0, r7
1a002ba2:	0c01      	lsrs	r1, r0, #16
1a002ba4:	fbb3 f7fe 	udiv	r7, r3, lr
1a002ba8:	fa1f f885 	uxth.w	r8, r5
1a002bac:	fb0e 3317 	mls	r3, lr, r7, r3
1a002bb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002bb4:	fb07 f308 	mul.w	r3, r7, r8
1a002bb8:	428b      	cmp	r3, r1
1a002bba:	fa04 f402 	lsl.w	r4, r4, r2
1a002bbe:	d907      	bls.n	1a002bd0 <__udivmoddi4+0x268>
1a002bc0:	1869      	adds	r1, r5, r1
1a002bc2:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a002bc6:	d228      	bcs.n	1a002c1a <__udivmoddi4+0x2b2>
1a002bc8:	428b      	cmp	r3, r1
1a002bca:	d926      	bls.n	1a002c1a <__udivmoddi4+0x2b2>
1a002bcc:	3f02      	subs	r7, #2
1a002bce:	4429      	add	r1, r5
1a002bd0:	1acb      	subs	r3, r1, r3
1a002bd2:	b281      	uxth	r1, r0
1a002bd4:	fbb3 f0fe 	udiv	r0, r3, lr
1a002bd8:	fb0e 3310 	mls	r3, lr, r0, r3
1a002bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002be0:	fb00 f308 	mul.w	r3, r0, r8
1a002be4:	428b      	cmp	r3, r1
1a002be6:	d907      	bls.n	1a002bf8 <__udivmoddi4+0x290>
1a002be8:	1869      	adds	r1, r5, r1
1a002bea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002bee:	d210      	bcs.n	1a002c12 <__udivmoddi4+0x2aa>
1a002bf0:	428b      	cmp	r3, r1
1a002bf2:	d90e      	bls.n	1a002c12 <__udivmoddi4+0x2aa>
1a002bf4:	3802      	subs	r0, #2
1a002bf6:	4429      	add	r1, r5
1a002bf8:	1ac9      	subs	r1, r1, r3
1a002bfa:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002bfe:	e714      	b.n	1a002a2a <__udivmoddi4+0xc2>
1a002c00:	4541      	cmp	r1, r8
1a002c02:	d2ab      	bcs.n	1a002b5c <__udivmoddi4+0x1f4>
1a002c04:	ebb8 0e02 	subs.w	lr, r8, r2
1a002c08:	eb69 020c 	sbc.w	r2, r9, ip
1a002c0c:	3801      	subs	r0, #1
1a002c0e:	4613      	mov	r3, r2
1a002c10:	e7a4      	b.n	1a002b5c <__udivmoddi4+0x1f4>
1a002c12:	4660      	mov	r0, ip
1a002c14:	e7f0      	b.n	1a002bf8 <__udivmoddi4+0x290>
1a002c16:	4618      	mov	r0, r3
1a002c18:	e795      	b.n	1a002b46 <__udivmoddi4+0x1de>
1a002c1a:	4667      	mov	r7, ip
1a002c1c:	e7d8      	b.n	1a002bd0 <__udivmoddi4+0x268>
1a002c1e:	4681      	mov	r9, r0
1a002c20:	e77b      	b.n	1a002b1a <__udivmoddi4+0x1b2>
1a002c22:	4638      	mov	r0, r7
1a002c24:	e745      	b.n	1a002ab2 <__udivmoddi4+0x14a>
1a002c26:	f1ac 0c02 	sub.w	ip, ip, #2
1a002c2a:	442b      	add	r3, r5
1a002c2c:	e710      	b.n	1a002a50 <__udivmoddi4+0xe8>
1a002c2e:	3802      	subs	r0, #2
1a002c30:	442c      	add	r4, r5
1a002c32:	e721      	b.n	1a002a78 <__udivmoddi4+0x110>
1a002c34:	4637      	mov	r7, r6
1a002c36:	e6e8      	b.n	1a002a0a <__udivmoddi4+0xa2>

1a002c38 <__aeabi_idiv0>:
1a002c38:	4770      	bx	lr
1a002c3a:	bf00      	nop

1a002c3c <__libc_init_array>:
1a002c3c:	b570      	push	{r4, r5, r6, lr}
1a002c3e:	4d0d      	ldr	r5, [pc, #52]	; (1a002c74 <__libc_init_array+0x38>)
1a002c40:	4c0d      	ldr	r4, [pc, #52]	; (1a002c78 <__libc_init_array+0x3c>)
1a002c42:	1b64      	subs	r4, r4, r5
1a002c44:	10a4      	asrs	r4, r4, #2
1a002c46:	2600      	movs	r6, #0
1a002c48:	42a6      	cmp	r6, r4
1a002c4a:	d109      	bne.n	1a002c60 <__libc_init_array+0x24>
1a002c4c:	4d0b      	ldr	r5, [pc, #44]	; (1a002c7c <__libc_init_array+0x40>)
1a002c4e:	4c0c      	ldr	r4, [pc, #48]	; (1a002c80 <__libc_init_array+0x44>)
1a002c50:	f7fe fce5 	bl	1a00161e <_init>
1a002c54:	1b64      	subs	r4, r4, r5
1a002c56:	10a4      	asrs	r4, r4, #2
1a002c58:	2600      	movs	r6, #0
1a002c5a:	42a6      	cmp	r6, r4
1a002c5c:	d105      	bne.n	1a002c6a <__libc_init_array+0x2e>
1a002c5e:	bd70      	pop	{r4, r5, r6, pc}
1a002c60:	f855 3b04 	ldr.w	r3, [r5], #4
1a002c64:	4798      	blx	r3
1a002c66:	3601      	adds	r6, #1
1a002c68:	e7ee      	b.n	1a002c48 <__libc_init_array+0xc>
1a002c6a:	f855 3b04 	ldr.w	r3, [r5], #4
1a002c6e:	4798      	blx	r3
1a002c70:	3601      	adds	r6, #1
1a002c72:	e7f2      	b.n	1a002c5a <__libc_init_array+0x1e>
1a002c74:	1a003058 	.word	0x1a003058
1a002c78:	1a003058 	.word	0x1a003058
1a002c7c:	1a003058 	.word	0x1a003058
1a002c80:	1a00305c 	.word	0x1a00305c

1a002c84 <memcpy>:
1a002c84:	440a      	add	r2, r1
1a002c86:	4291      	cmp	r1, r2
1a002c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002c8c:	d100      	bne.n	1a002c90 <memcpy+0xc>
1a002c8e:	4770      	bx	lr
1a002c90:	b510      	push	{r4, lr}
1a002c92:	f811 4b01 	ldrb.w	r4, [r1], #1
1a002c96:	f803 4f01 	strb.w	r4, [r3, #1]!
1a002c9a:	4291      	cmp	r1, r2
1a002c9c:	d1f9      	bne.n	1a002c92 <memcpy+0xe>
1a002c9e:	bd10      	pop	{r4, pc}

1a002ca0 <memset>:
1a002ca0:	4402      	add	r2, r0
1a002ca2:	4603      	mov	r3, r0
1a002ca4:	4293      	cmp	r3, r2
1a002ca6:	d100      	bne.n	1a002caa <memset+0xa>
1a002ca8:	4770      	bx	lr
1a002caa:	f803 1b01 	strb.w	r1, [r3], #1
1a002cae:	e7f9      	b.n	1a002ca4 <memset+0x4>
1a002cb0:	000000ef 	.word	0x000000ef
1a002cb4:	000000ef 	.word	0x000000ef
1a002cb8:	000000ef 	.word	0x000000ef
1a002cbc:	000000ef 	.word	0x000000ef
1a002cc0:	000000ef 	.word	0x000000ef
1a002cc4:	000000ef 	.word	0x000000ef
1a002cc8:	000000af 	.word	0x000000af
1a002ccc:	000000af 	.word	0x000000af
1a002cd0:	000000ef 	.word	0x000000ef
1a002cd4:	0000007f 	.word	0x0000007f
1a002cd8:	0000007f 	.word	0x0000007f
1a002cdc:	000000ef 	.word	0x000000ef
1a002ce0:	0000010f 	.word	0x0000010f
1a002ce4:	000001df 	.word	0x000001df
1a002ce8:	000000ef 	.word	0x000000ef
1a002cec:	000000ef 	.word	0x000000ef
1a002cf0:	000000ef 	.word	0x000000ef
1a002cf4:	000000ef 	.word	0x000000ef
1a002cf8:	000000ef 	.word	0x000000ef
1a002cfc:	000000ef 	.word	0x000000ef
1a002d00:	000001df 	.word	0x000001df
1a002d04:	0000013f 	.word	0x0000013f
1a002d08:	000000ef 	.word	0x000000ef
1a002d0c:	000000af 	.word	0x000000af
1a002d10:	00000000 	.word	0x00000000
1a002d14:	000000ef 	.word	0x000000ef
1a002d18:	000000ef 	.word	0x000000ef
1a002d1c:	0000013f 	.word	0x0000013f
1a002d20:	0000013f 	.word	0x0000013f
1a002d24:	0000031f 	.word	0x0000031f
1a002d28:	0000007f 	.word	0x0000007f
1a002d2c:	0000013f 	.word	0x0000013f
1a002d30:	0000018f 	.word	0x0000018f
1a002d34:	0000013f 	.word	0x0000013f
1a002d38:	0000013f 	.word	0x0000013f
1a002d3c:	0000013f 	.word	0x0000013f
1a002d40:	0000013f 	.word	0x0000013f
1a002d44:	000000db 	.word	0x000000db
1a002d48:	000000db 	.word	0x000000db
1a002d4c:	0000018f 	.word	0x0000018f
1a002d50:	0000009f 	.word	0x0000009f
1a002d54:	0000007f 	.word	0x0000007f
1a002d58:	0000013f 	.word	0x0000013f
1a002d5c:	000001df 	.word	0x000001df
1a002d60:	0000031f 	.word	0x0000031f
1a002d64:	0000013f 	.word	0x0000013f
1a002d68:	0000013f 	.word	0x0000013f
1a002d6c:	0000013f 	.word	0x0000013f
1a002d70:	0000013f 	.word	0x0000013f
1a002d74:	0000013f 	.word	0x0000013f
1a002d78:	0000013f 	.word	0x0000013f
1a002d7c:	0000031f 	.word	0x0000031f
1a002d80:	000001df 	.word	0x000001df
1a002d84:	0000013f 	.word	0x0000013f
1a002d88:	000000db 	.word	0x000000db
1a002d8c:	00000000 	.word	0x00000000
1a002d90:	0000013f 	.word	0x0000013f
1a002d94:	0000013f 	.word	0x0000013f
1a002d98:	000001df 	.word	0x000001df
1a002d9c:	000001df 	.word	0x000001df
1a002da0:	000001df 	.word	0x000001df
1a002da4:	0000009f 	.word	0x0000009f

1a002da8 <ExtRateIn>:
1a002da8:	00000000                                ....

1a002dac <GpioButtons>:
1a002dac:	08000400 09010900                       ........

1a002db4 <GpioLeds>:
1a002db4:	01050005 0e000205 0c010b01              ............

1a002dc0 <GpioPorts>:
1a002dc0:	03030003 0f050403 05031005 07030603     ................
1a002dd0:	ffff0802                                ....

1a002dd4 <OscRateIn>:
1a002dd4:	00b71b00                                ....

1a002dd8 <InitClkStates>:
1a002dd8:	01010f01                                ....

1a002ddc <pinmuxing>:
1a002ddc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002dec:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002dfc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002e0c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002e1c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002e2c:	00d50301 00d50401 00160107 00560207     ..............V.
1a002e3c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002e4c:	00570206                                ..W.

1a002e50 <UART_BClock>:
1a002e50:	01a201c2 01620182                       ......b.

1a002e58 <UART_PClock>:
1a002e58:	00820081 00a200a1 08040201 0f0f0f03     ................
1a002e68:	000000ff                                ....

1a002e6c <periph_to_base>:
1a002e6c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002e7c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002e8c:	000100e0 01000100 01200003 00060120     .......... . ...
1a002e9c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002eac:	01820013 00120182 01a201a2 01c20011     ................
1a002ebc:	001001c2 01e201e2 0202000f 000e0202     ................
1a002ecc:	02220222 0223000d 001c0223              "."...#.#...

1a002ed8 <InitClkStates>:
1a002ed8:	00010100 00010909 0001090a 01010701     ................
1a002ee8:	00010902 00010906 0101090c 0001090d     ................
1a002ef8:	0001090e 0001090f 00010910 00010911     ................
1a002f08:	00010912 00010913 00011114 00011119     ................
1a002f18:	0001111a 0001111b                       ........

1a002f20 <lpcUarts>:
1a002f20:	40081000 06020406 00180205 40081000     ...@...........@
1a002f30:	09070509 00180706 40082000 00000000     ......... .@....
1a002f40:	00190000 400c1000 07060107 001a0602     .......@........
1a002f50:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a002f60:	02020302 001b0204 00061a80 0000000a     ................

1a002f70 <gpioPinsInit>:
1a002f70:	02000104 00050701 05010d03 04080100     ................
1a002f80:	02020002 02000304 00000403 04070002     ................
1a002f90:	030c0300 09050402 05040103 04030208     ................
1a002fa0:	04020305 06040504 0802000c 03000b06     ................
1a002fb0:	00090607 07060503 060f0504 03030004     ................
1a002fc0:	02000404 00050404 06040502 04060200     ................
1a002fd0:	0c050408 05040a04 0003010e 14010a00     ................
1a002fe0:	010f0000 0d000012 00001101 0010010c     ................
1a002ff0:	07070300 000f0300 01000001 00000000     ................
1a003000:	000a0600 08060603 06100504 04030005     ................
1a003010:	03000106 04090400 04010d05 010b0000     ................
1a003020:	0200000f 00000001 00010104 02010800     ................
1a003030:	01090000 09010006 05040002 04010200     ................
1a003040:	02020105 02020504 0e00000a 01000b02     ................
1a003050:	000c020b ffff0c01                       ........
